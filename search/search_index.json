{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bienvenue en Design Web","title":"Accueil"},{"location":"#bienvenue-en-design-web","text":"","title":"Bienvenue en Design Web"},{"location":"examen/examen%2002/examen02_enonce/","text":"Examen 02 - Javascript Consignes Vous avez droit \u00e0 toutes vos notes et Internet. Aucune communication n'est permise (messagerie, courriel, etc.). Un \u00e9l\u00e8ve pris en flagrant d\u00e9lit se verra attribuer la note de 0 pour plagiat. La dur\u00e9e de l'examen est de 1h50. Une fois l\u2019examen termin\u00e9, vous devez faire un commit avec le message \" Remise finale \" et faire un push de votre d\u00e9p\u00f4t pour le synchroniser avec GitHub. Il est de votre devoir de vous assurer que tous les fichiers sont inclus dans le commit. Je vais valider que le commit et la synchronisation avec Github a bien \u00e9t\u00e9 faite mais pas le contenu de votre projet. Aucun fichier ne sera accept\u00e9 une fois que vous aurez quitt\u00e9 le lieu de l'examen. Directives G\u00e9n\u00e9rales Cliquez sur le lien Github classroom que je vais vous fournir et cloner le d\u00e9p\u00f4t cr\u00e9\u00e9 sur votre portable. R\u00e9pondez de votre mieux aux points suivants et une fois termin\u00e9 faites un commit et un push de votre d\u00e9p\u00f4t clon\u00e9. Toutes les validations doivent \u00eatre faites en javascript. Il n'est pas n\u00e9cessaire d'ajouter une validation dans les balises html de la page comme ajouter par exemple required \u00e0 une balise dont on ne veut pas qu'elle soit \"vide\". Point #1 - Envoi du formulaire (10 points) Configurez le formulaire pour qu'il envoie les donn\u00e9es du formulaire de la fa\u00e7on suivante : Les donn\u00e9es seront envoy\u00e9es \u00e0 l'adresse suivante : https://mathieufrechette.ca/examen2.php La m\u00e9thode d'envoie sera par requ\u00eate POST Point #2 - Validation du code de produit (40 points) Faites les validations suivantes en Javascript sur la valeur saisie dans la zone de texte du code de produit. Le code de produit doit \u00eatre sous le format #####-#####-##### ou #####-#####-#####-#####-##### (# correspond \u00e0 un chiffre de 0 \u00e0 9 ou une lettre de a \u00e0 z en majuscule ou minuscule). Dans le fichier script.js je vous fournis une constante REGEX_CODE_PRODUIT qui contient l'expression r\u00e9guli\u00e8re pour confirmer le code de produit. Le code du produit doit exister dans le tableau listeProduits qui est d\u00e9j\u00e0 dans le fichier script.js . La validation sera faite quand l'usager cliquera sur le bouton \"Activer\", donc quand le formulaire sera soumis. La Si le code de produit n'est pas conforme, affichez le message d'erreur correspondant dans la balise div qui porte le id message-erreur . Cette balise est masqu\u00e9 par d\u00e9faut et ne devra \u00eatre visible que si un message d'erreur est affich\u00e9. Les messages d'erreurs sont contenu dans le tableau erreurValidation qui se retrouve dans le fichier script.js Si le format est invalide, afficher le message \"Le code produit que vous avez saisie est invalide, il ne respecte pas le format requis.\". Si le code produit est inexistant, afficher le message \"Aucun produit n'est associ\u00e9 au code de produit saisie.\". Point #3 - Validation finale du formulaire (50 points) La validation du formulaire se fera lors de l'\u00e9v\u00e9nement submit du formulaire qui est d\u00e9clench\u00e9 lors d'un clique sur le bouton \"Activer\". Reliez une fonction Javascript au formulaire lorsque l'\u00e9v\u00e9nement submit est d\u00e9clench\u00e9. Tous les messages d'erreurs doivent \u00eatre r\u00e9initialis\u00e9 et masqu\u00e9. Si le format du code de produit est invalide ou que le code de produit est inexistant dans le tableau listeProduits , emp\u00eachez la transmission du formulaire. Si la case \"J'accepte les termes de ...\" n'est pas coch\u00e9e, affichez dans la div message-erreur le message d'erreur \"Vous devez accepter les termes de l\u2019Accord de souscription Vapeur pour finaliser la transaction.\" et emp\u00eachez la transmission du formulaire. Le texte de la case \u00e0 cocher doit aussi changer de couleur. Le code de la couleur est dans la variable --couleur-texte-invalide qui est dans le fichier style.css","title":"Examen 02 - Javascript"},{"location":"examen/examen%2002/examen02_enonce/#examen-02-javascript","text":"","title":"Examen 02 - Javascript"},{"location":"examen/examen%2002/examen02_enonce/#consignes","text":"Vous avez droit \u00e0 toutes vos notes et Internet. Aucune communication n'est permise (messagerie, courriel, etc.). Un \u00e9l\u00e8ve pris en flagrant d\u00e9lit se verra attribuer la note de 0 pour plagiat. La dur\u00e9e de l'examen est de 1h50. Une fois l\u2019examen termin\u00e9, vous devez faire un commit avec le message \" Remise finale \" et faire un push de votre d\u00e9p\u00f4t pour le synchroniser avec GitHub. Il est de votre devoir de vous assurer que tous les fichiers sont inclus dans le commit. Je vais valider que le commit et la synchronisation avec Github a bien \u00e9t\u00e9 faite mais pas le contenu de votre projet. Aucun fichier ne sera accept\u00e9 une fois que vous aurez quitt\u00e9 le lieu de l'examen.","title":"Consignes"},{"location":"examen/examen%2002/examen02_enonce/#directives-generales","text":"Cliquez sur le lien Github classroom que je vais vous fournir et cloner le d\u00e9p\u00f4t cr\u00e9\u00e9 sur votre portable. R\u00e9pondez de votre mieux aux points suivants et une fois termin\u00e9 faites un commit et un push de votre d\u00e9p\u00f4t clon\u00e9. Toutes les validations doivent \u00eatre faites en javascript. Il n'est pas n\u00e9cessaire d'ajouter une validation dans les balises html de la page comme ajouter par exemple required \u00e0 une balise dont on ne veut pas qu'elle soit \"vide\".","title":"Directives G\u00e9n\u00e9rales"},{"location":"examen/examen%2002/examen02_enonce/#point-1-envoi-du-formulaire-10-points","text":"Configurez le formulaire pour qu'il envoie les donn\u00e9es du formulaire de la fa\u00e7on suivante : Les donn\u00e9es seront envoy\u00e9es \u00e0 l'adresse suivante : https://mathieufrechette.ca/examen2.php La m\u00e9thode d'envoie sera par requ\u00eate POST","title":"Point #1 - Envoi du formulaire (10 points)"},{"location":"examen/examen%2002/examen02_enonce/#point-2-validation-du-code-de-produit-40-points","text":"Faites les validations suivantes en Javascript sur la valeur saisie dans la zone de texte du code de produit. Le code de produit doit \u00eatre sous le format #####-#####-##### ou #####-#####-#####-#####-##### (# correspond \u00e0 un chiffre de 0 \u00e0 9 ou une lettre de a \u00e0 z en majuscule ou minuscule). Dans le fichier script.js je vous fournis une constante REGEX_CODE_PRODUIT qui contient l'expression r\u00e9guli\u00e8re pour confirmer le code de produit. Le code du produit doit exister dans le tableau listeProduits qui est d\u00e9j\u00e0 dans le fichier script.js . La validation sera faite quand l'usager cliquera sur le bouton \"Activer\", donc quand le formulaire sera soumis. La Si le code de produit n'est pas conforme, affichez le message d'erreur correspondant dans la balise div qui porte le id message-erreur . Cette balise est masqu\u00e9 par d\u00e9faut et ne devra \u00eatre visible que si un message d'erreur est affich\u00e9. Les messages d'erreurs sont contenu dans le tableau erreurValidation qui se retrouve dans le fichier script.js Si le format est invalide, afficher le message \"Le code produit que vous avez saisie est invalide, il ne respecte pas le format requis.\". Si le code produit est inexistant, afficher le message \"Aucun produit n'est associ\u00e9 au code de produit saisie.\".","title":"Point #2 - Validation du code de produit (40 points)"},{"location":"examen/examen%2002/examen02_enonce/#point-3-validation-finale-du-formulaire-50-points","text":"La validation du formulaire se fera lors de l'\u00e9v\u00e9nement submit du formulaire qui est d\u00e9clench\u00e9 lors d'un clique sur le bouton \"Activer\". Reliez une fonction Javascript au formulaire lorsque l'\u00e9v\u00e9nement submit est d\u00e9clench\u00e9. Tous les messages d'erreurs doivent \u00eatre r\u00e9initialis\u00e9 et masqu\u00e9. Si le format du code de produit est invalide ou que le code de produit est inexistant dans le tableau listeProduits , emp\u00eachez la transmission du formulaire. Si la case \"J'accepte les termes de ...\" n'est pas coch\u00e9e, affichez dans la div message-erreur le message d'erreur \"Vous devez accepter les termes de l\u2019Accord de souscription Vapeur pour finaliser la transaction.\" et emp\u00eachez la transmission du formulaire. Le texte de la case \u00e0 cocher doit aussi changer de couleur. Le code de la couleur est dans la variable --couleur-texte-invalide qui est dans le fichier style.css","title":"Point #3 - Validation finale du formulaire (50 points)"},{"location":"exercices/ex11_font/ex11_enonce/","text":"Exercice 11 - Police de caract\u00e8res personnalis\u00e9es Cr\u00e9ez dans votre dossier designweb un nouveau dossier nomm\u00e9 ex11_police . Vous devez r\u00e9aliser deux banni\u00e8res fictives en utilisant des polices de caract\u00e8res personnalis\u00e9es. Le texte et le style de la banni\u00e8re est enti\u00e8rement \u00e0 votre choix. Premi\u00e8re banni\u00e8re La premi\u00e8re banni\u00e8re utilisera un web font. Le fichier de la police de caract\u00e8re doit \u00eatre disponible dans le dossier de votre site et non par une url sur le web. Ajoutez un text-shadow \u00e0 votre texte. Utilisez un linear-gradiant ou une image pour le fond de votre banni\u00e8re. Deuxi\u00e8me banni\u00e8re La deuxi\u00e8me banni\u00e8re utilisera une police de Google Font . La police doit \u00eatre utilis\u00e9 depuis l'url vers les serveurs de Google. Ajoutez aussi \u00e0 la banni\u00e8re des icones de Font Awesome . Ajoutez un box-shadow \u00e0 votre banni\u00e8re. Utilisez un linear-gradiant ou une image pour le fond de votre banni\u00e8re. Exemple de banni\u00e8res","title":"Exercice 11 - Font"},{"location":"exercices/ex11_font/ex11_enonce/#exercice-11-police-de-caracteres-personnalisees","text":"Cr\u00e9ez dans votre dossier designweb un nouveau dossier nomm\u00e9 ex11_police . Vous devez r\u00e9aliser deux banni\u00e8res fictives en utilisant des polices de caract\u00e8res personnalis\u00e9es. Le texte et le style de la banni\u00e8re est enti\u00e8rement \u00e0 votre choix.","title":"Exercice 11 - Police de caract\u00e8res personnalis\u00e9es"},{"location":"exercices/ex11_font/ex11_enonce/#premiere-banniere","text":"La premi\u00e8re banni\u00e8re utilisera un web font. Le fichier de la police de caract\u00e8re doit \u00eatre disponible dans le dossier de votre site et non par une url sur le web. Ajoutez un text-shadow \u00e0 votre texte. Utilisez un linear-gradiant ou une image pour le fond de votre banni\u00e8re.","title":"Premi\u00e8re banni\u00e8re"},{"location":"exercices/ex11_font/ex11_enonce/#deuxieme-banniere","text":"La deuxi\u00e8me banni\u00e8re utilisera une police de Google Font . La police doit \u00eatre utilis\u00e9 depuis l'url vers les serveurs de Google. Ajoutez aussi \u00e0 la banni\u00e8re des icones de Font Awesome . Ajoutez un box-shadow \u00e0 votre banni\u00e8re. Utilisez un linear-gradiant ou une image pour le fond de votre banni\u00e8re. Exemple de banni\u00e8res","title":"Deuxi\u00e8me banni\u00e8re"},{"location":"exercices/ex12_animation/ex12_enonce/","text":"Exercice 12 - Animation en css Partie 1 En reprenant votre exercice 11, vous allez ajouter des animations \u00e0 vos banni\u00e8res. Pour une des banni\u00e8res, cr\u00e9ez une animation avec la commande @keyframe qui s'affichera en continue. Pour l'autre banni\u00e8res, ajoutez des animations sur des \u00e9l\u00e9ments avec transition et transform . Partie 2 Ajoutez dans le haut de votre page une section menu avec des liens. Agr\u00e9mentez le tout par de superbes animations que vous \u00eates maintenant capable de faire. Ex : Ajouter des animations aux liens quand on les survol. Amusez-vous et soyez cr\u00e9atif.","title":"Exercice 12 - Animation"},{"location":"exercices/ex12_animation/ex12_enonce/#exercice-12-animation-en-css","text":"","title":"Exercice 12 - Animation en css"},{"location":"exercices/ex12_animation/ex12_enonce/#partie-1","text":"En reprenant votre exercice 11, vous allez ajouter des animations \u00e0 vos banni\u00e8res. Pour une des banni\u00e8res, cr\u00e9ez une animation avec la commande @keyframe qui s'affichera en continue. Pour l'autre banni\u00e8res, ajoutez des animations sur des \u00e9l\u00e9ments avec transition et transform .","title":"Partie 1"},{"location":"exercices/ex12_animation/ex12_enonce/#partie-2","text":"Ajoutez dans le haut de votre page une section menu avec des liens. Agr\u00e9mentez le tout par de superbes animations que vous \u00eates maintenant capable de faire. Ex : Ajouter des animations aux liens quand on les survol. Amusez-vous et soyez cr\u00e9atif.","title":"Partie 2"},{"location":"exercices/ex13_variables/ex13_enonce/","text":"Exercice 13 - Variables CSS Premi\u00e8re partie Cr\u00e9ez un nouveau d\u00e9p\u00f4t sur Github appel\u00e9 ex13_nomprenom. Clonez ce d\u00e9p\u00f4t dans votre dossier designweb . Copiez les fichiers de votre exercices 12 dans le dossier cr\u00e9\u00e9 par la commande clone (Le dossier devrait s'appeler ex13_nomprenom). Si vous n'avez pas fait l'exercice 12, copiez-y votre exercice 11. Faites un premier commit. Modifier votre fichier css pour y ajouter des variables css. Ajouter des variables dans les transitions et votre animation. Faites un deuxi\u00e8me commit. \"Poussez\" vos commit sur GitHub (git push -u origin main). Deuxi\u00e8me partie \u00c9changez l'url de votre d\u00e9p\u00f4t Github avec un voisin. Dans votre d\u00e9p\u00f4t Github, allez dans la section settings -> collaborators et ajouter votre voisin dans les collaborateurs. Clonez son d\u00e9p\u00f4t sur votre ordinateur. Modifiez son projet en ajoutant une de vos banni\u00e8res. Assurez-vous de n'avoir rien bris\u00e9 et que tout fonctionne bien. Faites un commit de vos ajouts. \"Poussez\" vos modifications sur Github. Troisi\u00e8me partie Allez sur github dans la page de votre d\u00e9p\u00f4t ex13_nomprenom. Analysez le pull request et acceptez le. (Vous devriez y voir les modifications envoy\u00e9es par votre voisin) Revenez \u00e0 votre projet ex13_nomprenom. Allez chercher les modifications sur Github ( git pull ) Vous devriez avoir maintenant la banni\u00e8re de votre voisin d'ajout\u00e9e \u00e0 votre page.","title":"Exercice 13 - Variables"},{"location":"exercices/ex13_variables/ex13_enonce/#exercice-13-variables-css","text":"","title":"Exercice 13 - Variables CSS"},{"location":"exercices/ex13_variables/ex13_enonce/#premiere-partie","text":"Cr\u00e9ez un nouveau d\u00e9p\u00f4t sur Github appel\u00e9 ex13_nomprenom. Clonez ce d\u00e9p\u00f4t dans votre dossier designweb . Copiez les fichiers de votre exercices 12 dans le dossier cr\u00e9\u00e9 par la commande clone (Le dossier devrait s'appeler ex13_nomprenom). Si vous n'avez pas fait l'exercice 12, copiez-y votre exercice 11. Faites un premier commit. Modifier votre fichier css pour y ajouter des variables css. Ajouter des variables dans les transitions et votre animation. Faites un deuxi\u00e8me commit. \"Poussez\" vos commit sur GitHub (git push -u origin main).","title":"Premi\u00e8re partie"},{"location":"exercices/ex13_variables/ex13_enonce/#deuxieme-partie","text":"\u00c9changez l'url de votre d\u00e9p\u00f4t Github avec un voisin. Dans votre d\u00e9p\u00f4t Github, allez dans la section settings -> collaborators et ajouter votre voisin dans les collaborateurs. Clonez son d\u00e9p\u00f4t sur votre ordinateur. Modifiez son projet en ajoutant une de vos banni\u00e8res. Assurez-vous de n'avoir rien bris\u00e9 et que tout fonctionne bien. Faites un commit de vos ajouts. \"Poussez\" vos modifications sur Github.","title":"Deuxi\u00e8me partie"},{"location":"exercices/ex13_variables/ex13_enonce/#troisieme-partie","text":"Allez sur github dans la page de votre d\u00e9p\u00f4t ex13_nomprenom. Analysez le pull request et acceptez le. (Vous devriez y voir les modifications envoy\u00e9es par votre voisin) Revenez \u00e0 votre projet ex13_nomprenom. Allez chercher les modifications sur Github ( git pull ) Vous devriez avoir maintenant la banni\u00e8re de votre voisin d'ajout\u00e9e \u00e0 votre page.","title":"Troisi\u00e8me partie"},{"location":"exercices/ex14_bootstrap/ex14_enonce/","text":"Exercice 14 - Bootstrap \u00c0 l'aide de Bootstrap et de tout ce que vous avez appris jusqu'\u00e0 maintenant ( et peut-\u00eatre un petit peu de Google), reproduisez la maquette suivante. La section avec les \"cards\" doit \u00eatre \"responsive\". Utilisez le \"breakpoint\" md pour que les \"cards\" soit empil\u00e9es une sous l'autre (une colonne et trois lignes au lieu de trois colonnes sur une ligne). Le texte, les couleurs et les images sont \u00e0 votre discr\u00e9tion. Ressources Navbar : https://getbootstrap.com/docs/5.2/components/navbar/ Card : https://getbootstrap.com/docs/5.2/components/card/ Tableau : https://getbootstrap.com/docs/5.2/content/tables/ Grid : https://getbootstrap.com/docs/5.2/layout/grid/ Et si vous \u00eates un peu perdu, la d\u00e9mo est ici .","title":"Exercice 14 - Bootstrap"},{"location":"exercices/ex14_bootstrap/ex14_enonce/#exercice-14-bootstrap","text":"\u00c0 l'aide de Bootstrap et de tout ce que vous avez appris jusqu'\u00e0 maintenant ( et peut-\u00eatre un petit peu de Google), reproduisez la maquette suivante. La section avec les \"cards\" doit \u00eatre \"responsive\". Utilisez le \"breakpoint\" md pour que les \"cards\" soit empil\u00e9es une sous l'autre (une colonne et trois lignes au lieu de trois colonnes sur une ligne). Le texte, les couleurs et les images sont \u00e0 votre discr\u00e9tion.","title":"Exercice 14 - Bootstrap"},{"location":"exercices/ex14_bootstrap/ex14_enonce/#ressources","text":"Navbar : https://getbootstrap.com/docs/5.2/components/navbar/ Card : https://getbootstrap.com/docs/5.2/components/card/ Tableau : https://getbootstrap.com/docs/5.2/content/tables/ Grid : https://getbootstrap.com/docs/5.2/layout/grid/ Et si vous \u00eates un peu perdu, la d\u00e9mo est ici .","title":"Ressources"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/","text":"Exercice 15 - Horloge en javascript Comme premier exercice en javascript, on va cr\u00e9er une horloge digitale qui affichera la date et l'heure actuelle. On va aussi utiliser une police d'\u00e9criture offerte par Google Fonts. Premi\u00e8re partie Caract\u00e9ristiques La date doit \u00eatre sous la forme nomDuJour aaaa-mm-dd (Vendredi 2021-10-01). Le format de l'heure doit \u00eatre hh:mm:ss [AM/PM] (00:31:45 AM). Vous allez devoir faire un calcul pour \"ramener\" l'heure sur 12 heures et afficher AM ou PM selon le cas. L'horloge doit \u00eatre rafraichi \u00e0 toute les secondes. Astuce, cr\u00e9ez une division pour la date et une autre pour l'heure. Ensuite en javascript allez modifier le texte \u00e0 l'int\u00e9rieur des divisions \u00e0 l'aide de innerHTML . Notions dont vous aurez besoin Fonctions date // R\u00e9cup\u00e9rer la date et l'heure actuelle dans une variable let dateActuel = new Date(); // Isoler une partie de la date ou de l'heure let heure = dateActuel.getHours(); let mois = dateActuel.getMonth(); // Il y a des fonctions pour chaque \"\u00e9l\u00e9ment\" de la date Documentation : https://www.w3schools.com/jsref/jsref_obj_date.asp S\u00e9lectionner une balise html getElementById() // S\u00e9lectionner un \u00e9l\u00e9ment selon son id let displayDate = document.getElementById('date_display'); displayDate.innerHTML = \"Ma date\"; querySelector // S\u00e9lectionner un \u00e9l\u00e9ment avec un s\u00e9lecteur CSS let displayDate = document.querySelector('#date_display'); displayDate.innerHTML = \"Ma date\"; Lancer une fonction de mani\u00e8re p\u00e9riodique Comme piste de solution, regardez les fonctions setInterval ou setTimout. /** * Function qui affiche l'heure */ function afficheHeure() { // ... } // setInterval prend une fonction en param\u00eatre et un interval de temps en millisecondes. // \u00c0 chaque intervale la fonction sera appel\u00e9e. setInterval(afficheHeure, 1000); Oublions pas le css Englobez votre horloge dans une division qui sera align\u00e9e \u00e0 droite (le texte sera aussi align\u00e9 \u00e0 droite dans chaque division). Donnez un effet de transparence \u00e0 la division de l'horloge. Utilisez une police de caract\u00e8re de Google Font. Ajoutez une image de fond \u00e0 la page. Deuxi\u00e8me partie Pour aller un peu plus loin avec notre horloge, on va ajouter une liste d'icone sur le c\u00f4t\u00e9 gauche de la page pour offrir des options d'affichage. Utilisation d'icones de Font Awesome Pour les icones du menu d'options, utilisez les icones offertes par Font Awesome (https://fontawesome.com/). Dans le cadre de notre exercice, vous allez t\u00e9l\u00e9charger une copie des icones et les inclure dans votre projet. Consulter la documentation \u00e0 l'adresse suivante : https://fontawesome.com/v5.15/how-to-use/on-the-web/setup/hosting-font-awesome-yourself. Vous y trouverez un lien de t\u00e9l\u00e9chargement et la marche \u00e0 suivre \u00e0 la section \" Using Web Fonts with CSS \". Pour le choix du t\u00e9l\u00e9chargement, utilisez l'ic\u00f4ne \"Free For Web\". Le choix des icones est libre, vous pouvez faire une recherche sur le site de Font Awesome (avec le t\u00e9l\u00e9chargement vous avez acc\u00e8s qu'aux icones gratuites). Comportement des icones L'icone doit changer de couleur quand on la survole. Le curseur de la souris doit \u00eatre une \"main\". Quand on survole l'icone, affichez une bulle de texte qui d\u00e9crit l'option. Quand on clique sur l'icone, la couleur de l'icone devient la m\u00eame que lors de son survol. Si on clique \u00e0 nouveau elle reprend sa couleur originale. (\u00c7a va donner une sorte de On/Off). Toujours quand on clique sur l'icone, une fonction javascript est lanc\u00e9 pour effectu\u00e9 le traitement requis. Affichage sur 24 heures La premi\u00e8re option nous permet de basculer l'affichage de l'heure en mode 12 heures ou 24 heures. (https://fr.wikipedia.org/wiki/Syst%C3%A8me_horaire_sur_12_heures#Correspondance) Masquer la date La deuxi\u00e8me option nous permet de masquer la date du jour. Notes Les options sont cumulatives, on peut masquer la date et avoir un affichage sur 24 heures. Indices En javascript, on peut \"toggle\" une classe sur un \u00e9l\u00e9ment html, c'est-\u00e0-dire l'ajouter si elle n'est pas pr\u00e9sente ou l'enlever dans le cas inverse. // Ici \"icone\" est un objet qui repr\u00e9sente l'icone qui a \u00e9t\u00e9 cliqu\u00e9 icone.classList.toggle(\"selected\"); Pour la bulle d'aide, il y a plusieurs exemples de \"tooltip\" que vous pouvez trouver en cherchant moindrement. \u00c0 vous de les adapter \u00e0 vos besoins. Si vous ne voulez pas \"d\u00e9truire\" la disposition que vous aviez d\u00e9j\u00e0 fait de votre page avec les icones \u00e0 ajouter, regardez du c\u00f4t\u00e9 de la propri\u00e9t\u00e9 css position: absolute; . On peut associer une fonction javascript \u00e0 un \u00e9v\u00e9nement directement dans le html, par exemple si on veut d\u00e9clencher la fonction quand on clique sur l'\u00e9l\u00e9ment html, on va utiliser onclick avec la fonction \u00e0 \u00e9x\u00e9cuter en valeur : <!-- ici sur un clique sur l'icone on va lancer la fonction changerAffichage12h en passant this en param\u00eatre (voir plus bas pour le param\u00eatre this) --> <i id=\"icon_periode\" class=\"far fa-clock\" onclick=\"changerAffichage12h(this)\"></i> Quand on appelle une fonction javascript depuis un \u00e9l\u00e9ment HTML, on peut \"passer\" cet \u00e9l\u00e9ment en param\u00e8tre de la fonction avec this . Voir exemple plus bas <!-- Dans votre fichier HTML --> <button onclick=\"maFonction(this)\"></button> // Dans votre script function maFonction(bouton){ // la variable bouton contient l'\u00e9l\u00e9ment button qui \u00e0 appeler la fonction // on peut maintenant l'utiliser, un peut comme on la fait avec getElementById // Ex. Je veux changer le texte du bouton bouton.innerHTML = \"Cliquez-moi... svp\"; } Version finale Vous pouvez consulter ma version de l'exercice ici T\u00e9l\u00e9chargement","title":"Exercice 15 - Horloge Javascript"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#exercice-15-horloge-en-javascript","text":"Comme premier exercice en javascript, on va cr\u00e9er une horloge digitale qui affichera la date et l'heure actuelle. On va aussi utiliser une police d'\u00e9criture offerte par Google Fonts.","title":"Exercice 15 - Horloge en javascript"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#premiere-partie","text":"","title":"Premi\u00e8re partie"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#caracteristiques","text":"La date doit \u00eatre sous la forme nomDuJour aaaa-mm-dd (Vendredi 2021-10-01). Le format de l'heure doit \u00eatre hh:mm:ss [AM/PM] (00:31:45 AM). Vous allez devoir faire un calcul pour \"ramener\" l'heure sur 12 heures et afficher AM ou PM selon le cas. L'horloge doit \u00eatre rafraichi \u00e0 toute les secondes. Astuce, cr\u00e9ez une division pour la date et une autre pour l'heure. Ensuite en javascript allez modifier le texte \u00e0 l'int\u00e9rieur des divisions \u00e0 l'aide de innerHTML .","title":"Caract\u00e9ristiques"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#notions-dont-vous-aurez-besoin","text":"","title":"Notions dont vous aurez besoin"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#fonctions-date","text":"// R\u00e9cup\u00e9rer la date et l'heure actuelle dans une variable let dateActuel = new Date(); // Isoler une partie de la date ou de l'heure let heure = dateActuel.getHours(); let mois = dateActuel.getMonth(); // Il y a des fonctions pour chaque \"\u00e9l\u00e9ment\" de la date Documentation : https://www.w3schools.com/jsref/jsref_obj_date.asp","title":"Fonctions date"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#selectionner-une-balise-html","text":"getElementById() // S\u00e9lectionner un \u00e9l\u00e9ment selon son id let displayDate = document.getElementById('date_display'); displayDate.innerHTML = \"Ma date\"; querySelector // S\u00e9lectionner un \u00e9l\u00e9ment avec un s\u00e9lecteur CSS let displayDate = document.querySelector('#date_display'); displayDate.innerHTML = \"Ma date\";","title":"S\u00e9lectionner une balise html"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#lancer-une-fonction-de-maniere-periodique","text":"Comme piste de solution, regardez les fonctions setInterval ou setTimout. /** * Function qui affiche l'heure */ function afficheHeure() { // ... } // setInterval prend une fonction en param\u00eatre et un interval de temps en millisecondes. // \u00c0 chaque intervale la fonction sera appel\u00e9e. setInterval(afficheHeure, 1000);","title":"Lancer une fonction de mani\u00e8re p\u00e9riodique"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#oublions-pas-le-css","text":"Englobez votre horloge dans une division qui sera align\u00e9e \u00e0 droite (le texte sera aussi align\u00e9 \u00e0 droite dans chaque division). Donnez un effet de transparence \u00e0 la division de l'horloge. Utilisez une police de caract\u00e8re de Google Font. Ajoutez une image de fond \u00e0 la page.","title":"Oublions pas le css"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#deuxieme-partie","text":"Pour aller un peu plus loin avec notre horloge, on va ajouter une liste d'icone sur le c\u00f4t\u00e9 gauche de la page pour offrir des options d'affichage.","title":"Deuxi\u00e8me partie"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#utilisation-dicones-de-font-awesome","text":"Pour les icones du menu d'options, utilisez les icones offertes par Font Awesome (https://fontawesome.com/). Dans le cadre de notre exercice, vous allez t\u00e9l\u00e9charger une copie des icones et les inclure dans votre projet. Consulter la documentation \u00e0 l'adresse suivante : https://fontawesome.com/v5.15/how-to-use/on-the-web/setup/hosting-font-awesome-yourself. Vous y trouverez un lien de t\u00e9l\u00e9chargement et la marche \u00e0 suivre \u00e0 la section \" Using Web Fonts with CSS \". Pour le choix du t\u00e9l\u00e9chargement, utilisez l'ic\u00f4ne \"Free For Web\". Le choix des icones est libre, vous pouvez faire une recherche sur le site de Font Awesome (avec le t\u00e9l\u00e9chargement vous avez acc\u00e8s qu'aux icones gratuites).","title":"Utilisation d'icones de Font Awesome"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#comportement-des-icones","text":"L'icone doit changer de couleur quand on la survole. Le curseur de la souris doit \u00eatre une \"main\". Quand on survole l'icone, affichez une bulle de texte qui d\u00e9crit l'option. Quand on clique sur l'icone, la couleur de l'icone devient la m\u00eame que lors de son survol. Si on clique \u00e0 nouveau elle reprend sa couleur originale. (\u00c7a va donner une sorte de On/Off). Toujours quand on clique sur l'icone, une fonction javascript est lanc\u00e9 pour effectu\u00e9 le traitement requis.","title":"Comportement des icones"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#affichage-sur-24-heures","text":"La premi\u00e8re option nous permet de basculer l'affichage de l'heure en mode 12 heures ou 24 heures. (https://fr.wikipedia.org/wiki/Syst%C3%A8me_horaire_sur_12_heures#Correspondance)","title":"Affichage sur 24 heures"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#masquer-la-date","text":"La deuxi\u00e8me option nous permet de masquer la date du jour.","title":"Masquer la date"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#notes","text":"Les options sont cumulatives, on peut masquer la date et avoir un affichage sur 24 heures.","title":"Notes"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#indices","text":"En javascript, on peut \"toggle\" une classe sur un \u00e9l\u00e9ment html, c'est-\u00e0-dire l'ajouter si elle n'est pas pr\u00e9sente ou l'enlever dans le cas inverse. // Ici \"icone\" est un objet qui repr\u00e9sente l'icone qui a \u00e9t\u00e9 cliqu\u00e9 icone.classList.toggle(\"selected\"); Pour la bulle d'aide, il y a plusieurs exemples de \"tooltip\" que vous pouvez trouver en cherchant moindrement. \u00c0 vous de les adapter \u00e0 vos besoins. Si vous ne voulez pas \"d\u00e9truire\" la disposition que vous aviez d\u00e9j\u00e0 fait de votre page avec les icones \u00e0 ajouter, regardez du c\u00f4t\u00e9 de la propri\u00e9t\u00e9 css position: absolute; . On peut associer une fonction javascript \u00e0 un \u00e9v\u00e9nement directement dans le html, par exemple si on veut d\u00e9clencher la fonction quand on clique sur l'\u00e9l\u00e9ment html, on va utiliser onclick avec la fonction \u00e0 \u00e9x\u00e9cuter en valeur : <!-- ici sur un clique sur l'icone on va lancer la fonction changerAffichage12h en passant this en param\u00eatre (voir plus bas pour le param\u00eatre this) --> <i id=\"icon_periode\" class=\"far fa-clock\" onclick=\"changerAffichage12h(this)\"></i> Quand on appelle une fonction javascript depuis un \u00e9l\u00e9ment HTML, on peut \"passer\" cet \u00e9l\u00e9ment en param\u00e8tre de la fonction avec this . Voir exemple plus bas <!-- Dans votre fichier HTML --> <button onclick=\"maFonction(this)\"></button> // Dans votre script function maFonction(bouton){ // la variable bouton contient l'\u00e9l\u00e9ment button qui \u00e0 appeler la fonction // on peut maintenant l'utiliser, un peut comme on la fait avec getElementById // Ex. Je veux changer le texte du bouton bouton.innerHTML = \"Cliquez-moi... svp\"; }","title":"Indices"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#version-finale","text":"Vous pouvez consulter ma version de l'exercice ici T\u00e9l\u00e9chargement","title":"Version finale"},{"location":"exercices/ex16_musical/ex16_enonce/","text":"Exercice 16 - JS the musical Dans cet exercice on va cr\u00e9er un des deux \"instrument\" de musique suivant en javascript: un esp\u00e8ce de \"drum kit\" ou un piano. Le principe reste le m\u00eame, mais le piano va demander plus de travail au niveau du css. Chaque notes ou effets sonores sera associ\u00e9s \u00e0 une touche du clavier. Quand on appuie sur cette touche, le bon son est jou\u00e9 et une animation est lanc\u00e9e sur la case note correspondante. On peut aussi cliquer sur la case et la m\u00eame proc\u00e9dure est appliqu\u00e9e. Vous pouvez t\u00e9l\u00e9charger les fichiers sont --> ici <-- exemple de drum kit. exemple de piano notions \u00e0 utiliser Les attributs data. La balise HTML audio pour les sons S\u00e9lectionner plusieurs \u00e9l\u00e9ments HTML \u00e0 la fois ( querySelectorAll , getElementsByClassName ) Associer un \u00e9l\u00e9ment HTML \u00e0 un \u00e9v\u00e9nement en Javascript ( addEventListener ) Ajouter et enlever une classe d'un \u00e9l\u00e9ment HTML( classList.Add() et classList.Remove() ) Utilisation de l'\u00e9l\u00e9ment this Pseudo-code HTML Cr\u00e9er une div pour chaque case et lui donner un attribut personnalis\u00e9 avec la valeur du code de la touche \u00e0 appuy\u00e9. Ex 65 pour la touche a. Pour conna\u00eetre facilement le code des touches : https://www.toptal.com/developers/keycode/for/a Pour chaque case, ajoutez aussi une balise audio avec le m\u00eame attribut personnalis\u00e9 ainsi que le fichier son. <div data-key=\"65\" class=\"key\"> <kbd>A</kbd> <!-- La balise kbd indique qu'on s'attend \u00e0 ce que l'usager entre cette touche c'est purement s\u00e9mantique, ce n'est pas \u00e7a qui va faire que la touche est reconnnue, on va tout faire en js --> <span>clap</span> </div> ... <audio src=\"assets/sounds/boom.wav\" data-key=\"65\"></audio> CSS Faire la disposition et la mise en forme des cases Cr\u00e9er une classe qui va faire l'animation de la case. (Un peu comme on le faisait avec :hover mais \u00e7a va \u00eatre dans un classe \u00e0 part) .key { /* ... */ transition: all 70ms ease; } /* au lieu d'utiliser .key:hover on fait une autre classe qu'on va ajouter ou supprimer \u00e0 la div qui a la classe key. */ .selection { transform: scale(1.2); border-color: orange; box-shadow: 0 0 10px orange; border-radius: 5px; } JS R\u00e9cup\u00e9rer toutes les cases dans une variable globale. Associer les \u00e9v\u00e9nements click et transitionend \u00e0 toutes ces cases (utiliser une boucle forEach ) Associer l'\u00e9v\u00e9nement keydown \u00e0 l'\u00e9l\u00e9ment window pour capter les touches appuy\u00e9es window.addEventListener('keydown', maFonction); Faire une fonction qui va recevoir en param\u00e8tre le code de la touche. 1. R\u00e9cup\u00e9rer dans des variables la balise audio associ\u00e9 \u00e0 la touche ainsi que la case de la note 2. Tester si la balise existe, sinon sortie de la fonction 3. Jouer le fichier son 4. Ajouter la classe qui va faire l'animation Faire une fonction qui va \u00eatre utilis\u00e9e par l'\u00e9v\u00e9nement click de la case, qui va r\u00e9cup\u00e9rer l'attribut personnalis\u00e9 de la case et qui va appeler la fonction qui joue le son avec la valeur de l'attribut en param\u00e8tre. Faire une fonction qui va \u00eatre utilis\u00e9 par l'\u00e9v\u00e9nement keydown de window, qui va r\u00e9cup\u00e9rer le code de la touche press\u00e9 par l'objet e et qui va appeler la fonction qui joue le son avec le code de la touche en param\u00e8tre. (voir code dans la section aide) Faire une fonction qui va \u00eatre utilis\u00e9e par l'\u00e9v\u00e9nement transitionend de la case et qui va retirer la classe qui fait l'animation. function boutonJoue() { /* La fonction boutonJoue() a \u00e9t\u00e9 lanc\u00e9 quand on a cliqu\u00e9 sur la case de la note, ici this va \u00eatre \u00e9gale \u00e0 cette case. Je peux donc acc\u00e9der \u00e0 ses attributs de cette fa\u00e7on. La fonction joueSon sera lanc\u00e9 avec en param\u00e8tre la valeur de l'attribut data- key de la case note */ joueSon(this.getAttribute(\"data-key\")); } function toucheJoue(e) { /* Quand on lance une fonction depuis un \u00e9v\u00e9nement, on a acc\u00e8s \u00e0 l'objet e qui repr\u00e9sente l'\u00e9v\u00e9nement en soit. Cette objet \u00e0 plusieurs propri\u00e9t\u00e9s qui varies selont l'\u00e9v\u00e9nement. Ici, puisque qu'on r\u00e9agit \u00e0 l'\u00e9v\u00e9nement keydown on a acc\u00e8s \u00e0 la propri\u00e9t\u00e9 keyCode qui nous donne le code de la cl\u00e9 press\u00e9e. */ joueSon(e.keyCode); } Aide Pour faire jouer un \u00e9l\u00e9ment audio, r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment HTML dans une variable, ensuite // Red\u00e9marre l'enregistrement monElement.currentTime = 0; // Lance l'enregistrement monElement.play(); Associer un \u00e9v\u00e9nement \u00e0 un \u00e9l\u00e9ment HTML // Associe l'\u00e9v\u00e9nement keydown \u00e0 l'\u00e9l\u00e9ment window et lance la fonction toucheJoue // quand il est d\u00e9clench\u00e9 window.addEventListener('keydown', toucheJoue); // keys est un tableau d'\u00e9l\u00e9ment html, voici une fa\u00e7on d'associer chaque \u00e9l\u00e9ment // du tableau \u00e0 un \u00e9v\u00e9nement keys.forEach(function(key){ key.addEventListener('click',boutonJoue) }) // La m\u00eame chose mais avec une fonction fl\u00e9ch\u00e9e keys.forEach( key => key.addEventListener('click', boutonJoue)) R\u00e9cup\u00e9rer le code de la touche qui a \u00e9t\u00e9 press\u00e9 function afficheTouchePress(e) { // La variable e est un objet qui r\u00e9pr\u00e9sente l'\u00e9v\u00e9nement et qui // contient plusieur propri\u00e9t\u00e9 dont keyCode dans le cas pr\u00e9sent. console.log(e.keyCode); } window.addEventListener('keydown', afficheTouchePress); Version finale Vous pouvez consulter ma version du drumkit ici Vous pouvez consulter ma version du piano ici T\u00e9l\u00e9chargement","title":"Exercice 16 - JS the musical"},{"location":"exercices/ex16_musical/ex16_enonce/#exercice-16-js-the-musical","text":"Dans cet exercice on va cr\u00e9er un des deux \"instrument\" de musique suivant en javascript: un esp\u00e8ce de \"drum kit\" ou un piano. Le principe reste le m\u00eame, mais le piano va demander plus de travail au niveau du css. Chaque notes ou effets sonores sera associ\u00e9s \u00e0 une touche du clavier. Quand on appuie sur cette touche, le bon son est jou\u00e9 et une animation est lanc\u00e9e sur la case note correspondante. On peut aussi cliquer sur la case et la m\u00eame proc\u00e9dure est appliqu\u00e9e. Vous pouvez t\u00e9l\u00e9charger les fichiers sont --> ici <-- exemple de drum kit. exemple de piano","title":"Exercice 16 - JS the musical"},{"location":"exercices/ex16_musical/ex16_enonce/#notions-a-utiliser","text":"Les attributs data. La balise HTML audio pour les sons S\u00e9lectionner plusieurs \u00e9l\u00e9ments HTML \u00e0 la fois ( querySelectorAll , getElementsByClassName ) Associer un \u00e9l\u00e9ment HTML \u00e0 un \u00e9v\u00e9nement en Javascript ( addEventListener ) Ajouter et enlever une classe d'un \u00e9l\u00e9ment HTML( classList.Add() et classList.Remove() ) Utilisation de l'\u00e9l\u00e9ment this","title":"notions \u00e0 utiliser"},{"location":"exercices/ex16_musical/ex16_enonce/#pseudo-code","text":"","title":"Pseudo-code"},{"location":"exercices/ex16_musical/ex16_enonce/#html","text":"Cr\u00e9er une div pour chaque case et lui donner un attribut personnalis\u00e9 avec la valeur du code de la touche \u00e0 appuy\u00e9. Ex 65 pour la touche a. Pour conna\u00eetre facilement le code des touches : https://www.toptal.com/developers/keycode/for/a Pour chaque case, ajoutez aussi une balise audio avec le m\u00eame attribut personnalis\u00e9 ainsi que le fichier son. <div data-key=\"65\" class=\"key\"> <kbd>A</kbd> <!-- La balise kbd indique qu'on s'attend \u00e0 ce que l'usager entre cette touche c'est purement s\u00e9mantique, ce n'est pas \u00e7a qui va faire que la touche est reconnnue, on va tout faire en js --> <span>clap</span> </div> ... <audio src=\"assets/sounds/boom.wav\" data-key=\"65\"></audio>","title":"HTML"},{"location":"exercices/ex16_musical/ex16_enonce/#css","text":"Faire la disposition et la mise en forme des cases Cr\u00e9er une classe qui va faire l'animation de la case. (Un peu comme on le faisait avec :hover mais \u00e7a va \u00eatre dans un classe \u00e0 part) .key { /* ... */ transition: all 70ms ease; } /* au lieu d'utiliser .key:hover on fait une autre classe qu'on va ajouter ou supprimer \u00e0 la div qui a la classe key. */ .selection { transform: scale(1.2); border-color: orange; box-shadow: 0 0 10px orange; border-radius: 5px; }","title":"CSS"},{"location":"exercices/ex16_musical/ex16_enonce/#js","text":"R\u00e9cup\u00e9rer toutes les cases dans une variable globale. Associer les \u00e9v\u00e9nements click et transitionend \u00e0 toutes ces cases (utiliser une boucle forEach ) Associer l'\u00e9v\u00e9nement keydown \u00e0 l'\u00e9l\u00e9ment window pour capter les touches appuy\u00e9es window.addEventListener('keydown', maFonction); Faire une fonction qui va recevoir en param\u00e8tre le code de la touche. 1. R\u00e9cup\u00e9rer dans des variables la balise audio associ\u00e9 \u00e0 la touche ainsi que la case de la note 2. Tester si la balise existe, sinon sortie de la fonction 3. Jouer le fichier son 4. Ajouter la classe qui va faire l'animation Faire une fonction qui va \u00eatre utilis\u00e9e par l'\u00e9v\u00e9nement click de la case, qui va r\u00e9cup\u00e9rer l'attribut personnalis\u00e9 de la case et qui va appeler la fonction qui joue le son avec la valeur de l'attribut en param\u00e8tre. Faire une fonction qui va \u00eatre utilis\u00e9 par l'\u00e9v\u00e9nement keydown de window, qui va r\u00e9cup\u00e9rer le code de la touche press\u00e9 par l'objet e et qui va appeler la fonction qui joue le son avec le code de la touche en param\u00e8tre. (voir code dans la section aide) Faire une fonction qui va \u00eatre utilis\u00e9e par l'\u00e9v\u00e9nement transitionend de la case et qui va retirer la classe qui fait l'animation. function boutonJoue() { /* La fonction boutonJoue() a \u00e9t\u00e9 lanc\u00e9 quand on a cliqu\u00e9 sur la case de la note, ici this va \u00eatre \u00e9gale \u00e0 cette case. Je peux donc acc\u00e9der \u00e0 ses attributs de cette fa\u00e7on. La fonction joueSon sera lanc\u00e9 avec en param\u00e8tre la valeur de l'attribut data- key de la case note */ joueSon(this.getAttribute(\"data-key\")); } function toucheJoue(e) { /* Quand on lance une fonction depuis un \u00e9v\u00e9nement, on a acc\u00e8s \u00e0 l'objet e qui repr\u00e9sente l'\u00e9v\u00e9nement en soit. Cette objet \u00e0 plusieurs propri\u00e9t\u00e9s qui varies selont l'\u00e9v\u00e9nement. Ici, puisque qu'on r\u00e9agit \u00e0 l'\u00e9v\u00e9nement keydown on a acc\u00e8s \u00e0 la propri\u00e9t\u00e9 keyCode qui nous donne le code de la cl\u00e9 press\u00e9e. */ joueSon(e.keyCode); }","title":"JS"},{"location":"exercices/ex16_musical/ex16_enonce/#aide","text":"Pour faire jouer un \u00e9l\u00e9ment audio, r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment HTML dans une variable, ensuite // Red\u00e9marre l'enregistrement monElement.currentTime = 0; // Lance l'enregistrement monElement.play(); Associer un \u00e9v\u00e9nement \u00e0 un \u00e9l\u00e9ment HTML // Associe l'\u00e9v\u00e9nement keydown \u00e0 l'\u00e9l\u00e9ment window et lance la fonction toucheJoue // quand il est d\u00e9clench\u00e9 window.addEventListener('keydown', toucheJoue); // keys est un tableau d'\u00e9l\u00e9ment html, voici une fa\u00e7on d'associer chaque \u00e9l\u00e9ment // du tableau \u00e0 un \u00e9v\u00e9nement keys.forEach(function(key){ key.addEventListener('click',boutonJoue) }) // La m\u00eame chose mais avec une fonction fl\u00e9ch\u00e9e keys.forEach( key => key.addEventListener('click', boutonJoue)) R\u00e9cup\u00e9rer le code de la touche qui a \u00e9t\u00e9 press\u00e9 function afficheTouchePress(e) { // La variable e est un objet qui r\u00e9pr\u00e9sente l'\u00e9v\u00e9nement et qui // contient plusieur propri\u00e9t\u00e9 dont keyCode dans le cas pr\u00e9sent. console.log(e.keyCode); } window.addEventListener('keydown', afficheTouchePress);","title":"Aide"},{"location":"exercices/ex16_musical/ex16_enonce/#version-finale","text":"Vous pouvez consulter ma version du drumkit ici Vous pouvez consulter ma version du piano ici T\u00e9l\u00e9chargement","title":"Version finale"},{"location":"exercices/ex17_portfolio/ex17_enonce/","text":"Exercice 17 - Portfolio Dans cet exercice vous allez vous cr\u00e9er un site portfolio, une vitrine qui vous pr\u00e9sente comme d\u00e9veloppeur. Le style et la mise en page est enti\u00e8rement \u00e0 votre discr\u00e9tion. Cependant je m'attends \u00e0 ce que votre portfolio ait un allure professionnel. Une question \u00e0 se poser en faisant votre site : \"Est-ce qu'en voyant ce portfolio j'engagerais cette personne pour un projet?\". Votre portfolio devra comporter les 4 sections suivants : une page d'accueil, une section \"\u00c0 propos\", une section de vos r\u00e9alisations et une section contact. Les sections peuvent \u00eatre des pages diff\u00e9rentes de la pas d'accueil ou bien tout peut \u00eatre dans la m\u00eame page, \u00e0 vous de voir. Finalement votre site devra \u00eatre accessible en ligne. Pour votre site vous pouvez d\u00e9cider de le faire vous m\u00eame de A \u00e0 Z ou bien de partir d'une maquette d\u00e9j\u00e0 existante. (voir la section maquette plus bas). Remise La remise se fera via un devoir dans Teams. Je vais avoir besoin de l'url de votre site et d'un acc\u00e8s \u00e0 votre d\u00e9p\u00f4t Github. La date limite pour la remise est vendredi le 25 novembre \u00e0 23:59. Aucune remise tardive ne sera accept\u00e9e. Directives Mise en ligne et accessibilit\u00e9 Votre portfolio doit \u00eatre accessible en ligne. Vous devez aussi en avoir une copie \u00e0 jour sur Github. Page d'accueil Le premier contact du visiteur avec votre portfolio, il faut que \u00e7a soit attirant, qu'on aie le go\u00fbt d'aller voir plus loin. Section \u00c0 propos Dans cette section parlez un peu de vous, de qui vous \u00eates, de ce que vous aimez, de ce qui vous rend unique. Section R\u00e9alisations Dans cette section, affichez les projets dont vous \u00eates les plus fiers. \u00c7a peut \u00eatre sous la forme de captures d'\u00e9cran, d'extrait de code, de lien vers un d\u00e9p\u00f4t Github. Vous n'\u00eates pas oblig\u00e9 de pr\u00e9senter des projets du cours de Design Web, \u00e7a pourrait aussi \u00eatre des projets d'autres cours ou m\u00eame des projets personnels. Section contact Il doit y avoir une fa\u00e7on de vous envoyer un courriel. (Un lien hypertexte avec un url mailto:, un formulaire, etc.) Ajoutez aussi au minimum un lien vers un de vos r\u00e9seau sociaux (LinkedIn, Github, etc...) Maquette Il existe plusieurs sites qui offrent une banque de maquette \u00e0 t\u00e9l\u00e9charger gratuitement. Une simple recherche Google va vous permettre d'en trouver facilement. Sur la plupart de ces sites, on peut aussi voir un d\u00e9mo de la maquette avant de la t\u00e9l\u00e9charger. Bref trouvez une maquette qui vous convient et t\u00e9l\u00e9chargez l\u00e0. Liens https://html5up.net/ https://nicepage.com/fr/modeles-html https://www.free-css.com/free-css-templates https://templatemo.com/ Pour vous inspirer https://webflow.com/blog/web-design-portfolios https://www.shopify.com/partners/blog/web-design-portfolio-inspiration https://www.godaddy.com/garage/web-design-portfolios/ https://www.webfx.com/blog/web-design/simple-portfolio-websites-inspiration/ Grille d'\u00e9valuation Point Excellent (2 points) Minimal (1 point) Insuffisant (0 point) Mise en ligne Le site est en ligne et sur Github Le site est seulement en ligne ou sur Github Le site n'est pas en ligne ni sur Github Accueil Une page d'accueil personnalis\u00e9e est pr\u00e9sente La page n'est pas personnalis\u00e9e Aucune page d'accueil n'est pr\u00e9sente \u00c0 propos Une section \"\u00c0 propos\" personnalis\u00e9e est pr\u00e9sente La section n'est pas personnalis\u00e9e Aucune section \"\u00c0 propos\" R\u00e9alisations Une section \"R\u00e9alisations\" est pr\u00e9sente avec au moins un projet La section n'est pas personnalis\u00e9e Aucune section \"R\u00e9alisations\" Contact Une section \"Contact\" est pr\u00e9sente avec la possibilit\u00e9 d'envoyer un courriel et de cliquer sur un lien vers un compte de m\u00e9dias sociaux La section n'est pas personnalis\u00e9e Aucune section \"Contact\" 10 points","title":"Exercice 17 - Portfolio 2.0"},{"location":"exercices/ex17_portfolio/ex17_enonce/#exercice-17-portfolio","text":"Dans cet exercice vous allez vous cr\u00e9er un site portfolio, une vitrine qui vous pr\u00e9sente comme d\u00e9veloppeur. Le style et la mise en page est enti\u00e8rement \u00e0 votre discr\u00e9tion. Cependant je m'attends \u00e0 ce que votre portfolio ait un allure professionnel. Une question \u00e0 se poser en faisant votre site : \"Est-ce qu'en voyant ce portfolio j'engagerais cette personne pour un projet?\". Votre portfolio devra comporter les 4 sections suivants : une page d'accueil, une section \"\u00c0 propos\", une section de vos r\u00e9alisations et une section contact. Les sections peuvent \u00eatre des pages diff\u00e9rentes de la pas d'accueil ou bien tout peut \u00eatre dans la m\u00eame page, \u00e0 vous de voir. Finalement votre site devra \u00eatre accessible en ligne. Pour votre site vous pouvez d\u00e9cider de le faire vous m\u00eame de A \u00e0 Z ou bien de partir d'une maquette d\u00e9j\u00e0 existante. (voir la section maquette plus bas).","title":"Exercice 17 - Portfolio"},{"location":"exercices/ex17_portfolio/ex17_enonce/#remise","text":"La remise se fera via un devoir dans Teams. Je vais avoir besoin de l'url de votre site et d'un acc\u00e8s \u00e0 votre d\u00e9p\u00f4t Github. La date limite pour la remise est vendredi le 25 novembre \u00e0 23:59. Aucune remise tardive ne sera accept\u00e9e.","title":"Remise"},{"location":"exercices/ex17_portfolio/ex17_enonce/#directives","text":"","title":"Directives"},{"location":"exercices/ex17_portfolio/ex17_enonce/#mise-en-ligne-et-accessibilite","text":"Votre portfolio doit \u00eatre accessible en ligne. Vous devez aussi en avoir une copie \u00e0 jour sur Github.","title":"Mise en ligne et accessibilit\u00e9"},{"location":"exercices/ex17_portfolio/ex17_enonce/#page-daccueil","text":"Le premier contact du visiteur avec votre portfolio, il faut que \u00e7a soit attirant, qu'on aie le go\u00fbt d'aller voir plus loin.","title":"Page d'accueil"},{"location":"exercices/ex17_portfolio/ex17_enonce/#section-a-propos","text":"Dans cette section parlez un peu de vous, de qui vous \u00eates, de ce que vous aimez, de ce qui vous rend unique.","title":"Section \u00c0 propos"},{"location":"exercices/ex17_portfolio/ex17_enonce/#section-realisations","text":"Dans cette section, affichez les projets dont vous \u00eates les plus fiers. \u00c7a peut \u00eatre sous la forme de captures d'\u00e9cran, d'extrait de code, de lien vers un d\u00e9p\u00f4t Github. Vous n'\u00eates pas oblig\u00e9 de pr\u00e9senter des projets du cours de Design Web, \u00e7a pourrait aussi \u00eatre des projets d'autres cours ou m\u00eame des projets personnels.","title":"Section R\u00e9alisations"},{"location":"exercices/ex17_portfolio/ex17_enonce/#section-contact","text":"Il doit y avoir une fa\u00e7on de vous envoyer un courriel. (Un lien hypertexte avec un url mailto:, un formulaire, etc.) Ajoutez aussi au minimum un lien vers un de vos r\u00e9seau sociaux (LinkedIn, Github, etc...)","title":"Section contact"},{"location":"exercices/ex17_portfolio/ex17_enonce/#maquette","text":"Il existe plusieurs sites qui offrent une banque de maquette \u00e0 t\u00e9l\u00e9charger gratuitement. Une simple recherche Google va vous permettre d'en trouver facilement. Sur la plupart de ces sites, on peut aussi voir un d\u00e9mo de la maquette avant de la t\u00e9l\u00e9charger. Bref trouvez une maquette qui vous convient et t\u00e9l\u00e9chargez l\u00e0.","title":"Maquette"},{"location":"exercices/ex17_portfolio/ex17_enonce/#liens","text":"https://html5up.net/ https://nicepage.com/fr/modeles-html https://www.free-css.com/free-css-templates https://templatemo.com/","title":"Liens"},{"location":"exercices/ex17_portfolio/ex17_enonce/#pour-vous-inspirer","text":"https://webflow.com/blog/web-design-portfolios https://www.shopify.com/partners/blog/web-design-portfolio-inspiration https://www.godaddy.com/garage/web-design-portfolios/ https://www.webfx.com/blog/web-design/simple-portfolio-websites-inspiration/","title":"Pour vous inspirer"},{"location":"exercices/ex17_portfolio/ex17_enonce/#grille-devaluation","text":"Point Excellent (2 points) Minimal (1 point) Insuffisant (0 point) Mise en ligne Le site est en ligne et sur Github Le site est seulement en ligne ou sur Github Le site n'est pas en ligne ni sur Github Accueil Une page d'accueil personnalis\u00e9e est pr\u00e9sente La page n'est pas personnalis\u00e9e Aucune page d'accueil n'est pr\u00e9sente \u00c0 propos Une section \"\u00c0 propos\" personnalis\u00e9e est pr\u00e9sente La section n'est pas personnalis\u00e9e Aucune section \"\u00c0 propos\" R\u00e9alisations Une section \"R\u00e9alisations\" est pr\u00e9sente avec au moins un projet La section n'est pas personnalis\u00e9e Aucune section \"R\u00e9alisations\" Contact Une section \"Contact\" est pr\u00e9sente avec la possibilit\u00e9 d'envoyer un courriel et de cliquer sur un lien vers un compte de m\u00e9dias sociaux La section n'est pas personnalis\u00e9e Aucune section \"Contact\" 10 points","title":"Grille d'\u00e9valuation"},{"location":"exercices/ex18_flexbox/ex18_enonce/","text":"Exercice 18 - Flexbox Cheatsheet Dans cette exercice on va reproduire la mise en page et la disposition de la section justify-content du site suivant : https://yoksel.github.io/flex-cheatsheet/#section-justify-content Quand on clique sur un des boutons sous le ligne hypertexte, la valeur de la propri\u00e9t\u00e9 justify-content va se modifier selon le bouton. Vous pouvez modifier le style d'un \u00e9l\u00e9ment HTML en Javascript avec la propri\u00e9t\u00e9 style associ\u00e9 \u00e0 l'\u00e9l\u00e9ment et suivi de la propri\u00e9t\u00e9 css \u00e0 modifier. let maDiv = document.querySelector(\".madiv\"); maDiv.style.justifyContent = \"center\"; Quand on va cliquer sur le bouton Ajouter un item , on va ajouter un item dans la boite \"r\u00e9sultat\" \u00e0 la suite des autres. S\u00e9lectionnez l'\u00e9l\u00e9ment dans lequel vous voulez ajouter l'item, ensuite cr\u00e9er le avec document.createElement() et associez-lui la m\u00eame classe que les autres items qui s'occupe du formatage. Ensuite ajouter l'\u00e9l\u00e9ment cr\u00e9\u00e9 dans l'\u00e9l\u00e9ment que vous avez s\u00e9lectionn\u00e9 auparavant avec append() . // madiv est la division qui contient les items let maDiv = document.querySelector(\".madiv\"); // les items sont des divs, alors j'en cr\u00e9e une let newItem = document.createElement(\"div\"); // J'ajoute \u00e0 cet nouvel item ma classe qui fait le formatage des items newItem.classList.add(\"item\"); // J'ajoute l'item \u00e0 la suite des autres maDiv.append(newItem); Essayez ensuite d'inscrire dans l'item ajout\u00e9 le nombre du dernier item avant l'ajout+ 1 (ex dans l'image plus haut si on ajoute un item il portera le texte 5). Une id\u00e9e pour le faire, allez chercher le dernier item dans la div, il y a un s\u00e9lecteur css pour le faire. Ensuite allez chercher le texte de cet item, convertissez le en int avec parseInt et additionnez 1. Modifier finalement le texte de nouvel item avec cette valeur. // lastItem est le dernier item de la div et newItem est l'item qu'on vient de cr\u00e9er newItem.innerHTML = parseInt(lastItem.innerHTML) + 1; Quand on clique sur un item, supprimez le du dom avec la fonction remove() . Vous devrez ajouter un \u00e9v\u00e9nement \u00e0 tous les items qui appelle une fonction quand on clique sur eux. Vous devrez aussi ajouter ce m\u00eame \u00e9v\u00e9nement lors de la cr\u00e9ation d'un nouvel item. // S\u00e9lection de tous les items par d\u00e9faut let listeItems = document.querySelectorAll('.item'); // Lie l'\u00e9v\u00e9nement clique d'un item \u00e0 la fonction supprimeItem listeItems.forEach(item => { item.addEventListener('click', supprimeItem) }); function supprimeItem(e) { // e.target repr\u00e9sente l'\u00e9l\u00e9ment qui a lanc\u00e9 l'\u00e9v\u00e9nement e.target.remove(); } Version finale Vous pouvez consulter ma version de l'exercice ici T\u00e9l\u00e9chargement","title":"Exercice 18 - Flexbox Cheatsheet"},{"location":"exercices/ex18_flexbox/ex18_enonce/#exercice-18-flexbox-cheatsheet","text":"Dans cette exercice on va reproduire la mise en page et la disposition de la section justify-content du site suivant : https://yoksel.github.io/flex-cheatsheet/#section-justify-content Quand on clique sur un des boutons sous le ligne hypertexte, la valeur de la propri\u00e9t\u00e9 justify-content va se modifier selon le bouton. Vous pouvez modifier le style d'un \u00e9l\u00e9ment HTML en Javascript avec la propri\u00e9t\u00e9 style associ\u00e9 \u00e0 l'\u00e9l\u00e9ment et suivi de la propri\u00e9t\u00e9 css \u00e0 modifier. let maDiv = document.querySelector(\".madiv\"); maDiv.style.justifyContent = \"center\"; Quand on va cliquer sur le bouton Ajouter un item , on va ajouter un item dans la boite \"r\u00e9sultat\" \u00e0 la suite des autres. S\u00e9lectionnez l'\u00e9l\u00e9ment dans lequel vous voulez ajouter l'item, ensuite cr\u00e9er le avec document.createElement() et associez-lui la m\u00eame classe que les autres items qui s'occupe du formatage. Ensuite ajouter l'\u00e9l\u00e9ment cr\u00e9\u00e9 dans l'\u00e9l\u00e9ment que vous avez s\u00e9lectionn\u00e9 auparavant avec append() . // madiv est la division qui contient les items let maDiv = document.querySelector(\".madiv\"); // les items sont des divs, alors j'en cr\u00e9e une let newItem = document.createElement(\"div\"); // J'ajoute \u00e0 cet nouvel item ma classe qui fait le formatage des items newItem.classList.add(\"item\"); // J'ajoute l'item \u00e0 la suite des autres maDiv.append(newItem); Essayez ensuite d'inscrire dans l'item ajout\u00e9 le nombre du dernier item avant l'ajout+ 1 (ex dans l'image plus haut si on ajoute un item il portera le texte 5). Une id\u00e9e pour le faire, allez chercher le dernier item dans la div, il y a un s\u00e9lecteur css pour le faire. Ensuite allez chercher le texte de cet item, convertissez le en int avec parseInt et additionnez 1. Modifier finalement le texte de nouvel item avec cette valeur. // lastItem est le dernier item de la div et newItem est l'item qu'on vient de cr\u00e9er newItem.innerHTML = parseInt(lastItem.innerHTML) + 1; Quand on clique sur un item, supprimez le du dom avec la fonction remove() . Vous devrez ajouter un \u00e9v\u00e9nement \u00e0 tous les items qui appelle une fonction quand on clique sur eux. Vous devrez aussi ajouter ce m\u00eame \u00e9v\u00e9nement lors de la cr\u00e9ation d'un nouvel item. // S\u00e9lection de tous les items par d\u00e9faut let listeItems = document.querySelectorAll('.item'); // Lie l'\u00e9v\u00e9nement clique d'un item \u00e0 la fonction supprimeItem listeItems.forEach(item => { item.addEventListener('click', supprimeItem) }); function supprimeItem(e) { // e.target repr\u00e9sente l'\u00e9l\u00e9ment qui a lanc\u00e9 l'\u00e9v\u00e9nement e.target.remove(); }","title":"Exercice 18 - Flexbox Cheatsheet"},{"location":"exercices/ex18_flexbox/ex18_enonce/#version-finale","text":"Vous pouvez consulter ma version de l'exercice ici T\u00e9l\u00e9chargement","title":"Version finale"},{"location":"exercices/ex19_todolist/ex19_enonce/","text":"Exercice 19 - Liste de t\u00e2ches Dans cet exercice nous allons coder les fonctionnalit\u00e9s d'une liste de t\u00e2ches. La portion HTML et CSS est d\u00e9j\u00e0 fait, vous n'avez qu'\u00e0 cloner le d\u00e9p\u00f4t git disponible \u00e0 l'adresse Github Classroom que je vais vous fournir. Une fois le d\u00e9p\u00f4t r\u00e9cup\u00e9r\u00e9 vous devriez avoir une page qui ressemble \u00e0 ceci. Voici les fonctionnalit\u00e9s \u00e0 programmer : Quand on appuie sur la touche \"Entr\u00e9e\" ou si l'on clique sur le bouton \"+\", on ajoute le texte saisie dans la section \"T\u00e2ches \u00e0 faire\". S'il n'y a pas de texte on ajoute rien. Dans la section \"T\u00e2che \u00e0 faire\" il y a une balise ul vide (une liste \u00e0 puce). Le texte ajout\u00e9 sera dans une balise li \u00e0 l'int\u00e9rieur de la balise ul . Vous devez ajouter la classe \"tache\" au nouvel item. Quand on clique sur une t\u00e2che de la liste des t\u00e2ches \u00e0 faire, on le d\u00e9place dans la liste des t\u00e2ches compl\u00e9t\u00e9es. On lui ajoute aussi la classe \"fait\". Pour d\u00e9placer la tache d'une liste \u00e0 l'autre, on n'a juste \u00e0 r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment dans une variable et ensuite de l'ajouter dans la bonne liste. Quand on clique sur l'ic\u00f4ne de la poubelle, on doit supprimer toutes les t\u00e2ches de la liste des t\u00e2ches compl\u00e9t\u00e9es. Une fois l'exercice termin\u00e9, faites un commit de vos modifications et un push pour les envoyer sur Github. Voici un exemple du r\u00e9sultat final","title":"Exercice 19 - Liste de t\u00e2ches"},{"location":"exercices/ex19_todolist/ex19_enonce/#exercice-19-liste-de-taches","text":"Dans cet exercice nous allons coder les fonctionnalit\u00e9s d'une liste de t\u00e2ches. La portion HTML et CSS est d\u00e9j\u00e0 fait, vous n'avez qu'\u00e0 cloner le d\u00e9p\u00f4t git disponible \u00e0 l'adresse Github Classroom que je vais vous fournir. Une fois le d\u00e9p\u00f4t r\u00e9cup\u00e9r\u00e9 vous devriez avoir une page qui ressemble \u00e0 ceci. Voici les fonctionnalit\u00e9s \u00e0 programmer : Quand on appuie sur la touche \"Entr\u00e9e\" ou si l'on clique sur le bouton \"+\", on ajoute le texte saisie dans la section \"T\u00e2ches \u00e0 faire\". S'il n'y a pas de texte on ajoute rien. Dans la section \"T\u00e2che \u00e0 faire\" il y a une balise ul vide (une liste \u00e0 puce). Le texte ajout\u00e9 sera dans une balise li \u00e0 l'int\u00e9rieur de la balise ul . Vous devez ajouter la classe \"tache\" au nouvel item. Quand on clique sur une t\u00e2che de la liste des t\u00e2ches \u00e0 faire, on le d\u00e9place dans la liste des t\u00e2ches compl\u00e9t\u00e9es. On lui ajoute aussi la classe \"fait\". Pour d\u00e9placer la tache d'une liste \u00e0 l'autre, on n'a juste \u00e0 r\u00e9cup\u00e9rer l'\u00e9l\u00e9ment dans une variable et ensuite de l'ajouter dans la bonne liste. Quand on clique sur l'ic\u00f4ne de la poubelle, on doit supprimer toutes les t\u00e2ches de la liste des t\u00e2ches compl\u00e9t\u00e9es. Une fois l'exercice termin\u00e9, faites un commit de vos modifications et un push pour les envoyer sur Github. Voici un exemple du r\u00e9sultat final","title":"Exercice 19 - Liste de t\u00e2ches"},{"location":"notes_de_cours/css_animation/","text":"Animation CSS Il est possible de rendre nos sites web un peu plus attrayant en ajoutant de l'animation en css. On va utiliser deux propri\u00e9t\u00e9s qui travaille main dans la main : la transition et la transformation . La transition La transition s'occupe de cr\u00e9er une animation fluide durant la transformation. Sans transition, les effets de la transformation seraient imm\u00e9diat. On utilise souvent la transition et la transformation conjointement, mais elle peut aussi \u00eatre utilis\u00e9 seule. Par exemple on veut changer la couleur d'un bouton quand on le survole avec la souris (:hover). Appliquer une transition va rendre le changement de couleur plus fluide, en effectuant un d\u00e9grad\u00e9 d'une couleur vers l'autre. On peut appliquer les propri\u00e9t\u00e9s suivantes \u00e0 la transition : transition-property (requise) transition-duration (requise) transition-timing transition-delay Il existe aussi une propri\u00e9t\u00e9 \"raccourci\" qui englobe ces 4 propri\u00e9t\u00e9s, transition. .bouton { transition: [property] [duration] [timing-function] [delay]; } Transition-property Permet de sp\u00e9cifier sur quelle propri\u00e9t\u00e9 css la transition va \u00eatre appliqu\u00e9. On peut utilser la valeur all pour appliquer la transition sur toutes les propri\u00e9t\u00e9s. .bouton { /* On applique la transition sur toutes les propri\u00e9t\u00e9s */ transition-property: all; /* Ici elle sera appliqu\u00e9 uniquement sur le changement de couleur de fond */ transition-property: background-color; } ### Transition-duration On d\u00e9fini avec transition-duration la dur\u00e9e de la transition. Elle peut \u00eatre exprim\u00e9 en millisecondes ou en secondes. .bouton { transition-duration: 700ms; } Transition-timing-function Permet de d\u00e9finir la vitesse de la transition par rapport \u00e0 sa dur\u00e9e. Par d\u00e9faut la valeur est ease : la transition d\u00e9bute tranquillement, acc\u00e9l\u00e8re et ralenti vers la fin. Il y a plusieurs valeurs possible, je vous laisse les explorer. Mais \u00e0 moins de besoin pr\u00e9cis, habituellement on laisse la valeur par d\u00e9faut. .bouton { /* La transition va aller en s'acc\u00e9l\u00e9rant */ transition-timing-function: ease-in; } Vous pouvez voir les diff\u00e9rentes m\u00e9thodes en action sur ce site : https://cssreference.io/property/transition-timing-function/ Transition-delay Permet de retarder le d\u00e9but de la transition. La valeur peut \u00eatre exprim\u00e9 en millisecondes ou en secondes. .bouton { /* La transition va commencer apr\u00e8s 1 seconde */ transition-delay: 1s; } La transformation On peut transformer nos \u00e9l\u00e9ments facilement avec la propri\u00e9t\u00e9 css transform . Les quatres transformations possibles sont la rotation, le d\u00e9placement, la d\u00e9formation et l'agrandissement/diminution, respectivement rotate, translate, skew, scale. Rotate Effectue une rotation de l'\u00e9l\u00e9ment en sp\u00e9cifiant une valeur en degr\u00e9. La valeur peut \u00eatre positive pour une rotation dans le sens horaire ou n\u00e9gative pour un sens anti-horaire. .bouton:hover { /* Effectue un tour sur lui-m\u00eame dans le sens horaire */ transform: rotate(360deg); /* Effectue un tour sur lui-m\u00eame dans le sens anti-horaire */ transform: rotate(-360deg); } Translate D\u00e9place l'\u00e9l\u00e9ment selon une valeur sur l'axe des x et l'axe des y. Une valeur positive \u00e0 x d\u00e9place l'\u00e9l\u00e9ment vers la droite et vers la gauche pour une valeur n\u00e9gative. Une valeur n\u00e9gative \u00e0 l'axe des y d\u00e9place l'\u00e9l\u00e9ment vers le haut et vers le bas pour une valeur positive. On peut utiliser les propri\u00e9t\u00e9s suivantes pour effectuer la translation. translateX(valeurX) translateY(valeurY) translate(valeurX, ValeurY) La valeur peut \u00eatre exprim\u00e9 en pixels ou bien en poucentage. Quand elle est en pourcentage, elle repr\u00e9sente le poucentage de la taille de l'\u00e9l\u00e9ment. Ex si mon bouton \u00e0 une largeur de 600 pixels et que je lui donne 50% comme valeur de x, le bouton sera d\u00e9plac\u00e9 de 300 pixels vers la droite sur l'axe des x. .bouton:hover { /* Le bouton sera d\u00e9plac\u00e9 de 400 pixels vers la droite */ transform: translateX(400px); /* Le bouton sera d\u00e9plac\u00e9 de 1 fois et demi sa hauteur vers le haut */ transform: translateY(-150%); /* Le r\u00e9sultat sera le m\u00eame que les deux lignes pr\u00e9c\u00e9dentes */ transform: translate(400px, -150%); } Scale On peut avec scale aggrandir ou diminuer un \u00e9l\u00e9ment. La valeur est un poucentage exprim\u00e9 par un nombre d\u00e9cimal positif, 1 \u00e9tant la taille actuelle de l'\u00e9l\u00e9ment. Donc les valeurs de 0 \u00e0 0.99 diminueront l'\u00e9l\u00e9ment alors que les valeurs sup\u00e9rieures \u00e0 1 l'augmenteront. On peut utiliser les propri\u00e9t\u00e9s suivantes : scaleX(valeurX) scaleY(valeurY) scale(valeurXY) scale(valeurX, valeurY) .bouton:hover { /* \u00c9largis de 2x horizontalement */ transform: scaleX(2); /* \u00c9largis de 2x verticalement */ transform: scaleY(2); /* \u00c9largis de 2x horizontalement et verticalement */ transform: scale(2); /* \u00c9largis de 2x horizontalement et verticalement */ transform: scale(2,2); } Skew La propri\u00e9t\u00e9 skew sert \u00e0 incliner l'\u00e9l\u00e9ment selon l'axe des x et des y. Tout comme rotate et translate, une valeur n\u00e9gatif d\u00e9place \u00e0 gauche pour les x ou en haut pour les y, alors qu'une valeur positive inclinera \u00e0 droite pour les x et en bas pour les y. On peut utiliser les propri\u00e9t\u00e9s suivantes : skewX(valeurX) skewY(valeurY) skew(valeurX, valeurY) .bouton:hover { /* Incline de 25 degr\u00e9es vers la gauche */ transform: skewX(-25deg); /* Incline de 25 degr\u00e9es vers le bas */ transform: skewY(25deg); /* Incline de 25 degr\u00e9es vers la droite */ transform: skew(25deg,0); } Transform-origin Par d\u00e9faut, la transformation de l'\u00e9l\u00e9ment s'effectue \u00e0 partir du centre de celui-ci. On peut modifier ce comportement avec la propri\u00e9t\u00e9 transform-origin. On donne deux valeurs \u00e0 la propri\u00e9t\u00e9, la position de l'origine sur l'axe des x et sur l'axe des y. On peut exprim\u00e9 les valeurs en pourcentage, qui repr\u00e9sente la dimension de l'\u00e9l\u00e9ment (0% correspond \u00e0 l'extr\u00e8me gauche alors que 100% la droite de l'\u00e9l\u00e9ment). On peut aussi utiliser les mots-cl\u00e9s left, right, top, bottom, center. Sinon les autres unit\u00e9s de mesure CSS sont accept\u00e9s. Cette propri\u00e9t\u00e9 doit \u00eatre d\u00e9finie au m\u00eame niveau que la transition. .bouton { transform-origin: left bottom; /* Cette ligne est \u00e9gale \u00e0 la pr\u00e9c\u00e9dente*/ transform-origin: 0% 100%; transition: all 1s; } Des animations plus \u00e9volu\u00e9es avec @keyframes Avec la commande @keyframe ont peut aller beaucoup plus loin qu'avec transform. @keyframe nous permet en effet de s\u00e9parer notre animation en plusieurs \u00e9tapes. En fait, on peut voir l'animation fait avec @keyframe comme une suite de transformation. La premi\u00e8re \u00e9tape est de d\u00e9finir l'animation en soit avec @keyframe. Ensuite on va ajouter les \"\u00e9tapes\" de notre animation, les tranformations \u00e0 faire. Celle-ci son compos\u00e9 d'une ou plusieurs r\u00eagles css. Pour chaque \u00e9tape on doit aussi d\u00e9finir un pourcentage qui indique \u00e0 qu'elle moment durant l'animation l'\u00e9tape s'enclenche. (La dur\u00e9e de l'animation sera d\u00e9clar\u00e9 plus loin) La syntaxe est la suivante : @keyframes nom_animation { 0% { /* R\u00e8gle de l'\u00e9tape 1 */ } 50% { /* R\u00e8gle de l'\u00e9tape 2 */ } 100% { /* R\u00e8gle de l'\u00e9tape 3 */ } } Voici un exemple qui va modifier la couleur de fond, en partant du cyan on va jusqu'\u00e0 mi-chemin aller vers le jaune pour ensuite glisser vers le orange. @keyframes color_change { 0% { background-color: cyan; } 50% { background-color: yellow; } 100% { background-color: orange; } } Ensuite on va \"lancer\" notre animation en l'associant \u00e0 un s\u00e9lecteur css. L'animation sera d\u00e9clench\u00e9e automatiquement au chargement de la page, \u00e0 moins d'utiliser le s\u00e9lecteur :hover qui se fera lors du survol de la souris sur l'\u00e9l\u00e9ment. La propri\u00e9t\u00e9 \u00e0 utiliser est animation , un \"raccourci\" qui englobe 8 autres propri\u00e9t\u00e9es : animation-delay animation-direction animation-duration animation-fill-mode animation-iteration-count animation-name animation-play-state animation-timing-function On n'est pas oblig\u00e9 de d\u00e9finir une valeur pour toutes ces propri\u00e9t\u00e9s, elles en ont tous une par d\u00e9faut. Pour plus de d\u00e9tail sur ces propri\u00e9t\u00e9s : https://developer.mozilla.org/en-US/docs/Web/CSS/animation Au minimum on va d\u00e9finir le nom de l'animation, sa dur\u00e9e et le nombre r\u00e9p\u00e9tition : html { animation: nom_animation dur\u00e9e nombre_repetition; } Le nom de l'animation est celui d\u00e9fini dans le @keyframe, la dur\u00e9e est d\u00e9fini en secondes (s) ou en millisecondes (ms). Enfin la r\u00e9p\u00e9tition est un nombre qui peut \u00eatre fractionnaire. On peut aussi utiliser infinite pour r\u00e9p\u00e9ter l'animation \u00e0 l'infini. Pour aller plus loin avec les animations https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes https://css-tricks.com/snippets/css/keyframe-animation-syntax/","title":"Animation"},{"location":"notes_de_cours/css_animation/#animation-css","text":"Il est possible de rendre nos sites web un peu plus attrayant en ajoutant de l'animation en css. On va utiliser deux propri\u00e9t\u00e9s qui travaille main dans la main : la transition et la transformation .","title":"Animation CSS"},{"location":"notes_de_cours/css_animation/#la-transition","text":"La transition s'occupe de cr\u00e9er une animation fluide durant la transformation. Sans transition, les effets de la transformation seraient imm\u00e9diat. On utilise souvent la transition et la transformation conjointement, mais elle peut aussi \u00eatre utilis\u00e9 seule. Par exemple on veut changer la couleur d'un bouton quand on le survole avec la souris (:hover). Appliquer une transition va rendre le changement de couleur plus fluide, en effectuant un d\u00e9grad\u00e9 d'une couleur vers l'autre. On peut appliquer les propri\u00e9t\u00e9s suivantes \u00e0 la transition : transition-property (requise) transition-duration (requise) transition-timing transition-delay Il existe aussi une propri\u00e9t\u00e9 \"raccourci\" qui englobe ces 4 propri\u00e9t\u00e9s, transition. .bouton { transition: [property] [duration] [timing-function] [delay]; }","title":"La transition"},{"location":"notes_de_cours/css_animation/#transition-property","text":"Permet de sp\u00e9cifier sur quelle propri\u00e9t\u00e9 css la transition va \u00eatre appliqu\u00e9. On peut utilser la valeur all pour appliquer la transition sur toutes les propri\u00e9t\u00e9s. .bouton { /* On applique la transition sur toutes les propri\u00e9t\u00e9s */ transition-property: all; /* Ici elle sera appliqu\u00e9 uniquement sur le changement de couleur de fond */ transition-property: background-color; } ### Transition-duration On d\u00e9fini avec transition-duration la dur\u00e9e de la transition. Elle peut \u00eatre exprim\u00e9 en millisecondes ou en secondes. .bouton { transition-duration: 700ms; }","title":"Transition-property"},{"location":"notes_de_cours/css_animation/#transition-timing-function","text":"Permet de d\u00e9finir la vitesse de la transition par rapport \u00e0 sa dur\u00e9e. Par d\u00e9faut la valeur est ease : la transition d\u00e9bute tranquillement, acc\u00e9l\u00e8re et ralenti vers la fin. Il y a plusieurs valeurs possible, je vous laisse les explorer. Mais \u00e0 moins de besoin pr\u00e9cis, habituellement on laisse la valeur par d\u00e9faut. .bouton { /* La transition va aller en s'acc\u00e9l\u00e9rant */ transition-timing-function: ease-in; } Vous pouvez voir les diff\u00e9rentes m\u00e9thodes en action sur ce site : https://cssreference.io/property/transition-timing-function/","title":"Transition-timing-function"},{"location":"notes_de_cours/css_animation/#transition-delay","text":"Permet de retarder le d\u00e9but de la transition. La valeur peut \u00eatre exprim\u00e9 en millisecondes ou en secondes. .bouton { /* La transition va commencer apr\u00e8s 1 seconde */ transition-delay: 1s; }","title":"Transition-delay"},{"location":"notes_de_cours/css_animation/#la-transformation","text":"On peut transformer nos \u00e9l\u00e9ments facilement avec la propri\u00e9t\u00e9 css transform . Les quatres transformations possibles sont la rotation, le d\u00e9placement, la d\u00e9formation et l'agrandissement/diminution, respectivement rotate, translate, skew, scale.","title":"La transformation"},{"location":"notes_de_cours/css_animation/#rotate","text":"Effectue une rotation de l'\u00e9l\u00e9ment en sp\u00e9cifiant une valeur en degr\u00e9. La valeur peut \u00eatre positive pour une rotation dans le sens horaire ou n\u00e9gative pour un sens anti-horaire. .bouton:hover { /* Effectue un tour sur lui-m\u00eame dans le sens horaire */ transform: rotate(360deg); /* Effectue un tour sur lui-m\u00eame dans le sens anti-horaire */ transform: rotate(-360deg); }","title":"Rotate"},{"location":"notes_de_cours/css_animation/#translate","text":"D\u00e9place l'\u00e9l\u00e9ment selon une valeur sur l'axe des x et l'axe des y. Une valeur positive \u00e0 x d\u00e9place l'\u00e9l\u00e9ment vers la droite et vers la gauche pour une valeur n\u00e9gative. Une valeur n\u00e9gative \u00e0 l'axe des y d\u00e9place l'\u00e9l\u00e9ment vers le haut et vers le bas pour une valeur positive. On peut utiliser les propri\u00e9t\u00e9s suivantes pour effectuer la translation. translateX(valeurX) translateY(valeurY) translate(valeurX, ValeurY) La valeur peut \u00eatre exprim\u00e9 en pixels ou bien en poucentage. Quand elle est en pourcentage, elle repr\u00e9sente le poucentage de la taille de l'\u00e9l\u00e9ment. Ex si mon bouton \u00e0 une largeur de 600 pixels et que je lui donne 50% comme valeur de x, le bouton sera d\u00e9plac\u00e9 de 300 pixels vers la droite sur l'axe des x. .bouton:hover { /* Le bouton sera d\u00e9plac\u00e9 de 400 pixels vers la droite */ transform: translateX(400px); /* Le bouton sera d\u00e9plac\u00e9 de 1 fois et demi sa hauteur vers le haut */ transform: translateY(-150%); /* Le r\u00e9sultat sera le m\u00eame que les deux lignes pr\u00e9c\u00e9dentes */ transform: translate(400px, -150%); }","title":"Translate"},{"location":"notes_de_cours/css_animation/#scale","text":"On peut avec scale aggrandir ou diminuer un \u00e9l\u00e9ment. La valeur est un poucentage exprim\u00e9 par un nombre d\u00e9cimal positif, 1 \u00e9tant la taille actuelle de l'\u00e9l\u00e9ment. Donc les valeurs de 0 \u00e0 0.99 diminueront l'\u00e9l\u00e9ment alors que les valeurs sup\u00e9rieures \u00e0 1 l'augmenteront. On peut utiliser les propri\u00e9t\u00e9s suivantes : scaleX(valeurX) scaleY(valeurY) scale(valeurXY) scale(valeurX, valeurY) .bouton:hover { /* \u00c9largis de 2x horizontalement */ transform: scaleX(2); /* \u00c9largis de 2x verticalement */ transform: scaleY(2); /* \u00c9largis de 2x horizontalement et verticalement */ transform: scale(2); /* \u00c9largis de 2x horizontalement et verticalement */ transform: scale(2,2); }","title":"Scale"},{"location":"notes_de_cours/css_animation/#skew","text":"La propri\u00e9t\u00e9 skew sert \u00e0 incliner l'\u00e9l\u00e9ment selon l'axe des x et des y. Tout comme rotate et translate, une valeur n\u00e9gatif d\u00e9place \u00e0 gauche pour les x ou en haut pour les y, alors qu'une valeur positive inclinera \u00e0 droite pour les x et en bas pour les y. On peut utiliser les propri\u00e9t\u00e9s suivantes : skewX(valeurX) skewY(valeurY) skew(valeurX, valeurY) .bouton:hover { /* Incline de 25 degr\u00e9es vers la gauche */ transform: skewX(-25deg); /* Incline de 25 degr\u00e9es vers le bas */ transform: skewY(25deg); /* Incline de 25 degr\u00e9es vers la droite */ transform: skew(25deg,0); }","title":"Skew"},{"location":"notes_de_cours/css_animation/#transform-origin","text":"Par d\u00e9faut, la transformation de l'\u00e9l\u00e9ment s'effectue \u00e0 partir du centre de celui-ci. On peut modifier ce comportement avec la propri\u00e9t\u00e9 transform-origin. On donne deux valeurs \u00e0 la propri\u00e9t\u00e9, la position de l'origine sur l'axe des x et sur l'axe des y. On peut exprim\u00e9 les valeurs en pourcentage, qui repr\u00e9sente la dimension de l'\u00e9l\u00e9ment (0% correspond \u00e0 l'extr\u00e8me gauche alors que 100% la droite de l'\u00e9l\u00e9ment). On peut aussi utiliser les mots-cl\u00e9s left, right, top, bottom, center. Sinon les autres unit\u00e9s de mesure CSS sont accept\u00e9s. Cette propri\u00e9t\u00e9 doit \u00eatre d\u00e9finie au m\u00eame niveau que la transition. .bouton { transform-origin: left bottom; /* Cette ligne est \u00e9gale \u00e0 la pr\u00e9c\u00e9dente*/ transform-origin: 0% 100%; transition: all 1s; }","title":"Transform-origin"},{"location":"notes_de_cours/css_animation/#des-animations-plus-evoluees-avec-keyframes","text":"Avec la commande @keyframe ont peut aller beaucoup plus loin qu'avec transform. @keyframe nous permet en effet de s\u00e9parer notre animation en plusieurs \u00e9tapes. En fait, on peut voir l'animation fait avec @keyframe comme une suite de transformation. La premi\u00e8re \u00e9tape est de d\u00e9finir l'animation en soit avec @keyframe. Ensuite on va ajouter les \"\u00e9tapes\" de notre animation, les tranformations \u00e0 faire. Celle-ci son compos\u00e9 d'une ou plusieurs r\u00eagles css. Pour chaque \u00e9tape on doit aussi d\u00e9finir un pourcentage qui indique \u00e0 qu'elle moment durant l'animation l'\u00e9tape s'enclenche. (La dur\u00e9e de l'animation sera d\u00e9clar\u00e9 plus loin) La syntaxe est la suivante : @keyframes nom_animation { 0% { /* R\u00e8gle de l'\u00e9tape 1 */ } 50% { /* R\u00e8gle de l'\u00e9tape 2 */ } 100% { /* R\u00e8gle de l'\u00e9tape 3 */ } } Voici un exemple qui va modifier la couleur de fond, en partant du cyan on va jusqu'\u00e0 mi-chemin aller vers le jaune pour ensuite glisser vers le orange. @keyframes color_change { 0% { background-color: cyan; } 50% { background-color: yellow; } 100% { background-color: orange; } } Ensuite on va \"lancer\" notre animation en l'associant \u00e0 un s\u00e9lecteur css. L'animation sera d\u00e9clench\u00e9e automatiquement au chargement de la page, \u00e0 moins d'utiliser le s\u00e9lecteur :hover qui se fera lors du survol de la souris sur l'\u00e9l\u00e9ment. La propri\u00e9t\u00e9 \u00e0 utiliser est animation , un \"raccourci\" qui englobe 8 autres propri\u00e9t\u00e9es : animation-delay animation-direction animation-duration animation-fill-mode animation-iteration-count animation-name animation-play-state animation-timing-function On n'est pas oblig\u00e9 de d\u00e9finir une valeur pour toutes ces propri\u00e9t\u00e9s, elles en ont tous une par d\u00e9faut. Pour plus de d\u00e9tail sur ces propri\u00e9t\u00e9s : https://developer.mozilla.org/en-US/docs/Web/CSS/animation Au minimum on va d\u00e9finir le nom de l'animation, sa dur\u00e9e et le nombre r\u00e9p\u00e9tition : html { animation: nom_animation dur\u00e9e nombre_repetition; } Le nom de l'animation est celui d\u00e9fini dans le @keyframe, la dur\u00e9e est d\u00e9fini en secondes (s) ou en millisecondes (ms). Enfin la r\u00e9p\u00e9tition est un nombre qui peut \u00eatre fractionnaire. On peut aussi utiliser infinite pour r\u00e9p\u00e9ter l'animation \u00e0 l'infini.","title":"Des animations plus \u00e9volu\u00e9es avec @keyframes"},{"location":"notes_de_cours/css_animation/#pour-aller-plus-loin-avec-les-animations","text":"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes https://css-tricks.com/snippets/css/keyframe-animation-syntax/","title":"Pour aller plus loin avec les animations"},{"location":"notes_de_cours/css_basics/","text":"CSS Le CSS (Cascading Style Sheet ou en fran\u00e7ais feuilles de style en cascade) est un langage utilis\u00e9 principalement pour faire la mise en forme de pages HTML. Ses capacit\u00e9s ont \u00e9volu\u00e9 depuis son lancement et on peut aujourd'hui s'en servir \u00e0 d'autre fin, par exemple animer des \u00e9l\u00e9ments de nos pages (ce qui \u00e9tait r\u00e9serv\u00e9 au Javascript auparavant). Syntaxe Une r\u00e8gle CSS consiste en un s\u00e9lecteur et un bloc de d\u00e9claration form\u00e9 d'une s\u00e9rie de d\u00e9clarations \"propri\u00e9t\u00e9 - valeur\". Le bloc de d\u00e9claration d\u00e9but par une accolade { et est suivi par une s\u00e9rie de d\u00e9clarations s\u00e9par\u00e9es par un point-virgule. Elle se termine par la fermeture de l'accolade. Prenons l'exemple suivant h1 { color: red; font-size: 5em; } Le s\u00e9lecteur ici est la balise h1, donc la r\u00e8gle sera appliqu\u00e9e \u00e0 toutes les balises h1 du fichier HTML. Ensuite dans le bloc de d\u00e9claration, la premi\u00e8re ligne applique la valeur red \u00e0 la propri\u00e9t\u00e9 color , le texte dans les balises h1 sera de couleur rouge. Finalement la deuxi\u00e8me ligne indique d'augmenter la taille de la police \u00e0 5em, une valeur relative qui indique de l'augmenter de 5 fois la taille courante. (Nous verrons les unit\u00e9s de mesure CSS plus loin) Quand le css est inclus en attribut directement dans la balise, on dit inline , la syntaxe est un peu diff\u00e9rente. on indique seulement les paires propri\u00e9t\u00e9s-valeur sans sp\u00e9cifier de s\u00e9lecteur et sans les accolades. L'attribut \u00e0 utiliser est style . La m\u00eame r\u00e8gle que plus haut, mais directement ajout\u00e9 dans la balise < h1 style=\"color:red;font-size:5em;\" > On peut ajouter des commentaires en encadrant notre texte par les symboles / et / /* Un commentaire sur une ligne */ /* Un commentaire sur plusieurs lignes */ h1 { color: red; /* Un commentaire \u00e0 la fin d'une ligne */ } Comment et o\u00f9 l'inclure dans nos pages Il existe trois m\u00e9thodes pour ajouter des r\u00e8gles css \u00e0 un fichier HTLM : Par une fichier externe Avec la balise style Directement dans une balise HTML avec l'attribut style Feuille de style externe Les r\u00e8gles sont inscrites dans un fichier portant l'extension css . C'est la m\u00e9thode la plus commune et efficace d'inclure du css dans les pages web. Le fichier css peut \u00eatre reli\u00e9 \u00e0 plus d'un fichier html, ce qui facilite l'uniformit\u00e9 d'un site internet et \u00e9vite beaucoup de r\u00e9p\u00e9tition. fichier style.css h1 { color: red; font-size: 5em; } On lie le ou les fichiers css au fichier HTML avec la balise link qu'on ajoute dans la balise head . L'attribut href donnera le chemin vers le fichier css et l'attribut rel indiquera vers quel type de ressource un fais le lien, ici stylesheet pour feuille de style. <head> <meta charset=\"utf-8\"> <title>Mon portfolio</title> <link rel=\"stylesheet\" href=\"styles.css\"> /* Le lien se fait ici */ </head> Dans cette exemple, on lie le fichier styles.css \u00e0 notre fichier HTML. Feuille de style interne On peut aussi ajouter les r\u00e8gles directement dans le fichier HTML en utilisant la balise style . Pour plus de clart\u00e9 et de lisibilit\u00e9 je vous sugg\u00e8re d'ajouter votre code \u00e0 l'int\u00e9rieur de la balise head mais on peut aussi l'ajouter n'importe o\u00f9 dans la page. <head> <meta charset=\"utf-8\"> <title>Mon portfolio</title> /* Les r\u00e8gles css sont ajout\u00e9es ici */ <style> h1 { color: red; font-size: 5em; } </style> </head> Styles en ligne La derni\u00e8re m\u00e9thode consiste \u00e0 inclure les r\u00e8gles directement dans une balise html en utilisant l'attribut style. Cette m\u00e9thode n'est \u00e0 utiliser qu'en dernier recours , quand il n'y a vraiment pas d'autres alternatives. Le code est beaucoup plus difficile \u00e0 maintenir et \u00e0 uniformiser quand les r\u00e8gles sont d\u00e9clar\u00e9es de cette fa\u00e7on. <h1 style=\"color:red;font-size:5em\"> Les s\u00e9lecteurs CSS Un s\u00e9lecteur est une expression qui cible une entit\u00e9 HTML sur laquelle on va appliquer des r\u00e8gles CSS. Comme nous l'avons vu dans la section syntaxe, le s\u00e9lecteur est la premi\u00e8re information d\u00e9fini quand on d\u00e9fini notre s\u00e9rie de r\u00e8gles. .hautPage { /* Le s\u00e9lecteur est ici la classe hautPage */ color: purple; } Dans cet exemple, toutes les balises qui ont en attribut la classe \"hautPage\" seront affect\u00e9es par la r\u00e8gle. On peut regrouper plusieurs s\u00e9lecteurs qui partage les m\u00eames r\u00e8gles en les s\u00e9parant par une virgule. h1, h2, .titre { font-size: 2em; } Dans cet exemple, toutes les balises h1, h2 ainsi que celle ayant en attribut la classe titre seront cibl\u00e9es. Attention , si un des s\u00e9lecteurs regroup\u00e9s est invalide, la r\u00e8gle ne sera pas appliqu\u00e9. Ce qui veux dire que m\u00eame les autres s\u00e9lecteurs valides seront ignor\u00e9s . Type de s\u00e9lecteur Il existe plusieurs type de s\u00e9lecteurs qu'on peut classer en diff\u00e9rents groupes. Les s\u00e9lecteurs de balise, de classe et d'id sont les plus communs et les plus simple \u00e0 utiliser. Les s\u00e9lecteurs d'attribut qui nous permet de cibler un attribut pr\u00e9cis dans une balise. Les pseudo-classes et pseudo-\u00e9l\u00e9ments qui ciblent des \u00e9l\u00e9ments dans un \u00e9tat donn\u00e9. On peut aussi combiner des s\u00e9lecteurs pour pr\u00e9ciser encore plus notre s\u00e9lection. Quelques exemples /* S\u00e9lecteur de balise */ h1 { ... } /* S\u00e9lecteur de classe */ .titre { ... } /* S\u00e9lecteur d'id */ #hautPage { ... } /* S\u00e9lectionne toutes les balises img qui ont l'attribut alt */ img[alt] { ... } /* S\u00e9lectionne toutes les balises input dont l'attribut type est \u00e9gale \u00e0 \"text\" */ input[type=\"text\"] { ... } /* La r\u00e8gle sera appliqu\u00e9e sur les balises img quand on les survole */ img:hover { ... } /* La r\u00e8gle sera appliqu\u00e9e sur la premi\u00e8re ligne de texte des balises p */ p::first-line { ... } /* S\u00e9lectionne toutes les balises p dont le parent imm\u00e9diat est une balise div */ div > p { ... } Pour plus de d\u00e9tails et d'exemples : https://www.w3schools.com/cssref/css_selectors.asp https://developer.mozilla.org/fr/docs/Learn/CSS/Building_blocks/Selectors#reference_table_of_selectors Ordre de priorit\u00e9 des r\u00e8gles Quand plusieurs r\u00e8gles css ciblent le m\u00eame \u00e9l\u00e9ment HTML, et qu'en plus elles utilisent la m\u00eame propri\u00e9t\u00e9 CSS il y a un conflit. La r\u00e9solution de ce conflit se fera selon la priorit\u00e9 des r\u00e8gles utilis\u00e9es. Commen\u00e7ons par un exemple : <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Le titre de ma page</title> <style> body { font-size: 14px; } p { font-size: 16px; } .titre { font-size : 20px; } </style> </head> <body> <span class=\"titre\">Priorit\u00e9 des r\u00e8gles CSS</span> <div> <p style=\"font-size: 12px;\">De quel taille sera ma police??</p> <p>Et ici?</p> Et l\u00e0? </div> </body> </html> La propri\u00e9t\u00e9 font-size est utilis\u00e9 dans 3 r\u00e8gles qui entre en conflit, notamment avec l'\u00e9l\u00e9ment p. \u00cates-vous capable de d\u00e9termin\u00e9 en lisant le code de qu'elle taille sera la police de chacun des paragraphes et du texte qui suit dans l'\u00e9l\u00e9ment div? Les priorit\u00e9s de r\u00e9solution du conflit peuvent \u00eatre r\u00e9sum\u00e9 comme ceci : Utilisation du mot-cl\u00e9 !important apr\u00e8s la priorit\u00e9 CSS La sp\u00e9cificit\u00e9 du s\u00e9lecteur CSS Le mot-cl\u00e9 !important Une r\u00e8gle se terminant par le mot-cl\u00e9 !important aura toujours la plus haute priorit\u00e9. S'il y a un conflit avec de multiples !important, alors on va utiliser ensuite la sp\u00e9cificit\u00e9 pour d\u00e9terminer la priorit\u00e9. <style> div { font-size: 16px !important; } .textePlusGros { font-size: 18px; } </style> <div class=\"textePlusGros\"> Voici mon texte. </div> Dans l'exemple suivant, en temps normal la r\u00e8gle avec le s\u00e9lecteur .textePlusGros aurait pr\u00e9s\u00e9ance mais c'est la r\u00e8gle avec le s\u00e9lecteur div qui sera appliqu\u00e9e \u00e0 cause de l'utilisation de !important. L'utilisation du mot-cl\u00e9 !important devrait \u00eatre \u00e9viter le plus possible, c'est un mauvaise pratique. \u00c7a \"brise\" les principes de base du CSS et rend le d\u00e9bogage plus difficile. La sp\u00e9cificit\u00e9 du s\u00e9lecteur CSS Plus le s\u00e9lecteur est pr\u00e9cis, plus la priorit\u00e9 sera \u00e9lev\u00e9e. En partant de la priorit\u00e9 la moins \u00e9lev\u00e9e : S\u00e9lecteur Exemple * * Balise H1 Classe .maClasse Id #monId Directement dans un balise avec l'attribut style p style=\"font-size: 12px;\" En r\u00e9alit\u00e9 le calcul est beaucoup plus complexe mais on peut facilement s'en tenir \u00e0 ce tableau.","title":"Les bases"},{"location":"notes_de_cours/css_basics/#css","text":"Le CSS (Cascading Style Sheet ou en fran\u00e7ais feuilles de style en cascade) est un langage utilis\u00e9 principalement pour faire la mise en forme de pages HTML. Ses capacit\u00e9s ont \u00e9volu\u00e9 depuis son lancement et on peut aujourd'hui s'en servir \u00e0 d'autre fin, par exemple animer des \u00e9l\u00e9ments de nos pages (ce qui \u00e9tait r\u00e9serv\u00e9 au Javascript auparavant).","title":"CSS"},{"location":"notes_de_cours/css_basics/#syntaxe","text":"Une r\u00e8gle CSS consiste en un s\u00e9lecteur et un bloc de d\u00e9claration form\u00e9 d'une s\u00e9rie de d\u00e9clarations \"propri\u00e9t\u00e9 - valeur\". Le bloc de d\u00e9claration d\u00e9but par une accolade { et est suivi par une s\u00e9rie de d\u00e9clarations s\u00e9par\u00e9es par un point-virgule. Elle se termine par la fermeture de l'accolade. Prenons l'exemple suivant h1 { color: red; font-size: 5em; } Le s\u00e9lecteur ici est la balise h1, donc la r\u00e8gle sera appliqu\u00e9e \u00e0 toutes les balises h1 du fichier HTML. Ensuite dans le bloc de d\u00e9claration, la premi\u00e8re ligne applique la valeur red \u00e0 la propri\u00e9t\u00e9 color , le texte dans les balises h1 sera de couleur rouge. Finalement la deuxi\u00e8me ligne indique d'augmenter la taille de la police \u00e0 5em, une valeur relative qui indique de l'augmenter de 5 fois la taille courante. (Nous verrons les unit\u00e9s de mesure CSS plus loin) Quand le css est inclus en attribut directement dans la balise, on dit inline , la syntaxe est un peu diff\u00e9rente. on indique seulement les paires propri\u00e9t\u00e9s-valeur sans sp\u00e9cifier de s\u00e9lecteur et sans les accolades. L'attribut \u00e0 utiliser est style . La m\u00eame r\u00e8gle que plus haut, mais directement ajout\u00e9 dans la balise < h1 style=\"color:red;font-size:5em;\" > On peut ajouter des commentaires en encadrant notre texte par les symboles / et / /* Un commentaire sur une ligne */ /* Un commentaire sur plusieurs lignes */ h1 { color: red; /* Un commentaire \u00e0 la fin d'une ligne */ }","title":"Syntaxe"},{"location":"notes_de_cours/css_basics/#comment-et-ou-linclure-dans-nos-pages","text":"Il existe trois m\u00e9thodes pour ajouter des r\u00e8gles css \u00e0 un fichier HTLM : Par une fichier externe Avec la balise style Directement dans une balise HTML avec l'attribut style","title":"Comment et o\u00f9 l'inclure dans nos pages"},{"location":"notes_de_cours/css_basics/#feuille-de-style-externe","text":"Les r\u00e8gles sont inscrites dans un fichier portant l'extension css . C'est la m\u00e9thode la plus commune et efficace d'inclure du css dans les pages web. Le fichier css peut \u00eatre reli\u00e9 \u00e0 plus d'un fichier html, ce qui facilite l'uniformit\u00e9 d'un site internet et \u00e9vite beaucoup de r\u00e9p\u00e9tition. fichier style.css h1 { color: red; font-size: 5em; } On lie le ou les fichiers css au fichier HTML avec la balise link qu'on ajoute dans la balise head . L'attribut href donnera le chemin vers le fichier css et l'attribut rel indiquera vers quel type de ressource un fais le lien, ici stylesheet pour feuille de style. <head> <meta charset=\"utf-8\"> <title>Mon portfolio</title> <link rel=\"stylesheet\" href=\"styles.css\"> /* Le lien se fait ici */ </head> Dans cette exemple, on lie le fichier styles.css \u00e0 notre fichier HTML.","title":"Feuille de style externe"},{"location":"notes_de_cours/css_basics/#feuille-de-style-interne","text":"On peut aussi ajouter les r\u00e8gles directement dans le fichier HTML en utilisant la balise style . Pour plus de clart\u00e9 et de lisibilit\u00e9 je vous sugg\u00e8re d'ajouter votre code \u00e0 l'int\u00e9rieur de la balise head mais on peut aussi l'ajouter n'importe o\u00f9 dans la page. <head> <meta charset=\"utf-8\"> <title>Mon portfolio</title> /* Les r\u00e8gles css sont ajout\u00e9es ici */ <style> h1 { color: red; font-size: 5em; } </style> </head>","title":"Feuille de style interne"},{"location":"notes_de_cours/css_basics/#styles-en-ligne","text":"La derni\u00e8re m\u00e9thode consiste \u00e0 inclure les r\u00e8gles directement dans une balise html en utilisant l'attribut style. Cette m\u00e9thode n'est \u00e0 utiliser qu'en dernier recours , quand il n'y a vraiment pas d'autres alternatives. Le code est beaucoup plus difficile \u00e0 maintenir et \u00e0 uniformiser quand les r\u00e8gles sont d\u00e9clar\u00e9es de cette fa\u00e7on. <h1 style=\"color:red;font-size:5em\">","title":"Styles en ligne"},{"location":"notes_de_cours/css_basics/#les-selecteurs-css","text":"Un s\u00e9lecteur est une expression qui cible une entit\u00e9 HTML sur laquelle on va appliquer des r\u00e8gles CSS. Comme nous l'avons vu dans la section syntaxe, le s\u00e9lecteur est la premi\u00e8re information d\u00e9fini quand on d\u00e9fini notre s\u00e9rie de r\u00e8gles. .hautPage { /* Le s\u00e9lecteur est ici la classe hautPage */ color: purple; } Dans cet exemple, toutes les balises qui ont en attribut la classe \"hautPage\" seront affect\u00e9es par la r\u00e8gle. On peut regrouper plusieurs s\u00e9lecteurs qui partage les m\u00eames r\u00e8gles en les s\u00e9parant par une virgule. h1, h2, .titre { font-size: 2em; } Dans cet exemple, toutes les balises h1, h2 ainsi que celle ayant en attribut la classe titre seront cibl\u00e9es. Attention , si un des s\u00e9lecteurs regroup\u00e9s est invalide, la r\u00e8gle ne sera pas appliqu\u00e9. Ce qui veux dire que m\u00eame les autres s\u00e9lecteurs valides seront ignor\u00e9s .","title":"Les s\u00e9lecteurs CSS"},{"location":"notes_de_cours/css_basics/#type-de-selecteur","text":"Il existe plusieurs type de s\u00e9lecteurs qu'on peut classer en diff\u00e9rents groupes. Les s\u00e9lecteurs de balise, de classe et d'id sont les plus communs et les plus simple \u00e0 utiliser. Les s\u00e9lecteurs d'attribut qui nous permet de cibler un attribut pr\u00e9cis dans une balise. Les pseudo-classes et pseudo-\u00e9l\u00e9ments qui ciblent des \u00e9l\u00e9ments dans un \u00e9tat donn\u00e9. On peut aussi combiner des s\u00e9lecteurs pour pr\u00e9ciser encore plus notre s\u00e9lection. Quelques exemples /* S\u00e9lecteur de balise */ h1 { ... } /* S\u00e9lecteur de classe */ .titre { ... } /* S\u00e9lecteur d'id */ #hautPage { ... } /* S\u00e9lectionne toutes les balises img qui ont l'attribut alt */ img[alt] { ... } /* S\u00e9lectionne toutes les balises input dont l'attribut type est \u00e9gale \u00e0 \"text\" */ input[type=\"text\"] { ... } /* La r\u00e8gle sera appliqu\u00e9e sur les balises img quand on les survole */ img:hover { ... } /* La r\u00e8gle sera appliqu\u00e9e sur la premi\u00e8re ligne de texte des balises p */ p::first-line { ... } /* S\u00e9lectionne toutes les balises p dont le parent imm\u00e9diat est une balise div */ div > p { ... } Pour plus de d\u00e9tails et d'exemples : https://www.w3schools.com/cssref/css_selectors.asp https://developer.mozilla.org/fr/docs/Learn/CSS/Building_blocks/Selectors#reference_table_of_selectors","title":"Type de s\u00e9lecteur"},{"location":"notes_de_cours/css_basics/#ordre-de-priorite-des-regles","text":"Quand plusieurs r\u00e8gles css ciblent le m\u00eame \u00e9l\u00e9ment HTML, et qu'en plus elles utilisent la m\u00eame propri\u00e9t\u00e9 CSS il y a un conflit. La r\u00e9solution de ce conflit se fera selon la priorit\u00e9 des r\u00e8gles utilis\u00e9es. Commen\u00e7ons par un exemple : <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Le titre de ma page</title> <style> body { font-size: 14px; } p { font-size: 16px; } .titre { font-size : 20px; } </style> </head> <body> <span class=\"titre\">Priorit\u00e9 des r\u00e8gles CSS</span> <div> <p style=\"font-size: 12px;\">De quel taille sera ma police??</p> <p>Et ici?</p> Et l\u00e0? </div> </body> </html> La propri\u00e9t\u00e9 font-size est utilis\u00e9 dans 3 r\u00e8gles qui entre en conflit, notamment avec l'\u00e9l\u00e9ment p. \u00cates-vous capable de d\u00e9termin\u00e9 en lisant le code de qu'elle taille sera la police de chacun des paragraphes et du texte qui suit dans l'\u00e9l\u00e9ment div? Les priorit\u00e9s de r\u00e9solution du conflit peuvent \u00eatre r\u00e9sum\u00e9 comme ceci : Utilisation du mot-cl\u00e9 !important apr\u00e8s la priorit\u00e9 CSS La sp\u00e9cificit\u00e9 du s\u00e9lecteur CSS","title":"Ordre de priorit\u00e9 des r\u00e8gles"},{"location":"notes_de_cours/css_basics/#le-mot-cle-important","text":"Une r\u00e8gle se terminant par le mot-cl\u00e9 !important aura toujours la plus haute priorit\u00e9. S'il y a un conflit avec de multiples !important, alors on va utiliser ensuite la sp\u00e9cificit\u00e9 pour d\u00e9terminer la priorit\u00e9. <style> div { font-size: 16px !important; } .textePlusGros { font-size: 18px; } </style> <div class=\"textePlusGros\"> Voici mon texte. </div> Dans l'exemple suivant, en temps normal la r\u00e8gle avec le s\u00e9lecteur .textePlusGros aurait pr\u00e9s\u00e9ance mais c'est la r\u00e8gle avec le s\u00e9lecteur div qui sera appliqu\u00e9e \u00e0 cause de l'utilisation de !important. L'utilisation du mot-cl\u00e9 !important devrait \u00eatre \u00e9viter le plus possible, c'est un mauvaise pratique. \u00c7a \"brise\" les principes de base du CSS et rend le d\u00e9bogage plus difficile.","title":"Le mot-cl\u00e9 !important"},{"location":"notes_de_cours/css_basics/#la-specificite-du-selecteur-css","text":"Plus le s\u00e9lecteur est pr\u00e9cis, plus la priorit\u00e9 sera \u00e9lev\u00e9e. En partant de la priorit\u00e9 la moins \u00e9lev\u00e9e : S\u00e9lecteur Exemple * * Balise H1 Classe .maClasse Id #monId Directement dans un balise avec l'attribut style p style=\"font-size: 12px;\" En r\u00e9alit\u00e9 le calcul est beaucoup plus complexe mais on peut facilement s'en tenir \u00e0 ce tableau.","title":"La sp\u00e9cificit\u00e9 du s\u00e9lecteur CSS"},{"location":"notes_de_cours/css_bootstrap/","text":"Bootstrap Bootstrap est un framework CSS ax\u00e9 sur les composants. Il nous permet de rapidement cr\u00e9er un site responsive sans avoir trop de connaissance en css. On peut en effet arriv\u00e9 \u00e0 un r\u00e9sultat tr\u00e8s d\u00e9cent sans \u00e9crire une seule ligne de css. Son utilisation se fait par des classes qu'on ajoute \u00e0 nos \u00e9l\u00e9ment. Je vous conseille fortement d'installer l'extension HTML CSS Support pour ajout\u00e9 \u00e0 VSCode une compl\u00e9tion automatique des classes. Ce qui est g\u00e9nial avec cette extension c'est qu'elle fonctionne m\u00eame avec nos propres fichiers css. Installation Il y a plusieurs fa\u00e7on d'ajouter Bootstrap \u00e0 nos projet, on va voir comment l'installer via le t\u00e9l\u00e9chargement des fichiers ou par CDN. T\u00e9l\u00e9chargement des fichiers de styles T\u00e9l\u00e9chargez les fichiers \"compil\u00e9s\" sur le site officiel de bootstrap : https://getbootstrap.com/docs/5.2/getting-started/download/ Copiez ensuite ces fichiers dans votre projet, pr\u00e9f\u00e9rablement dans un dossier css. Pour l'instant vous pouvez uniquement copier le fichier bootstrap.css. Vous devez ensuite faire une r\u00e9f\u00e9rence vers ce fichier avec la balise link dans le fichier html o\u00f9 vous voulez utiliser Bootstrap : <link rel=\"stylesheet\" href=\"css/bootstrap.css\"> Utilisation via CDN Encore depuis le site officiel de Bootstrap, allez r\u00e9cup\u00e9rer les urls de la section \"Include via CDN\" directement depuis la page accueil. Pour l'instant vous pouvez seulement utiliser le lien pour le css. Ajouter ensuite se lien dans la section head de votre fichier html. <!-- CSS only --> <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT\" crossorigin=\"anonymous\"> Note : J'ai mis le liens plus haut qu'\u00e0 titre d'exemple, il est toujours pr\u00e9f\u00e9rable d'aller chercher le liens le plus \u00e0 jour. Avantages et inconv\u00e9nients En t\u00e9l\u00e9chargeant les fichiers css, on acc\u00e9l\u00e8re l'utilisation de Bootstrap sur notre site mais on \"alourdi\" l\u00e9g\u00e8rement sa taille en terme d'espace disque. Un utilisant un CDN on t\u00e9l\u00e9charge les fichiers depuis un serveur distant, \u00e7a peut ralentir un peu l'affichage et on est d\u00e9pendant de ce serveur. D'un autre c\u00f4t\u00e9 on s'assure d'avoir une version la plus \u00e0 jour et \u00e7a nous \u00e9vite d'avoir \u00e0 maintenir des fichiers suppl\u00e9mentaires pour notre site. Un chose \u00e0 faire attention, Bootstrap \"reset\" certaines propri\u00e9t\u00e9s des \u00e9l\u00e9ments html, comme par exemple la marge de la balise body qui est chang\u00e9 \u00e0 0px au lieu de 8px. Il est toujours pr\u00e9f\u00e9rable d'ajouter les liens vers Bootstrap AVANT les autres fichiers css. Utilisation Comme on disait plus haut, l'utilisation de Bootstrap se fait \u00e0 l'aide de classes pr\u00e9d\u00e9finis qu'on ajoute \u00e0 l'\u00e9l\u00e9ment qu'on veut \"stylis\u00e9\". Prenons par exemple les deux boutons suivants : Le rendu est similaire \u00e0 part pour la couleur. Voici le code html et css que j'ai utilis\u00e9 pour les cr\u00e9\u00e9s : HTLM <button class=\"bouton-css\">Bouton CSS</button> <button class=\"btn btn-primary btn-lg\">Bouton bootstrap</button> CSS .bouton-css { border: none; border-radius: 0.5em; padding: 0.5em 1.5em; font-size: 1.2em; background-color: darkslateblue; color: white; cursor: pointer; } .bouton-css:hover { background-color: rgb(104, 92, 186); box-shadow: 0px 0px 5px gray; } Comme vous pouvez le voir, aucune r\u00e8gle css n'a \u00e9t\u00e9 requise pour cr\u00e9er mon bouton Bootstrap. C'est avec les trois classes ajout\u00e9es qu'il a \u00e9t\u00e9 cr\u00e9\u00e9. (btn indique que c'est un bouton, btn-primary pour la couleur bleu et btn-lg pour avoir un plus gros bouton). Merveilleux non? On ne le vois pas dans ma capture d'\u00e9cran mais il y a aussi un effet quand on survol le bouton. C'est une des forces de Bootstrap. En ajoutant quelques classes \u00e0 un \u00e9l\u00e9ment on peut rapidement le transformer en quelque chose de plus stylis\u00e9. \u00c7a nous assure aussi une certaine conformit\u00e9 dans notre site: les composantes auront tous le m\u00eame style. On a par contre moins de contr\u00f4le sur nos \u00e9l\u00e9ments. Si on a des modifications \u00e0 faire c'est un peu plus compliqu\u00e9. Alors si on veux rapidement cr\u00e9er un site qui \"parait\" bien sans trop se compliquer la vie avec le css, Bootstrap est une bonne solution. Si on commence \u00e0 modifier un par un nos \u00e9l\u00e9ment pour modifier le style que l'on veut donner \u00e0 notre site on devrait peut-\u00eatre revenir \u00e0 du css \"pure\". Les \"breakpoints\" Bootstrap a \u00e9t\u00e9 d\u00e9velopp\u00e9 avec comme objectif de nous donner une m\u00e9thode facile de cr\u00e9er des sites \"responsive\". Les breakpoints sont des valeurs pr\u00e9d\u00e9finies qui repr\u00e9sentent des largeurs en pixels. Vous vous rappeler quand on faisait des media query, on utilisait des dimensions en pixels avec min-width. C'est un peu le m\u00eame principe avec les breakpoints. On peux souvent les ajouter \u00e0 une classe bootstrap pour la rafiner. Liste des breakpoints Les conteneurs (container) Un peu comme on l'a vu avec flexbox et grid, les conteneurs sont l'\u00e9l\u00e9ment de base \u00e0 utiliser quand on fait de la disposition avec Bootstrap. Il y a trois diff\u00e9rent type de conteneur, repr\u00e9sent\u00e9 par les classes suivantes : .container, sa largeur sera fixe et va d\u00e9pendre de la dimension de l'\u00e9cran. .container-fluid, sa largeur sera toujours de 100% .container-{breakpoint}, sa largeur sera de 100% tant que la dimension de l'\u00e9cran ne d\u00e9passera pas la valeur du breakpoint. <div class=\"container-lg\"> ... </div> Vous pouvez voir un exemple en action ici : https://getbootstrap.com/docs/5.2/examples/grid/#containers Le syst\u00e8me de grille On peut utiliser avec Bootstrap utilise un syst\u00e8me de conteneur, ligne et colonne pour faire la disposition de nos \u00e9l\u00e9ments. En plus, c'est flexbox :astonished: qui est utilis\u00e9 \"en dessous de la couverture\". Pas de panique vous allez voir l'utilisation est quand m\u00eame assez simple. On va utiliser des \u00e9l\u00e9ments div auxquelles ont va donner les classes appropri\u00e9es. On commence par cr\u00e9er une div \"conteneur\", ensuite on cr\u00e9e une autre div qui va \u00eatre la premi\u00e8re ligne. Dans cette div on va cr\u00e9er le nombre de div \u00e9gale au nombre de colonne voulue. La beaut\u00e9 de la chose est qu'on n'est pas oblig\u00e9 d'avoir le m\u00eame nombre de colonne par ligne, chaque ligne est ind\u00e9pendante des autres. Dans cette exemple je cr\u00e9e une ligne de 2 colonne et un autre de 3. Les deux lignes auront la m\u00eame dimension en largeur, les cases de chaque ligne vont s'ajuster en cons\u00e9quence. <div class=\"container text-center\"> <div class=\"row\"> <div class=\"col\"> 1 of 2 </div> <div class=\"col\"> 2 of 2 </div> </div> <div class=\"row\"> <div class=\"col\"> 1 of 3 </div> <div class=\"col\"> 2 of 3 </div> <div class=\"col\"> 3 of 3 </div> </div> </div> Par d\u00e9faut les colonnes se partageront \u00e9quitablement l'espace disponible. On peut aussi d\u00e9finir des dimensions pour certaine ou toutes les colonnes. Chaque ligne est divis\u00e9 en 12 parties \u00e9gales. On peut attribuer \u00e0 une colonne une valeur de 1 \u00e0 12 d\u00e9terminant ainsi la proportion de l'espace que cette colonne va prendre, une valeur de 6 \u00e9quivaut \u00e0 50% de la dimension totale par exemple. Si la somme de ces valeurs d\u00e9passent 12, les colonnes exc\u00e9dentaire vont d\u00e9border sur une autre ligne. <div class=\"container text-center\"> <div class=\"row\"> <div class=\"col-8\">1 of 2</div> <div class=\"col-6\">2 of 2</div> </div> <div class=\"row\"> <div class=\"col\">1 of 3</div> <div class=\"col\">2 of 3</div> <div class=\"col\">3 of 3</div> </div> </div> On peut aussi sp\u00e9cifier un breakpoint \u00e0 la classe ainsi qu'une valeur pour modifier les colonnes selon la dimension de l'\u00e9cran. <div class=\"container text-center\"> <div class=\"row\"> <div class=\"col col-md-4\">1 of 2</div> <div class=\"col col-md-8\">2 of 2</div> </div> <div class=\"row\"> <div class=\"col col-md-12\">1 of 3</div> <div class=\"col col-md-6\">2 of 3</div> <div class=\"col col-md-6\">3 of 3</div> </div> </div> ici tant que la dimension de l'\u00e9cran ne d\u00e9passera pas 768px (le breakpoint md) les colonnes seront \u00e9gales entre elles. Ensuite les proportions seront celle apr\u00e8s le breakpoint. Une derni\u00e8re chose, j'ai dis plus t\u00f4t que le syst\u00e8me de grille utilisait Flexbox. On peut donc se servir de ce qu'on a appris et l'appliquer ici \u00e0 l'aide de classes Bootstrap. <div class=\"container text-center\"> <div class=\"row\"> <div class=\"col-4\">Ligne 1</div> </div> <div class=\"row\"> <div class=\"col-7\">Ligne 2</div> </div> <div class=\"row\"> <div class=\"col-2\">1 of 3</div> <div class=\"col-2\">2 of 3</div> <div class=\"col-2\">3 of 3</div> </div> </div> <div class=\"container text-center\"> <div class=\"row justify-content-center\"> <div class=\"col-4\">Ligne 1</div> </div> <div class=\"row justify-content-end\"> <div class=\"col-7\">Ligne 2</div> </div> <div class=\"row justify-content-between\"> <div class=\"col-2\">1 of 3</div> <div class=\"col-2\">2 of 3</div> <div class=\"col-2\">3 of 3</div> </div> </div> Voil\u00e0 la base du syst\u00e8me de grille de Bootstrap, pour aller plus loin consultez la documentation officielle ici : https://getbootstrap.com/docs/5.2/layout/grid/ Sources et r\u00e9f\u00e9rences https://getbootstrap.com/","title":"Bootstrap"},{"location":"notes_de_cours/css_bootstrap/#bootstrap","text":"Bootstrap est un framework CSS ax\u00e9 sur les composants. Il nous permet de rapidement cr\u00e9er un site responsive sans avoir trop de connaissance en css. On peut en effet arriv\u00e9 \u00e0 un r\u00e9sultat tr\u00e8s d\u00e9cent sans \u00e9crire une seule ligne de css. Son utilisation se fait par des classes qu'on ajoute \u00e0 nos \u00e9l\u00e9ment. Je vous conseille fortement d'installer l'extension HTML CSS Support pour ajout\u00e9 \u00e0 VSCode une compl\u00e9tion automatique des classes. Ce qui est g\u00e9nial avec cette extension c'est qu'elle fonctionne m\u00eame avec nos propres fichiers css.","title":"Bootstrap"},{"location":"notes_de_cours/css_bootstrap/#installation","text":"Il y a plusieurs fa\u00e7on d'ajouter Bootstrap \u00e0 nos projet, on va voir comment l'installer via le t\u00e9l\u00e9chargement des fichiers ou par CDN.","title":"Installation"},{"location":"notes_de_cours/css_bootstrap/#telechargement-des-fichiers-de-styles","text":"T\u00e9l\u00e9chargez les fichiers \"compil\u00e9s\" sur le site officiel de bootstrap : https://getbootstrap.com/docs/5.2/getting-started/download/ Copiez ensuite ces fichiers dans votre projet, pr\u00e9f\u00e9rablement dans un dossier css. Pour l'instant vous pouvez uniquement copier le fichier bootstrap.css. Vous devez ensuite faire une r\u00e9f\u00e9rence vers ce fichier avec la balise link dans le fichier html o\u00f9 vous voulez utiliser Bootstrap : <link rel=\"stylesheet\" href=\"css/bootstrap.css\">","title":"T\u00e9l\u00e9chargement des fichiers de styles"},{"location":"notes_de_cours/css_bootstrap/#utilisation-via-cdn","text":"Encore depuis le site officiel de Bootstrap, allez r\u00e9cup\u00e9rer les urls de la section \"Include via CDN\" directement depuis la page accueil. Pour l'instant vous pouvez seulement utiliser le lien pour le css. Ajouter ensuite se lien dans la section head de votre fichier html. <!-- CSS only --> <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-iYQeCzEYFbKjA/T2uDLTpkwGzCiq6soy8tYaI1GyVh/UjpbCx/TYkiZhlZB6+fzT\" crossorigin=\"anonymous\"> Note : J'ai mis le liens plus haut qu'\u00e0 titre d'exemple, il est toujours pr\u00e9f\u00e9rable d'aller chercher le liens le plus \u00e0 jour.","title":"Utilisation via CDN"},{"location":"notes_de_cours/css_bootstrap/#avantages-et-inconvenients","text":"En t\u00e9l\u00e9chargeant les fichiers css, on acc\u00e9l\u00e8re l'utilisation de Bootstrap sur notre site mais on \"alourdi\" l\u00e9g\u00e8rement sa taille en terme d'espace disque. Un utilisant un CDN on t\u00e9l\u00e9charge les fichiers depuis un serveur distant, \u00e7a peut ralentir un peu l'affichage et on est d\u00e9pendant de ce serveur. D'un autre c\u00f4t\u00e9 on s'assure d'avoir une version la plus \u00e0 jour et \u00e7a nous \u00e9vite d'avoir \u00e0 maintenir des fichiers suppl\u00e9mentaires pour notre site. Un chose \u00e0 faire attention, Bootstrap \"reset\" certaines propri\u00e9t\u00e9s des \u00e9l\u00e9ments html, comme par exemple la marge de la balise body qui est chang\u00e9 \u00e0 0px au lieu de 8px. Il est toujours pr\u00e9f\u00e9rable d'ajouter les liens vers Bootstrap AVANT les autres fichiers css.","title":"Avantages et inconv\u00e9nients"},{"location":"notes_de_cours/css_bootstrap/#utilisation","text":"Comme on disait plus haut, l'utilisation de Bootstrap se fait \u00e0 l'aide de classes pr\u00e9d\u00e9finis qu'on ajoute \u00e0 l'\u00e9l\u00e9ment qu'on veut \"stylis\u00e9\". Prenons par exemple les deux boutons suivants : Le rendu est similaire \u00e0 part pour la couleur. Voici le code html et css que j'ai utilis\u00e9 pour les cr\u00e9\u00e9s : HTLM <button class=\"bouton-css\">Bouton CSS</button> <button class=\"btn btn-primary btn-lg\">Bouton bootstrap</button> CSS .bouton-css { border: none; border-radius: 0.5em; padding: 0.5em 1.5em; font-size: 1.2em; background-color: darkslateblue; color: white; cursor: pointer; } .bouton-css:hover { background-color: rgb(104, 92, 186); box-shadow: 0px 0px 5px gray; } Comme vous pouvez le voir, aucune r\u00e8gle css n'a \u00e9t\u00e9 requise pour cr\u00e9er mon bouton Bootstrap. C'est avec les trois classes ajout\u00e9es qu'il a \u00e9t\u00e9 cr\u00e9\u00e9. (btn indique que c'est un bouton, btn-primary pour la couleur bleu et btn-lg pour avoir un plus gros bouton). Merveilleux non? On ne le vois pas dans ma capture d'\u00e9cran mais il y a aussi un effet quand on survol le bouton. C'est une des forces de Bootstrap. En ajoutant quelques classes \u00e0 un \u00e9l\u00e9ment on peut rapidement le transformer en quelque chose de plus stylis\u00e9. \u00c7a nous assure aussi une certaine conformit\u00e9 dans notre site: les composantes auront tous le m\u00eame style. On a par contre moins de contr\u00f4le sur nos \u00e9l\u00e9ments. Si on a des modifications \u00e0 faire c'est un peu plus compliqu\u00e9. Alors si on veux rapidement cr\u00e9er un site qui \"parait\" bien sans trop se compliquer la vie avec le css, Bootstrap est une bonne solution. Si on commence \u00e0 modifier un par un nos \u00e9l\u00e9ment pour modifier le style que l'on veut donner \u00e0 notre site on devrait peut-\u00eatre revenir \u00e0 du css \"pure\".","title":"Utilisation"},{"location":"notes_de_cours/css_bootstrap/#les-breakpoints","text":"Bootstrap a \u00e9t\u00e9 d\u00e9velopp\u00e9 avec comme objectif de nous donner une m\u00e9thode facile de cr\u00e9er des sites \"responsive\". Les breakpoints sont des valeurs pr\u00e9d\u00e9finies qui repr\u00e9sentent des largeurs en pixels. Vous vous rappeler quand on faisait des media query, on utilisait des dimensions en pixels avec min-width. C'est un peu le m\u00eame principe avec les breakpoints. On peux souvent les ajouter \u00e0 une classe bootstrap pour la rafiner. Liste des breakpoints","title":"Les \"breakpoints\""},{"location":"notes_de_cours/css_bootstrap/#les-conteneurs-container","text":"Un peu comme on l'a vu avec flexbox et grid, les conteneurs sont l'\u00e9l\u00e9ment de base \u00e0 utiliser quand on fait de la disposition avec Bootstrap. Il y a trois diff\u00e9rent type de conteneur, repr\u00e9sent\u00e9 par les classes suivantes : .container, sa largeur sera fixe et va d\u00e9pendre de la dimension de l'\u00e9cran. .container-fluid, sa largeur sera toujours de 100% .container-{breakpoint}, sa largeur sera de 100% tant que la dimension de l'\u00e9cran ne d\u00e9passera pas la valeur du breakpoint. <div class=\"container-lg\"> ... </div> Vous pouvez voir un exemple en action ici : https://getbootstrap.com/docs/5.2/examples/grid/#containers","title":"Les conteneurs (container)"},{"location":"notes_de_cours/css_bootstrap/#le-systeme-de-grille","text":"On peut utiliser avec Bootstrap utilise un syst\u00e8me de conteneur, ligne et colonne pour faire la disposition de nos \u00e9l\u00e9ments. En plus, c'est flexbox :astonished: qui est utilis\u00e9 \"en dessous de la couverture\". Pas de panique vous allez voir l'utilisation est quand m\u00eame assez simple. On va utiliser des \u00e9l\u00e9ments div auxquelles ont va donner les classes appropri\u00e9es. On commence par cr\u00e9er une div \"conteneur\", ensuite on cr\u00e9e une autre div qui va \u00eatre la premi\u00e8re ligne. Dans cette div on va cr\u00e9er le nombre de div \u00e9gale au nombre de colonne voulue. La beaut\u00e9 de la chose est qu'on n'est pas oblig\u00e9 d'avoir le m\u00eame nombre de colonne par ligne, chaque ligne est ind\u00e9pendante des autres. Dans cette exemple je cr\u00e9e une ligne de 2 colonne et un autre de 3. Les deux lignes auront la m\u00eame dimension en largeur, les cases de chaque ligne vont s'ajuster en cons\u00e9quence. <div class=\"container text-center\"> <div class=\"row\"> <div class=\"col\"> 1 of 2 </div> <div class=\"col\"> 2 of 2 </div> </div> <div class=\"row\"> <div class=\"col\"> 1 of 3 </div> <div class=\"col\"> 2 of 3 </div> <div class=\"col\"> 3 of 3 </div> </div> </div> Par d\u00e9faut les colonnes se partageront \u00e9quitablement l'espace disponible. On peut aussi d\u00e9finir des dimensions pour certaine ou toutes les colonnes. Chaque ligne est divis\u00e9 en 12 parties \u00e9gales. On peut attribuer \u00e0 une colonne une valeur de 1 \u00e0 12 d\u00e9terminant ainsi la proportion de l'espace que cette colonne va prendre, une valeur de 6 \u00e9quivaut \u00e0 50% de la dimension totale par exemple. Si la somme de ces valeurs d\u00e9passent 12, les colonnes exc\u00e9dentaire vont d\u00e9border sur une autre ligne. <div class=\"container text-center\"> <div class=\"row\"> <div class=\"col-8\">1 of 2</div> <div class=\"col-6\">2 of 2</div> </div> <div class=\"row\"> <div class=\"col\">1 of 3</div> <div class=\"col\">2 of 3</div> <div class=\"col\">3 of 3</div> </div> </div> On peut aussi sp\u00e9cifier un breakpoint \u00e0 la classe ainsi qu'une valeur pour modifier les colonnes selon la dimension de l'\u00e9cran. <div class=\"container text-center\"> <div class=\"row\"> <div class=\"col col-md-4\">1 of 2</div> <div class=\"col col-md-8\">2 of 2</div> </div> <div class=\"row\"> <div class=\"col col-md-12\">1 of 3</div> <div class=\"col col-md-6\">2 of 3</div> <div class=\"col col-md-6\">3 of 3</div> </div> </div> ici tant que la dimension de l'\u00e9cran ne d\u00e9passera pas 768px (le breakpoint md) les colonnes seront \u00e9gales entre elles. Ensuite les proportions seront celle apr\u00e8s le breakpoint. Une derni\u00e8re chose, j'ai dis plus t\u00f4t que le syst\u00e8me de grille utilisait Flexbox. On peut donc se servir de ce qu'on a appris et l'appliquer ici \u00e0 l'aide de classes Bootstrap. <div class=\"container text-center\"> <div class=\"row\"> <div class=\"col-4\">Ligne 1</div> </div> <div class=\"row\"> <div class=\"col-7\">Ligne 2</div> </div> <div class=\"row\"> <div class=\"col-2\">1 of 3</div> <div class=\"col-2\">2 of 3</div> <div class=\"col-2\">3 of 3</div> </div> </div> <div class=\"container text-center\"> <div class=\"row justify-content-center\"> <div class=\"col-4\">Ligne 1</div> </div> <div class=\"row justify-content-end\"> <div class=\"col-7\">Ligne 2</div> </div> <div class=\"row justify-content-between\"> <div class=\"col-2\">1 of 3</div> <div class=\"col-2\">2 of 3</div> <div class=\"col-2\">3 of 3</div> </div> </div> Voil\u00e0 la base du syst\u00e8me de grille de Bootstrap, pour aller plus loin consultez la documentation officielle ici : https://getbootstrap.com/docs/5.2/layout/grid/","title":"Le syst\u00e8me de grille"},{"location":"notes_de_cours/css_bootstrap/#sources-et-references","text":"https://getbootstrap.com/","title":"Sources et r\u00e9f\u00e9rences"},{"location":"notes_de_cours/css_flexbox/","text":"Flexbox Flexbox est une s\u00e9rie de propri\u00e9t\u00e9s CSS dont le but est de faciliter la mise en page, l'alignement et la distribution de l'espace entre des items d'un \"container\". Le \"container\" \u00e0 le pouvoir de redimensionner ses items selon l'espace disponible. Utiliser Flexbox est donc une m\u00e9thode efficace pour cr\u00e9er des pages web \"responsive\", qui s'adaptent au diff\u00e9rent support avec laquelle on la consulte. On va utiliser Flexbox pour la mise en page de petite section de nos site, un menu, une section de titre, etc. Pour la disposition plus globale, il y a d'autres m\u00e9thodes plus appropri\u00e9es comme Grid que nous verrons ult\u00e9rieurement. D\u00e9finition L'id\u00e9e g\u00e9n\u00e9rale de Flexbox est qu'on englobe le contenu avec lequel on veut travailler dans un conteneur (container). Les \u00e9l\u00e9ments qui se retrouvent dans le conteneur, les items, seront affect\u00e9 par les propri\u00e9t\u00e9s du conteneur et aussi par des r\u00e8gles propres \u00e0 eux. Voici un sch\u00e9ma qui r\u00e9sume la disposition des \u00e9l\u00e9ments : Les items dans le conteneur, selon la direction qu'on lui d\u00e9fini, en suivant le main axis ou le cross axis . Par d\u00e9faut c'est de gauche \u00e0 droite (en suivant le sens du main-axis comme dans l'image). Les propri\u00e9t\u00e9s du conteneur display Pour d\u00e9terminer que l'\u00e9l\u00e9ment est un conteneur flexbox. Cette propri\u00e9t\u00e9 est \u00e0 d\u00e9clarer en premier car elle va nous permettre d'utiliser les autres propri\u00e9t\u00e9s flexbox sur cet \u00e9l\u00e9ment et tous ses enfants. .container_titre { display: flex; } flex-direction C'est avec cette propri\u00e9t\u00e9 qu'on va d\u00e9finir le sens de distribution des items. Les valeurs possibles sont : row: par d\u00e9faut, en ligne de gauche \u00e0 droite row-reverse : en ligne, de droite \u00e0 gauche column : de haut en bas (en colonne) column : de bas en haut .container_titre { flex-direction: row-reverse; } justify-content justify-content permet de d\u00e9finir l'alignement des items suivant le main-axis . flex-start : par d\u00e9faut, les items sont align\u00e9s au d\u00e9but selon le sens de flex-direction . flex-end : Les items sont align\u00e9 \u00e0 la fin selon le sens de flex-direction center : Les items sont centr\u00e9s space-between : Le premier et dernier items sont align\u00e9s respectivement au d\u00e9but et \u00e0 la fin, les autres items sont distribu\u00e9s de fa\u00e7on \u00e9gale sur la ligne. space-around : Les items sont distribu\u00e9 uniform\u00e9ment le long de l'axe et un espace \u00e9gale au d\u00e9but et \u00e0 la fin. space-evenly : Les items sont distribu\u00e9\u00e9 pour que l'espace entre chaque soit la m\u00eame. source align-items D\u00e9termine comment les items seront align\u00e9s selon l'axe secondaire (cross axis). stretch : par d\u00e9faut, les items seront \u00e9tir\u00e9s pour remplir l'espace disponible dans le conteneur flex-start : les items sont align\u00e9s au d\u00e9but de l'axe secondaire flex-end : les items sont align\u00e9s \u00e0 la fin de l'axe secondaire center : les items sont centr\u00e9s selon l'axe secondaire source align-content Cette propri\u00e9t\u00e9 est effective seulement quand il y a plusieurs lignes d'items dans le conteneur. C'est un peu le m\u00eame principe que pour la propri\u00e9t\u00e9 justify-content mais au niveau de l'axe secondaire (cross axis). Les valeurs possibles sont sensiblement les m\u00eames : flex-start, flex-end, center, space-between, space-around et space-evenly. source flex-wrap Les items vont par d\u00e9faut essayer de tenir sur la m\u00eame ligne. On peut changer ce comportement et permettre au items de pouvoir \"wraper\" quand c'est n\u00e9cessaire. flex-flow La propri\u00e9t\u00e9 flex-flow est un raccourci pour d\u00e9finir les propri\u00e9t\u00e9s flex-direction et flew-wrap dans une seule ligne. /* Au lieu d'\u00e9crire ceci */ flex-direction: row-reverse; flex-wrap: wrap; /* on peut r\u00e9sum\u00e9 par cette ligne */ flex-flow: row-reverse wrap; Les propri\u00e9t\u00e9s des items flex-grow D\u00e9finie la capacit\u00e9 pour un item de s'agrandir quand c'est n\u00e9cessaire. La propri\u00e9t\u00e9 indique quel quantit\u00e9 d'espace \"restant\" du conteneur l'item peut utiliser pour s'agrandir. La valeur de la propri\u00e9t\u00e9 est un entier positif sans unit\u00e9 de mesure qui repr\u00e9sente une proportion. Si j'ai par exemple trois items et que je leur d\u00e9fini la propri\u00e9t\u00e9 flex-grow \u00e0 1, les trois items auront la m\u00eame dimension. Par contre si un des items \u00e0 une valeur de 2 et les autres 1, le premier item sera 2 fois plus grand que les deux autres. flex-shrink M\u00eame chose que pour flex-grow, mais au niveau de la diminution de sa taille. flex-basis D\u00e9termine la taille par d\u00e9faut d'un \u00e9l\u00e9ment avant que l'espace disponible ne soit distribu\u00e9. La valeur peut \u00eatre une unit\u00e9 de mesure ou un mot-cl\u00e9. flex C'est un raccourci pour les propri\u00e9t\u00e9s flex-grow , flex-shrink et flex-basis . Ces deux derniers sont optionnel, on peut sp\u00e9cifi\u00e9 uniquement une valeur pour flex-grow . flex: 2 1 25% /* est \u00e9quivalent \u00e0 */ flex-grow: 2; flex-shrink: 1; flex-basis: 25%; align-self Permet d'outrepasser l'alignement par d\u00e9faut pour un item. Les valeurs possible sont les m\u00eames que pour align-items. #item3 { align-self: flex-end; } source Tutoriel sous forme de jeux Flexbox Froggy Flexbox Zombies Sources et r\u00e9f\u00e9rences https://css-tricks.com/snippets/css/a-guide-to-flexbox/ https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox https://yoksel.github.io/flex-cheatsheet/","title":"Flexbox"},{"location":"notes_de_cours/css_flexbox/#flexbox","text":"Flexbox est une s\u00e9rie de propri\u00e9t\u00e9s CSS dont le but est de faciliter la mise en page, l'alignement et la distribution de l'espace entre des items d'un \"container\". Le \"container\" \u00e0 le pouvoir de redimensionner ses items selon l'espace disponible. Utiliser Flexbox est donc une m\u00e9thode efficace pour cr\u00e9er des pages web \"responsive\", qui s'adaptent au diff\u00e9rent support avec laquelle on la consulte. On va utiliser Flexbox pour la mise en page de petite section de nos site, un menu, une section de titre, etc. Pour la disposition plus globale, il y a d'autres m\u00e9thodes plus appropri\u00e9es comme Grid que nous verrons ult\u00e9rieurement.","title":"Flexbox"},{"location":"notes_de_cours/css_flexbox/#definition","text":"L'id\u00e9e g\u00e9n\u00e9rale de Flexbox est qu'on englobe le contenu avec lequel on veut travailler dans un conteneur (container). Les \u00e9l\u00e9ments qui se retrouvent dans le conteneur, les items, seront affect\u00e9 par les propri\u00e9t\u00e9s du conteneur et aussi par des r\u00e8gles propres \u00e0 eux. Voici un sch\u00e9ma qui r\u00e9sume la disposition des \u00e9l\u00e9ments : Les items dans le conteneur, selon la direction qu'on lui d\u00e9fini, en suivant le main axis ou le cross axis . Par d\u00e9faut c'est de gauche \u00e0 droite (en suivant le sens du main-axis comme dans l'image).","title":"D\u00e9finition"},{"location":"notes_de_cours/css_flexbox/#les-proprietes-du-conteneur","text":"","title":"Les propri\u00e9t\u00e9s du conteneur"},{"location":"notes_de_cours/css_flexbox/#display","text":"Pour d\u00e9terminer que l'\u00e9l\u00e9ment est un conteneur flexbox. Cette propri\u00e9t\u00e9 est \u00e0 d\u00e9clarer en premier car elle va nous permettre d'utiliser les autres propri\u00e9t\u00e9s flexbox sur cet \u00e9l\u00e9ment et tous ses enfants. .container_titre { display: flex; }","title":"display"},{"location":"notes_de_cours/css_flexbox/#flex-direction","text":"C'est avec cette propri\u00e9t\u00e9 qu'on va d\u00e9finir le sens de distribution des items. Les valeurs possibles sont : row: par d\u00e9faut, en ligne de gauche \u00e0 droite row-reverse : en ligne, de droite \u00e0 gauche column : de haut en bas (en colonne) column : de bas en haut .container_titre { flex-direction: row-reverse; }","title":"flex-direction"},{"location":"notes_de_cours/css_flexbox/#justify-content","text":"justify-content permet de d\u00e9finir l'alignement des items suivant le main-axis . flex-start : par d\u00e9faut, les items sont align\u00e9s au d\u00e9but selon le sens de flex-direction . flex-end : Les items sont align\u00e9 \u00e0 la fin selon le sens de flex-direction center : Les items sont centr\u00e9s space-between : Le premier et dernier items sont align\u00e9s respectivement au d\u00e9but et \u00e0 la fin, les autres items sont distribu\u00e9s de fa\u00e7on \u00e9gale sur la ligne. space-around : Les items sont distribu\u00e9 uniform\u00e9ment le long de l'axe et un espace \u00e9gale au d\u00e9but et \u00e0 la fin. space-evenly : Les items sont distribu\u00e9\u00e9 pour que l'espace entre chaque soit la m\u00eame. source","title":"justify-content"},{"location":"notes_de_cours/css_flexbox/#align-items","text":"D\u00e9termine comment les items seront align\u00e9s selon l'axe secondaire (cross axis). stretch : par d\u00e9faut, les items seront \u00e9tir\u00e9s pour remplir l'espace disponible dans le conteneur flex-start : les items sont align\u00e9s au d\u00e9but de l'axe secondaire flex-end : les items sont align\u00e9s \u00e0 la fin de l'axe secondaire center : les items sont centr\u00e9s selon l'axe secondaire source","title":"align-items"},{"location":"notes_de_cours/css_flexbox/#align-content","text":"Cette propri\u00e9t\u00e9 est effective seulement quand il y a plusieurs lignes d'items dans le conteneur. C'est un peu le m\u00eame principe que pour la propri\u00e9t\u00e9 justify-content mais au niveau de l'axe secondaire (cross axis). Les valeurs possibles sont sensiblement les m\u00eames : flex-start, flex-end, center, space-between, space-around et space-evenly. source","title":"align-content"},{"location":"notes_de_cours/css_flexbox/#flex-wrap","text":"Les items vont par d\u00e9faut essayer de tenir sur la m\u00eame ligne. On peut changer ce comportement et permettre au items de pouvoir \"wraper\" quand c'est n\u00e9cessaire.","title":"flex-wrap"},{"location":"notes_de_cours/css_flexbox/#flex-flow","text":"La propri\u00e9t\u00e9 flex-flow est un raccourci pour d\u00e9finir les propri\u00e9t\u00e9s flex-direction et flew-wrap dans une seule ligne. /* Au lieu d'\u00e9crire ceci */ flex-direction: row-reverse; flex-wrap: wrap; /* on peut r\u00e9sum\u00e9 par cette ligne */ flex-flow: row-reverse wrap;","title":"flex-flow"},{"location":"notes_de_cours/css_flexbox/#les-proprietes-des-items","text":"","title":"Les propri\u00e9t\u00e9s des items"},{"location":"notes_de_cours/css_flexbox/#flex-grow","text":"D\u00e9finie la capacit\u00e9 pour un item de s'agrandir quand c'est n\u00e9cessaire. La propri\u00e9t\u00e9 indique quel quantit\u00e9 d'espace \"restant\" du conteneur l'item peut utiliser pour s'agrandir. La valeur de la propri\u00e9t\u00e9 est un entier positif sans unit\u00e9 de mesure qui repr\u00e9sente une proportion. Si j'ai par exemple trois items et que je leur d\u00e9fini la propri\u00e9t\u00e9 flex-grow \u00e0 1, les trois items auront la m\u00eame dimension. Par contre si un des items \u00e0 une valeur de 2 et les autres 1, le premier item sera 2 fois plus grand que les deux autres.","title":"flex-grow"},{"location":"notes_de_cours/css_flexbox/#flex-shrink","text":"M\u00eame chose que pour flex-grow, mais au niveau de la diminution de sa taille.","title":"flex-shrink"},{"location":"notes_de_cours/css_flexbox/#flex-basis","text":"D\u00e9termine la taille par d\u00e9faut d'un \u00e9l\u00e9ment avant que l'espace disponible ne soit distribu\u00e9. La valeur peut \u00eatre une unit\u00e9 de mesure ou un mot-cl\u00e9.","title":"flex-basis"},{"location":"notes_de_cours/css_flexbox/#flex","text":"C'est un raccourci pour les propri\u00e9t\u00e9s flex-grow , flex-shrink et flex-basis . Ces deux derniers sont optionnel, on peut sp\u00e9cifi\u00e9 uniquement une valeur pour flex-grow . flex: 2 1 25% /* est \u00e9quivalent \u00e0 */ flex-grow: 2; flex-shrink: 1; flex-basis: 25%;","title":"flex"},{"location":"notes_de_cours/css_flexbox/#align-self","text":"Permet d'outrepasser l'alignement par d\u00e9faut pour un item. Les valeurs possible sont les m\u00eames que pour align-items. #item3 { align-self: flex-end; } source","title":"align-self"},{"location":"notes_de_cours/css_flexbox/#tutoriel-sous-forme-de-jeux","text":"Flexbox Froggy Flexbox Zombies","title":"Tutoriel sous forme de jeux"},{"location":"notes_de_cours/css_flexbox/#sources-et-references","text":"https://css-tricks.com/snippets/css/a-guide-to-flexbox/ https://developer.mozilla.org/fr/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox https://yoksel.github.io/flex-cheatsheet/","title":"Sources et r\u00e9f\u00e9rences"},{"location":"notes_de_cours/css_grid/","text":"CSS Grid La disposition par grille CSS (CSS Grid layout) est comme son nom l'indique une m\u00e9thode de disposition bas\u00e9e sur un syst\u00e8me de grille \u00e0 deux dimensions. On peut le voir comme une feuille Excel avec des lignes et des colonnes. C'est une grosse diff\u00e9rence entre cette m\u00e9thode et Flexbox, qui a plut\u00f4t une disposition unidirectionnelle. Par contre les deux syst\u00e8mes fonctionnent tr\u00e8s bien ensemble. Il n'est pas rare de voir une disposition g\u00e9n\u00e9rale d'une page avec grid et l'alignement des sections avec Flexbox . Tout comme avec Flexbox, on va travailler avec un conteneur de base parent ( Grid container ) et ses items enfants ( Grid items ). Exemple simple de disposition HTML <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Exemple simple de disposition</title> <link rel=\"stylesheet\" href=\"styles/exemple_simple.css\"> </head> <body> <div class=\"grid_container\"> <div class=\"grid_items\">Item 1</div> <div class=\"grid_items\">Item 2</div> <div class=\"grid_items\">Item 3</div> <div class=\"grid_items\">Item 4</div> <div class=\"grid_items\">Item 5</div> <div class=\"grid_items\">Item 6</div> </div> </body> </html> CSS .grid_container { /* D\u00e9termine une disposition grid */ display: grid; /* On d\u00e9termine une disposition sur trois colonnes, la * premi\u00e8re et derni\u00e8re avec une dimension de 150 pixels. * La colonne du milieu s'adaptera \u00e0 l'espace disponible */ grid-template-columns: 150px auto 150px; /* On d\u00e9termine deux lignes de 150 pixels chacune */ grid-template-rows: 150px 150px; /* Il y aura une espace en les enfants de 10 pixels */ grid-gap: 10px; } .grid_items { /* J'utilise ici flexbox sur les items pour * g\u00e9rer l'alignement du contenu */ display: flex; justify-content: center; align-items: center; /* un peu de style pour embellir le tout */ background-color: lightcoral; border-radius: 5px; font-size: 2em; color: #fff; } R\u00e9sultat Propri\u00e9t\u00e9s du Grid Container display Comme avec Flexbox, on dire quel sorte de disposition on utilise pour le container avec la propri\u00e9t\u00e9 display . Avec Css Grid on attribue la valeur grid \u00e0 cette propri\u00e9t\u00e9. .container { display: grid; } grid-template-columns D\u00e9termine le nombre et les dimensions des colonnes de la grille par une liste de valeur. Chaque valeur repr\u00e9sentent \u00e0 la fois un colonne et sa dimension. .container { /* La grille aura deux colonnes, la premi\u00e8re * de 100 pixels et la seconde de 200 pixels */ grid-template-columns: 100px 200px; } Si toutes les colonnes ont la m\u00eame dimension, on peut utiliser repeat() .container { /* Ici la grille aura 10 colonnes de 100 pixels */ grid-template-columns: repeat(10, 100px); } On peut aussi utiliser l'unit\u00e9 de mesure fr qui repr\u00e9sente une fraction de l'espace disponible. .container { /* Ici la grille aura 10 colonnes de largeur \u00e9gale. * La largeur sera redimensionn\u00e9e selon l'espace disponible */ grid-template-columns: repeat(10, 1fr); } .container_large { /* Ici la grille aura 3 colonnes dont celle du milieu * sera 2 fois plus grande que la premi\u00e8re et la derni\u00e8re */ grid-template-columns: 1fr 2fr 1fr } grid-template-rows D\u00e9termine le nombre et les dimensions des lignes de la grille par une liste de valeur. Chaque valeur repr\u00e9sentent \u00e0 la fois une ligne et sa dimension. Les valeurs possible sont exactement les m\u00eames que pour grid-template-columns . grid-template-area Il est aussi possible de construire une repr\u00e9sentation visuelle de la disposition voulue avec la propri\u00e9t\u00e9 grid-template-area . On doit d\u00e9finir un mot-cl\u00e9 pour chaque \"cellule\" de notre grille et ensuite associer chaque item composant la grille \u00e0 un mot-cl\u00e9 avec la propri\u00e9t\u00e9 grid-area . HTML <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Exemple simple de disposition</title> <link rel=\"stylesheet\" href=\"styles/exemple_simple.css\"> </head> <body> <div class=\"grid_container\"> <div class=\"grid_items item1\">Item 1</div> <div class=\"grid_items item2\">Item 2</div> <div class=\"grid_items item3\">Item 3</div> <div class=\"grid_items item4\">Item 4</div> <div class=\"grid_items item5\">Item 5</div> <div class=\"grid_items item6\">Item 6</div> </div> </body> </html> CSS #grid_container { display: grid; grid-template-columns: repeat(4, 1fr); grid-template-rows: repeat(3, 150px); grid-gap: 10px; /* On d\u00e9termine un mot-cl\u00e9 qu'on peut r\u00e9p\u00e9ter en respectant une * disposition rectangulaire. Le . sert \u00e0 laisser la case vide. */ grid-template-areas: \"item1 item2 item3 item4\" \"item1 item5 item5 .\" \"item1 . item6 item6\"; } .grid_items { /* J'utilise ici flexbox sur les items pour * g\u00e9rer l'alignement du contenu */ display: flex; justify-content: center; align-items: center; /* un peu de style pour embellir le tout */ background-color: lightcoral; border-radius: 5px; font-size: 2em; color: #fff; } .item1 { /* On relie le mot-cl\u00e9 avec l'item par la propri\u00e9t\u00e9 grid-area */ grid-area: item1; } .item2 { grid-area: item2; } .item3 { grid-area: item3; } .item4 { grid-area: item4; } .item5 { grid-area: item5; } .item6 { grid-area: item6; } R\u00e9sultat Propri\u00e9t\u00e9 des Grid items grid-column-start, grid-column-end, grid-column Permet de d\u00e9terminer \u00e0 partir de quelle colonne l'item commence et \u00e0 quelle colonne il se termine. Pour d\u00e9terminer le num\u00e9ro de ligne, il faut s'imaginer notre grille qui commence par une ligne avant la premi\u00e8re cellule, comme dans l'image suivante : Donc si on veut que le premier item soit dispos\u00e9 dans les colonnes 1 et 2 de la premi\u00e8re ligne, on aurait les valeurs suivantes : .item1 { grid-column-start: 1; grid-column-end: 3; } On peut faire la m\u00eame chose sur une seule ligne avec la propri\u00e9t\u00e9 grid-column o\u00f9 la valeur est \u00e9gale \u00e0 la colonne du d\u00e9but et de la fin s\u00e9par\u00e9 par le symbole / .item1 { grid-column: 1 / 3; } On peut aussi utilis\u00e9 comme valeur de fin -1, ce qui veut dire que la colonne de fin sera la toute derni\u00e8re, peut-importe le nombre et si on en ajoute en cours de route. .item1 { grid-column: 1 / -1; } grid-row-start, grid-row-end, grid-row C'est la m\u00eame propri\u00e9t\u00e9 que pour le grid-column, mais au niveau des lignes. Sources A Complete Guide to Grid","title":"Grid"},{"location":"notes_de_cours/css_grid/#css-grid","text":"La disposition par grille CSS (CSS Grid layout) est comme son nom l'indique une m\u00e9thode de disposition bas\u00e9e sur un syst\u00e8me de grille \u00e0 deux dimensions. On peut le voir comme une feuille Excel avec des lignes et des colonnes. C'est une grosse diff\u00e9rence entre cette m\u00e9thode et Flexbox, qui a plut\u00f4t une disposition unidirectionnelle. Par contre les deux syst\u00e8mes fonctionnent tr\u00e8s bien ensemble. Il n'est pas rare de voir une disposition g\u00e9n\u00e9rale d'une page avec grid et l'alignement des sections avec Flexbox . Tout comme avec Flexbox, on va travailler avec un conteneur de base parent ( Grid container ) et ses items enfants ( Grid items ).","title":"CSS Grid"},{"location":"notes_de_cours/css_grid/#exemple-simple-de-disposition","text":"HTML <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Exemple simple de disposition</title> <link rel=\"stylesheet\" href=\"styles/exemple_simple.css\"> </head> <body> <div class=\"grid_container\"> <div class=\"grid_items\">Item 1</div> <div class=\"grid_items\">Item 2</div> <div class=\"grid_items\">Item 3</div> <div class=\"grid_items\">Item 4</div> <div class=\"grid_items\">Item 5</div> <div class=\"grid_items\">Item 6</div> </div> </body> </html> CSS .grid_container { /* D\u00e9termine une disposition grid */ display: grid; /* On d\u00e9termine une disposition sur trois colonnes, la * premi\u00e8re et derni\u00e8re avec une dimension de 150 pixels. * La colonne du milieu s'adaptera \u00e0 l'espace disponible */ grid-template-columns: 150px auto 150px; /* On d\u00e9termine deux lignes de 150 pixels chacune */ grid-template-rows: 150px 150px; /* Il y aura une espace en les enfants de 10 pixels */ grid-gap: 10px; } .grid_items { /* J'utilise ici flexbox sur les items pour * g\u00e9rer l'alignement du contenu */ display: flex; justify-content: center; align-items: center; /* un peu de style pour embellir le tout */ background-color: lightcoral; border-radius: 5px; font-size: 2em; color: #fff; } R\u00e9sultat","title":"Exemple simple de disposition"},{"location":"notes_de_cours/css_grid/#proprietes-du-grid-container","text":"","title":"Propri\u00e9t\u00e9s du Grid Container"},{"location":"notes_de_cours/css_grid/#display","text":"Comme avec Flexbox, on dire quel sorte de disposition on utilise pour le container avec la propri\u00e9t\u00e9 display . Avec Css Grid on attribue la valeur grid \u00e0 cette propri\u00e9t\u00e9. .container { display: grid; }","title":"display"},{"location":"notes_de_cours/css_grid/#grid-template-columns","text":"D\u00e9termine le nombre et les dimensions des colonnes de la grille par une liste de valeur. Chaque valeur repr\u00e9sentent \u00e0 la fois un colonne et sa dimension. .container { /* La grille aura deux colonnes, la premi\u00e8re * de 100 pixels et la seconde de 200 pixels */ grid-template-columns: 100px 200px; } Si toutes les colonnes ont la m\u00eame dimension, on peut utiliser repeat() .container { /* Ici la grille aura 10 colonnes de 100 pixels */ grid-template-columns: repeat(10, 100px); } On peut aussi utiliser l'unit\u00e9 de mesure fr qui repr\u00e9sente une fraction de l'espace disponible. .container { /* Ici la grille aura 10 colonnes de largeur \u00e9gale. * La largeur sera redimensionn\u00e9e selon l'espace disponible */ grid-template-columns: repeat(10, 1fr); } .container_large { /* Ici la grille aura 3 colonnes dont celle du milieu * sera 2 fois plus grande que la premi\u00e8re et la derni\u00e8re */ grid-template-columns: 1fr 2fr 1fr }","title":"grid-template-columns"},{"location":"notes_de_cours/css_grid/#grid-template-rows","text":"D\u00e9termine le nombre et les dimensions des lignes de la grille par une liste de valeur. Chaque valeur repr\u00e9sentent \u00e0 la fois une ligne et sa dimension. Les valeurs possible sont exactement les m\u00eames que pour grid-template-columns .","title":"grid-template-rows"},{"location":"notes_de_cours/css_grid/#grid-template-area","text":"Il est aussi possible de construire une repr\u00e9sentation visuelle de la disposition voulue avec la propri\u00e9t\u00e9 grid-template-area . On doit d\u00e9finir un mot-cl\u00e9 pour chaque \"cellule\" de notre grille et ensuite associer chaque item composant la grille \u00e0 un mot-cl\u00e9 avec la propri\u00e9t\u00e9 grid-area . HTML <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Exemple simple de disposition</title> <link rel=\"stylesheet\" href=\"styles/exemple_simple.css\"> </head> <body> <div class=\"grid_container\"> <div class=\"grid_items item1\">Item 1</div> <div class=\"grid_items item2\">Item 2</div> <div class=\"grid_items item3\">Item 3</div> <div class=\"grid_items item4\">Item 4</div> <div class=\"grid_items item5\">Item 5</div> <div class=\"grid_items item6\">Item 6</div> </div> </body> </html> CSS #grid_container { display: grid; grid-template-columns: repeat(4, 1fr); grid-template-rows: repeat(3, 150px); grid-gap: 10px; /* On d\u00e9termine un mot-cl\u00e9 qu'on peut r\u00e9p\u00e9ter en respectant une * disposition rectangulaire. Le . sert \u00e0 laisser la case vide. */ grid-template-areas: \"item1 item2 item3 item4\" \"item1 item5 item5 .\" \"item1 . item6 item6\"; } .grid_items { /* J'utilise ici flexbox sur les items pour * g\u00e9rer l'alignement du contenu */ display: flex; justify-content: center; align-items: center; /* un peu de style pour embellir le tout */ background-color: lightcoral; border-radius: 5px; font-size: 2em; color: #fff; } .item1 { /* On relie le mot-cl\u00e9 avec l'item par la propri\u00e9t\u00e9 grid-area */ grid-area: item1; } .item2 { grid-area: item2; } .item3 { grid-area: item3; } .item4 { grid-area: item4; } .item5 { grid-area: item5; } .item6 { grid-area: item6; } R\u00e9sultat","title":"grid-template-area"},{"location":"notes_de_cours/css_grid/#propriete-des-grid-items","text":"","title":"Propri\u00e9t\u00e9 des Grid items"},{"location":"notes_de_cours/css_grid/#grid-column-start-grid-column-end-grid-column","text":"Permet de d\u00e9terminer \u00e0 partir de quelle colonne l'item commence et \u00e0 quelle colonne il se termine. Pour d\u00e9terminer le num\u00e9ro de ligne, il faut s'imaginer notre grille qui commence par une ligne avant la premi\u00e8re cellule, comme dans l'image suivante : Donc si on veut que le premier item soit dispos\u00e9 dans les colonnes 1 et 2 de la premi\u00e8re ligne, on aurait les valeurs suivantes : .item1 { grid-column-start: 1; grid-column-end: 3; } On peut faire la m\u00eame chose sur une seule ligne avec la propri\u00e9t\u00e9 grid-column o\u00f9 la valeur est \u00e9gale \u00e0 la colonne du d\u00e9but et de la fin s\u00e9par\u00e9 par le symbole / .item1 { grid-column: 1 / 3; } On peut aussi utilis\u00e9 comme valeur de fin -1, ce qui veut dire que la colonne de fin sera la toute derni\u00e8re, peut-importe le nombre et si on en ajoute en cours de route. .item1 { grid-column: 1 / -1; }","title":"grid-column-start, grid-column-end, grid-column"},{"location":"notes_de_cours/css_grid/#grid-row-start-grid-row-end-grid-row","text":"C'est la m\u00eame propri\u00e9t\u00e9 que pour le grid-column, mais au niveau des lignes.","title":"grid-row-start, grid-row-end, grid-row"},{"location":"notes_de_cours/css_grid/#sources","text":"A Complete Guide to Grid","title":"Sources"},{"location":"notes_de_cours/css_variable/","text":"Les variables CSS On peut maintenant utiliser des variables nativement en css, aussi appel\u00e9 css custom properties . D\u00e9claration et utilisation On va d\u00e9clarer la variable comme on le fait avec n'importe quel propri\u00e9t\u00e9 en css en utilisant -- suivie du nom de la variable. --nom-variable: valeur-variable; ensuite on utiliser la fonction var() pour utiliser la valeur de la variable. propri\u00e9t\u00e9-css : var(--nom-variable); Dans cet exemple on va mettre un couleur dans une variable et l'utiliser pour comme couleur de texte de toutes nos balise h1 : :root { --couleur-texte: #6495ed; } h1 { color: var(--couleur-texte); } Fait \u00e0 noter ici, :root repr\u00e9sente l'\u00e9l\u00e9ment \"racine\" de notre page, le plus haut niveau de visibilit\u00e9 pour notre variable. En effet l'endroit o\u00f9 est d\u00e9clar\u00e9 la variable importe sur \u00e7a visibilit\u00e9. C'est les m\u00eame r\u00e8gles qui s'applique que pour la priorit\u00e9 des propri\u00e9t\u00e9s css. body { color: var(--couleur-texte); } h1 { --couleur-texte: #dc143c; color: var(--couleur-texte); } Dans cet exemple, je veux appliquer comme couleur de texte \u00e0 tous les \u00e9l\u00e9ments de body, mais la variable est d\u00e9clar\u00e9 pour les balises h1, elle ne sera utilisable que dans les balises h1 (et ses enfants s'il y en a). On peut avec la fonction var() utiliser une valeur par d\u00e9faut pour r\u00e9soudre le probl\u00e8me rencontr\u00e9 ici, sinon la couleur du texte restera celle par d\u00e9faut. body { color: var(--couleur-texte, red); /* ici si la variable n'est pas trouv\u00e9 le texte sera rouge */ } Les variables CSS sont souvent utilis\u00e9 pour cr\u00e9er facilement des th\u00e8mes de couleur. Dans cet exemple, on d\u00e9fini un style de base pour un bouton en utilisant des variables avec valeur par d\u00e9faut. Ensuite on cr\u00e9e des classes pour facilement ajuster le style du bouton au besoin Le code html <button class=\"bouton\">Standart</button> <button class=\"bouton bouton-success\">Succ\u00e8s</button> <button class=\"bouton bouton-erreur\">Erreur</button> <button class=\"bouton bouton-success bouton-large\">Mega Succ\u00e8s!!</button> Le style css .bouton { margin: 1em; font-size: 1.5em; border: none; cursor: pointer; border-radius: 0.4em; background: var(--btn-couleur-fond, #d3d3d3); color: var(--btn-couleur-texte, #000); padding: var(--btn-largeur, 1em); } .bouton-success { --btn-couleur-fond: #62f567; } .bouton-erreur { --btn-couleur-fond: red; --btn-couleur-texte: white; } .bouton-large { --btn-largeur: 2em; } Le r\u00e9sultat On peut utiliser aussi utiliser les variables dans les animations et les media queries Exemple d'animation : https://codepen.io/hamzaiqbal/pen/jzPRRL HTML <section class=\"animation\"> <div class=\"block-1\"> </div> <div class=\"block-2\"> </div> </section> CSS .animation div { width: 200px; height: 200px; animation: bg-animation 1s infinite alternate; display: inline-block; } .block-1 { --bg-1: #1989AC; --bg-2: #283E56; } .block-2 { --bg-1: #F12B6B; --bg-2: #970747; } @keyframes bg-animation { from { background: var(--bg-1); } to { background: var(--bg-2); } } Ce qu'on ne peut pas faire Inscrire en texte le chemin d'acc\u00e8s \u00e0 un fichier Quand on veut mettre le chemin vers un fichier dans une variable, on doit utiliser la fonction url() avec en param\u00e8tre la destination comme valeur. :root { --image-fond-invalide: 'img/mon_image.png'; --image-fond-valide: url('img/mon_image.png'); } body { background: url(var(--image-fond-invalide)); /* Commande invalide */ background: url(var(--image-fond-valide)); /* Commande valide */ } Unit\u00e9 num\u00e9rique On ne peut pas d\u00e9finir un nombre comme unit\u00e9 et ensuite lui accol\u00e9 le type d'unit\u00e9 h1 { /* Invalide */ --taille-police: 2; font-size: var(--taille-police)em; } h1 { /* Valide */ --taille-police: 2em; font-size: var(--taille-police); } On pourrait contourner le probl\u00e8me avec la fonction calc() qui nous permet d'effectuer un calcul et d'utiliser le r\u00e9sultat en valeur : h1 { --taille-police: 2; font-size: calc(var(--taille-police) * 1em); } Comme nom de s\u00e9lecteur ou un nom de propri\u00e9t\u00e9 On ne peut pas mettre le nom d'un s\u00e9lecteur dans une variable et ensuite l'utiliser :root { --mes-titres: h1; --taille-police: font-size; } /* Invalide */ var(--mes-titres) { color: red; } /* Invalide */ h1 { var(--taille-police): 2em; } Dans les crit\u00e8res d'une media queries On ne peut pas utiliser une variable dans la requ\u00eate d'une media query. :root { --taille-ecran: 768px; } /* Non valide */ @media (min-width: var(--taille-ecran)) { ... } Ne pas assigner de valeur Quand on initialise une variable, on doit absolument lui assigner une valeur.","title":"Variables"},{"location":"notes_de_cours/css_variable/#les-variables-css","text":"On peut maintenant utiliser des variables nativement en css, aussi appel\u00e9 css custom properties .","title":"Les variables CSS"},{"location":"notes_de_cours/css_variable/#declaration-et-utilisation","text":"On va d\u00e9clarer la variable comme on le fait avec n'importe quel propri\u00e9t\u00e9 en css en utilisant -- suivie du nom de la variable. --nom-variable: valeur-variable; ensuite on utiliser la fonction var() pour utiliser la valeur de la variable. propri\u00e9t\u00e9-css : var(--nom-variable); Dans cet exemple on va mettre un couleur dans une variable et l'utiliser pour comme couleur de texte de toutes nos balise h1 : :root { --couleur-texte: #6495ed; } h1 { color: var(--couleur-texte); } Fait \u00e0 noter ici, :root repr\u00e9sente l'\u00e9l\u00e9ment \"racine\" de notre page, le plus haut niveau de visibilit\u00e9 pour notre variable. En effet l'endroit o\u00f9 est d\u00e9clar\u00e9 la variable importe sur \u00e7a visibilit\u00e9. C'est les m\u00eame r\u00e8gles qui s'applique que pour la priorit\u00e9 des propri\u00e9t\u00e9s css. body { color: var(--couleur-texte); } h1 { --couleur-texte: #dc143c; color: var(--couleur-texte); } Dans cet exemple, je veux appliquer comme couleur de texte \u00e0 tous les \u00e9l\u00e9ments de body, mais la variable est d\u00e9clar\u00e9 pour les balises h1, elle ne sera utilisable que dans les balises h1 (et ses enfants s'il y en a). On peut avec la fonction var() utiliser une valeur par d\u00e9faut pour r\u00e9soudre le probl\u00e8me rencontr\u00e9 ici, sinon la couleur du texte restera celle par d\u00e9faut. body { color: var(--couleur-texte, red); /* ici si la variable n'est pas trouv\u00e9 le texte sera rouge */ } Les variables CSS sont souvent utilis\u00e9 pour cr\u00e9er facilement des th\u00e8mes de couleur. Dans cet exemple, on d\u00e9fini un style de base pour un bouton en utilisant des variables avec valeur par d\u00e9faut. Ensuite on cr\u00e9e des classes pour facilement ajuster le style du bouton au besoin Le code html <button class=\"bouton\">Standart</button> <button class=\"bouton bouton-success\">Succ\u00e8s</button> <button class=\"bouton bouton-erreur\">Erreur</button> <button class=\"bouton bouton-success bouton-large\">Mega Succ\u00e8s!!</button> Le style css .bouton { margin: 1em; font-size: 1.5em; border: none; cursor: pointer; border-radius: 0.4em; background: var(--btn-couleur-fond, #d3d3d3); color: var(--btn-couleur-texte, #000); padding: var(--btn-largeur, 1em); } .bouton-success { --btn-couleur-fond: #62f567; } .bouton-erreur { --btn-couleur-fond: red; --btn-couleur-texte: white; } .bouton-large { --btn-largeur: 2em; } Le r\u00e9sultat On peut utiliser aussi utiliser les variables dans les animations et les media queries Exemple d'animation : https://codepen.io/hamzaiqbal/pen/jzPRRL HTML <section class=\"animation\"> <div class=\"block-1\"> </div> <div class=\"block-2\"> </div> </section> CSS .animation div { width: 200px; height: 200px; animation: bg-animation 1s infinite alternate; display: inline-block; } .block-1 { --bg-1: #1989AC; --bg-2: #283E56; } .block-2 { --bg-1: #F12B6B; --bg-2: #970747; } @keyframes bg-animation { from { background: var(--bg-1); } to { background: var(--bg-2); } }","title":"D\u00e9claration et utilisation"},{"location":"notes_de_cours/css_variable/#ce-quon-ne-peut-pas-faire","text":"","title":"Ce qu'on ne peut pas faire"},{"location":"notes_de_cours/css_variable/#inscrire-en-texte-le-chemin-dacces-a-un-fichier","text":"Quand on veut mettre le chemin vers un fichier dans une variable, on doit utiliser la fonction url() avec en param\u00e8tre la destination comme valeur. :root { --image-fond-invalide: 'img/mon_image.png'; --image-fond-valide: url('img/mon_image.png'); } body { background: url(var(--image-fond-invalide)); /* Commande invalide */ background: url(var(--image-fond-valide)); /* Commande valide */ }","title":"Inscrire en texte le chemin d'acc\u00e8s \u00e0 un fichier"},{"location":"notes_de_cours/css_variable/#unite-numerique","text":"On ne peut pas d\u00e9finir un nombre comme unit\u00e9 et ensuite lui accol\u00e9 le type d'unit\u00e9 h1 { /* Invalide */ --taille-police: 2; font-size: var(--taille-police)em; } h1 { /* Valide */ --taille-police: 2em; font-size: var(--taille-police); } On pourrait contourner le probl\u00e8me avec la fonction calc() qui nous permet d'effectuer un calcul et d'utiliser le r\u00e9sultat en valeur : h1 { --taille-police: 2; font-size: calc(var(--taille-police) * 1em); }","title":"Unit\u00e9 num\u00e9rique"},{"location":"notes_de_cours/css_variable/#comme-nom-de-selecteur-ou-un-nom-de-propriete","text":"On ne peut pas mettre le nom d'un s\u00e9lecteur dans une variable et ensuite l'utiliser :root { --mes-titres: h1; --taille-police: font-size; } /* Invalide */ var(--mes-titres) { color: red; } /* Invalide */ h1 { var(--taille-police): 2em; }","title":"Comme nom de s\u00e9lecteur ou un nom de propri\u00e9t\u00e9"},{"location":"notes_de_cours/css_variable/#dans-les-criteres-dune-media-queries","text":"On ne peut pas utiliser une variable dans la requ\u00eate d'une media query. :root { --taille-ecran: 768px; } /* Non valide */ @media (min-width: var(--taille-ecran)) { ... }","title":"Dans les crit\u00e8res d'une media queries"},{"location":"notes_de_cours/css_variable/#ne-pas-assigner-de-valeur","text":"Quand on initialise une variable, on doit absolument lui assigner une valeur.","title":"Ne pas assigner de valeur"},{"location":"notes_de_cours/form/","text":"Les formulaires HTML Les formulaires HTML sont utiliss pour \u00e9changer de l'informations entre les usagers et le site web qu'ils visitent. Ils sont compos\u00e9s de plusieurs \u00e9l\u00e9ments html (input, select) qui permettent \u00e0 l'utilisateur de saisir l'information \u00e0 envoyer. Elle sera ensuite transmise vers un serveur web o\u00f9 elle sera trait\u00e9e. Structure d'un formulaire L'\u00e9l\u00e9ment form \u00c9l\u00e9ment essentiel \u00e0 tout formulaire, la balise form est en quelque sorte le conteneur de notre formulaire. Tous ce qui si retrouve sera trait\u00e9 comme faisant partie du formulaire. Elle a deux attributs sp\u00e9cifiques qui dictent la fa\u00e7on dont le formulaire va envoyer l'information au serveur : action et method. Exemple <form id=\"formulaire_contact\" method=\"post\" action=\"/traitement.php\"> <!-- Contenu de mon formulaire --> </form> action L'attribut action prend comme valeur une URL vers laquelle les donn\u00e9es seront achemin\u00e9es. method L'attribut method d\u00e9fini de quelle fa\u00e7on les donn\u00e9es seront achemin\u00e9es. Les valeurs possibles sont GET ou POST. GET Les donn\u00e9es sont incluses dans l'URL d\u00e9fini par l'attribut action. l'URL se termine par un symbole ? suivi d'une s\u00e9rie de paire nom/valeur pour chaque contr\u00f4le, le tout s\u00e9par\u00e9 par le symbole &. \u00c9tant donn\u00e9 que les informations envoy\u00e9es au serveur sont lisible directement dans l'url de la requ\u00eate, cette m\u00e9thode n'est pas tr\u00e8s s\u00e9curitaire au niveau de la protection des donn\u00e9es et devraient \u00eatre utilis\u00e9 dans certain cas pr\u00e9cis, comme par exemple une recherche de produits dans un magasin en ligne. Voici un exemple de requ\u00eate d'une recherche Google o\u00f9 on peut tr\u00e8s bien le voir : https://www.google.com/search?client=firefox-b-d&q=petit+chats. La requ\u00eate est envoy\u00e9 \u00e0 l'adresse www.google.com/search avec les informations client=firefox-b-d (mon navigateur) et q=petit+chats (ma recherche). POST Sans entrer dans les d\u00e9tails, dans une requ\u00eate post les donn\u00e9es sont incluses dans le corps de la requ\u00eate. Les donn\u00e9es ne sont pas explicitement vu par l'usager et \u00e7a nous permet d'envoyer une plus grande quantit\u00e9 d'informations. C'est cette m\u00e9thode que nous allons privil\u00e9gi\u00e9e. L'\u00e9l\u00e9ment button Pour permettre \u00e0 l'usager de soumettre son formulaire, l'usage le plus courant est d'ajouter un bouton \u00e0 la toute fin de notre formulaire, juste avant la fermeture de la balise form. Le bouton \u00e0 un attribut type qu'on va utiliser pour d\u00e9finir son comportement dans le formulaire : submit : En cliquant sur un bouton avec le type submit, les donn\u00e9es du formulaire seront envoy\u00e9es vers la page d\u00e9finie par l'attribut action de l'\u00e9l\u00e9ment form. reset : Tous les contr\u00f4les du formulaire seront r\u00e9initialis\u00e9s \u00e0 leur valeur par d\u00e9faut. button : \u00c0 utiliser pour cr\u00e9er un bouton r\u00e9gulier. Maintenant qu'on a un \u00e9l\u00e9ment form et un bouton pour soumettre notre formulaire, on va ajouter les diff\u00e9rents \u00e9l\u00e9ments de saisies d'informations. Les \u00e9l\u00e9ments de saisies de donn\u00e9es Il existe plusieurs \u00e9l\u00e9ments HTML qu'on peut utiliser pour saisir les donn\u00e9es de l'utilisateurs : input, textarea, select, etc... L'important \u00e0 se rappeler est que peut importe l'\u00e9l\u00e9ment utilis\u00e9, on doit toujours lui d\u00e9finir l'attribut name avec une valeur unique au formulaire, sinon les informations ne seront pas transmissent au serveur. L'\u00e9l\u00e9ment label L'\u00e9l\u00e9ment label n'est pas essentiel mais c'est une bonne pratique de toujours en associ\u00e9 un \u00e0 chacun de nos \u00e9l\u00e9ments de saisie. Le label est utilis\u00e9 par les options d'accessibilit\u00e9 comme les lecteurs d'\u00e9cran. En cliquant sur le label, on donne le focus \u00e0 l'\u00e9l\u00e9ment qui lui est li\u00e9. Pour relier un label \u00e0 un \u00e9l\u00e9ment, on utilise la balise for qui doit correspondre \u00e0 la valeur de la balise id de l'\u00e9l\u00e9ment \u00e0 lier. <!-- La valeur nom est utili\u00e9 pour l'attribut for du label et id du input, les deux \u00e9l\u00e9ments sont ainsi li\u00e9s --> <label for=\"nom\">Nom :</label> <input type=\"text\" id=\"nom\" name=\"nom_usager\"> L'\u00e9l\u00e9ment input L'\u00e9l\u00e9ment input est le plus utilis\u00e9 dans la cr\u00e9ation de formulaire, il peut prendre plusieurs formes gr\u00e2ce \u00e0 son attribut type . Voici un lien qui dresse une liste compl\u00e8te des diff\u00e9rentes valeurs que peut prendre type : https://developer.mozilla.org/fr/docs/Web/HTML/Element/Input. L'\u00e9l\u00e9ment textarea Un textarea est un \u00e9l\u00e9ment qui nous permet de saisir du texte sur plusieurs lignes. Un particularit\u00e9 de cet \u00e9l\u00e9ment est qu'au contraire de la balise input, ou doit ajouter une fermeture de la balise. <!-- input ne demande pas de fermeture de balise --> <label for=\"nom\">Nom :</label> <input type=\"text\" id=\"nom\" name=\"nom_usager\"> <!-- textarea en requiert une --> <label for=\"message\">Message :</label> <textarea id=\"message\" name=\"message\"></textarea> L'\u00e9l\u00e9ment select Select permet d'afficher une liste d\u00e9roulante de choix pr\u00e9d\u00e9finis. Pour ajouter les options de la liste, on utilise la balise option <select name=\"classe_perso\" id=\"classe_perso\"> <option value=\"1\">Guerrier</option> <option value=\"2\">Healer</option> <option value=\"3\">Sniper</option> <option value=\"4\">Rogue</option> </select> Mise en forme du formulaire On peut modifier apparence de notre formulaire et la plupart de ses \u00e9l\u00e9ments avec des r\u00e8gles css. Tout ce qui touche le texte et les polices de caract\u00e8res sont utilisable. On aussi facilement modifier l'apparence des \"boites\" des \u00e9l\u00e9ments avec les propri\u00e9t\u00e9s associ\u00e9es comme padding, marging, border, etc. On ne fera pas le tour de toutes les possibilit\u00e9s mais voici quelques ressources pour vous guider : https://developer.mozilla.org/fr/docs/Learn/Forms/Styling_web_forms https://www.w3schools.com/css/css_form.asp https://blog.logrocket.com/how-to-style-forms-with-css-a-beginners-guide/ Pseudo-classe On peut aussi utiliser des pseudo-classes pour modifier l'apparence des \u00e9l\u00e9ments du formulaire selon leur \u00e9tat. Les plus pertinentes sont les suivantes : :focus Applicable quand l'\u00e9l\u00e9ment est s\u00e9lectionn\u00e9. Peut nous permettre par exemple de donner un effet \"de surlignement\" de l'\u00e9l\u00e9ment que l'usager est en train de remplir. :required Applicable uniquement quand l'\u00e9l\u00e9ment \u00e0 l'attribut required et qu'il \u00e0 comme valeur True. Peut \u00eatre utile si on veut avoir une mise en forme diff\u00e9rente pour les \u00e9l\u00e9ments obligatoires. :invalid Applicable quand l'usager \u00e0 saisie une valeur invalide, comme par exemple une adresse courriel non conforme dans un \u00e9l\u00e9ment input de type courriel. Validation de formulaire en HTML On peut en HTML uniquement impl\u00e9menter une premi\u00e8re \"couche\" de validation en utilisant certain attributs sp\u00e9cifiques. Il faut garder \u00e0 l'esprit que cette validation est basique et ne devrait pas \u00eatre utilis\u00e9 seule. L'attribut type Il existe maintenant pour l'attribut type de l'\u00e9l\u00e9ment input une multitude de valeur possible qui permet de sp\u00e9cifier le type de valeur souhait\u00e9 et en m\u00eame temps de faire une validation. <!-- Input qui demande une adresse de courriel --> <input type=\"email\" id=\"email\" name=\"email_usager\" placeholder=\"Entrez une adresse courriel valide\"> L'attribut required Indique qu'une valeur doit \u00eatre saisie pour l'\u00e9l\u00e9ment avant l'envoi du formulaire. Selon le navigateur utilis\u00e9 un message d'erreur sera affich\u00e9. <label for=\"email\">e-mail</label> <input type=\"email\" id=\"email\" name=\"email_usager\" required> R\u00e9sultat lors de l'envoi du formulaire L'attribut pattern On peut avec l'attribut pattern d\u00e9finir notre propre format de texte accept\u00e9. Pattern prend comme valeur une expression r\u00e9guli\u00e8re. Il est tr\u00e8s important d'informer l'utilisateur du format \u00e0 respecter, soit avec la balise title ou en ajoutant un court texte explicatif. <label for=\"ipv4\">Courriel</label> <input type=\"text\" id=\"ipv4\" name=\"ipv4\" pattern=\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\" required title=\"Adresse IPv4\"> <p>Veuillez entrer une adresse IPv4 au format xxx.xxx.xxx.xxx</p> R\u00e9f\u00e9rence : https://regexr.com/ Validation de formulaire en Javascript Il y a plusieurs m\u00e9thode pour valider nos formulaire en Javascript. Nous allons nous en tenir \u00e0 deux m\u00e9thodes qui se rapproche de ce qu'on fait d\u00e9j\u00e0 en utilisant l'action submit du formulaire. L'avantage majeur d'utiliser Javascript est que \u00e7a nous permet de faire une validation beaucoup plus pr\u00e9cise et efficace. onsubmit La premi\u00e8re m\u00e9thode est d'utiliser onsubmit dans la balise form pour appeler une fonction Javascript lors du \"submit\" du formulaire. La fonction doit \u00eatre appeler de la fa\u00e7on suivante et retourner true ou false : HTML <form action=\"traitement.php\" method=\"post\" onsubmit=\"return ValidationOnSubmit()\"> Javascript function ValidationOnSubmit() { let formValide = false; // Traitement de validation return formValide; } Un retour de la valeur false va emp\u00eacher le submit et une valeur true va au contraire l'autoriser. preventDefault La seconde m\u00e9thode est d'utiliser la m\u00e9thode preventDefault associ\u00e9e au formulaire pour bloqu\u00e9 le comportement du \"submit\" et ensuite faire notre validation. Un fois la validation effectu\u00e9e, on peut relancer un submit depuis notre script. La fonction de validation sera appel\u00e9 quand l'\u00e9v\u00e9nement submit de notre formulaire sera d\u00e9clench\u00e9. On utilisera un addEventListener pour ce faire : monFormulaire.addEventListener('submit', function ValidationFormulaire(e) { // Annule le comportement par d\u00e9faut du submit e.preventDefault(); let formValide = false; // Traitement de validation if (formValide) { // On relance un submit monFormulaire.submit(); } }); R\u00e9f\u00e9rences https://developer.mozilla.org/fr/docs/Learn/Forms/Form_validation https://www.tutorialspoint.com/javascript/javascript_form_validations.htm https://www.javascripttutorial.net/javascript-dom/javascript-form-validation/ https://www.w3schools.com/js/js_validation.asp","title":"Les formulaires HTML"},{"location":"notes_de_cours/form/#les-formulaires-html","text":"Les formulaires HTML sont utiliss pour \u00e9changer de l'informations entre les usagers et le site web qu'ils visitent. Ils sont compos\u00e9s de plusieurs \u00e9l\u00e9ments html (input, select) qui permettent \u00e0 l'utilisateur de saisir l'information \u00e0 envoyer. Elle sera ensuite transmise vers un serveur web o\u00f9 elle sera trait\u00e9e.","title":"Les formulaires HTML"},{"location":"notes_de_cours/form/#structure-dun-formulaire","text":"","title":"Structure d'un formulaire"},{"location":"notes_de_cours/form/#lelement-form","text":"\u00c9l\u00e9ment essentiel \u00e0 tout formulaire, la balise form est en quelque sorte le conteneur de notre formulaire. Tous ce qui si retrouve sera trait\u00e9 comme faisant partie du formulaire. Elle a deux attributs sp\u00e9cifiques qui dictent la fa\u00e7on dont le formulaire va envoyer l'information au serveur : action et method. Exemple <form id=\"formulaire_contact\" method=\"post\" action=\"/traitement.php\"> <!-- Contenu de mon formulaire --> </form>","title":"L'\u00e9l\u00e9ment form"},{"location":"notes_de_cours/form/#action","text":"L'attribut action prend comme valeur une URL vers laquelle les donn\u00e9es seront achemin\u00e9es.","title":"action"},{"location":"notes_de_cours/form/#method","text":"L'attribut method d\u00e9fini de quelle fa\u00e7on les donn\u00e9es seront achemin\u00e9es. Les valeurs possibles sont GET ou POST.","title":"method"},{"location":"notes_de_cours/form/#get","text":"Les donn\u00e9es sont incluses dans l'URL d\u00e9fini par l'attribut action. l'URL se termine par un symbole ? suivi d'une s\u00e9rie de paire nom/valeur pour chaque contr\u00f4le, le tout s\u00e9par\u00e9 par le symbole &. \u00c9tant donn\u00e9 que les informations envoy\u00e9es au serveur sont lisible directement dans l'url de la requ\u00eate, cette m\u00e9thode n'est pas tr\u00e8s s\u00e9curitaire au niveau de la protection des donn\u00e9es et devraient \u00eatre utilis\u00e9 dans certain cas pr\u00e9cis, comme par exemple une recherche de produits dans un magasin en ligne. Voici un exemple de requ\u00eate d'une recherche Google o\u00f9 on peut tr\u00e8s bien le voir : https://www.google.com/search?client=firefox-b-d&q=petit+chats. La requ\u00eate est envoy\u00e9 \u00e0 l'adresse www.google.com/search avec les informations client=firefox-b-d (mon navigateur) et q=petit+chats (ma recherche).","title":"GET"},{"location":"notes_de_cours/form/#post","text":"Sans entrer dans les d\u00e9tails, dans une requ\u00eate post les donn\u00e9es sont incluses dans le corps de la requ\u00eate. Les donn\u00e9es ne sont pas explicitement vu par l'usager et \u00e7a nous permet d'envoyer une plus grande quantit\u00e9 d'informations. C'est cette m\u00e9thode que nous allons privil\u00e9gi\u00e9e.","title":"POST"},{"location":"notes_de_cours/form/#lelement-button","text":"Pour permettre \u00e0 l'usager de soumettre son formulaire, l'usage le plus courant est d'ajouter un bouton \u00e0 la toute fin de notre formulaire, juste avant la fermeture de la balise form. Le bouton \u00e0 un attribut type qu'on va utiliser pour d\u00e9finir son comportement dans le formulaire : submit : En cliquant sur un bouton avec le type submit, les donn\u00e9es du formulaire seront envoy\u00e9es vers la page d\u00e9finie par l'attribut action de l'\u00e9l\u00e9ment form. reset : Tous les contr\u00f4les du formulaire seront r\u00e9initialis\u00e9s \u00e0 leur valeur par d\u00e9faut. button : \u00c0 utiliser pour cr\u00e9er un bouton r\u00e9gulier. Maintenant qu'on a un \u00e9l\u00e9ment form et un bouton pour soumettre notre formulaire, on va ajouter les diff\u00e9rents \u00e9l\u00e9ments de saisies d'informations.","title":"L'\u00e9l\u00e9ment button"},{"location":"notes_de_cours/form/#les-elements-de-saisies-de-donnees","text":"Il existe plusieurs \u00e9l\u00e9ments HTML qu'on peut utiliser pour saisir les donn\u00e9es de l'utilisateurs : input, textarea, select, etc... L'important \u00e0 se rappeler est que peut importe l'\u00e9l\u00e9ment utilis\u00e9, on doit toujours lui d\u00e9finir l'attribut name avec une valeur unique au formulaire, sinon les informations ne seront pas transmissent au serveur.","title":"Les \u00e9l\u00e9ments de saisies de donn\u00e9es"},{"location":"notes_de_cours/form/#lelement-label","text":"L'\u00e9l\u00e9ment label n'est pas essentiel mais c'est une bonne pratique de toujours en associ\u00e9 un \u00e0 chacun de nos \u00e9l\u00e9ments de saisie. Le label est utilis\u00e9 par les options d'accessibilit\u00e9 comme les lecteurs d'\u00e9cran. En cliquant sur le label, on donne le focus \u00e0 l'\u00e9l\u00e9ment qui lui est li\u00e9. Pour relier un label \u00e0 un \u00e9l\u00e9ment, on utilise la balise for qui doit correspondre \u00e0 la valeur de la balise id de l'\u00e9l\u00e9ment \u00e0 lier. <!-- La valeur nom est utili\u00e9 pour l'attribut for du label et id du input, les deux \u00e9l\u00e9ments sont ainsi li\u00e9s --> <label for=\"nom\">Nom :</label> <input type=\"text\" id=\"nom\" name=\"nom_usager\">","title":"L'\u00e9l\u00e9ment label"},{"location":"notes_de_cours/form/#lelement-input","text":"L'\u00e9l\u00e9ment input est le plus utilis\u00e9 dans la cr\u00e9ation de formulaire, il peut prendre plusieurs formes gr\u00e2ce \u00e0 son attribut type . Voici un lien qui dresse une liste compl\u00e8te des diff\u00e9rentes valeurs que peut prendre type : https://developer.mozilla.org/fr/docs/Web/HTML/Element/Input.","title":"L'\u00e9l\u00e9ment input"},{"location":"notes_de_cours/form/#lelement-textarea","text":"Un textarea est un \u00e9l\u00e9ment qui nous permet de saisir du texte sur plusieurs lignes. Un particularit\u00e9 de cet \u00e9l\u00e9ment est qu'au contraire de la balise input, ou doit ajouter une fermeture de la balise. <!-- input ne demande pas de fermeture de balise --> <label for=\"nom\">Nom :</label> <input type=\"text\" id=\"nom\" name=\"nom_usager\"> <!-- textarea en requiert une --> <label for=\"message\">Message :</label> <textarea id=\"message\" name=\"message\"></textarea>","title":"L'\u00e9l\u00e9ment textarea"},{"location":"notes_de_cours/form/#lelement-select","text":"Select permet d'afficher une liste d\u00e9roulante de choix pr\u00e9d\u00e9finis. Pour ajouter les options de la liste, on utilise la balise option <select name=\"classe_perso\" id=\"classe_perso\"> <option value=\"1\">Guerrier</option> <option value=\"2\">Healer</option> <option value=\"3\">Sniper</option> <option value=\"4\">Rogue</option> </select>","title":"L'\u00e9l\u00e9ment select"},{"location":"notes_de_cours/form/#mise-en-forme-du-formulaire","text":"On peut modifier apparence de notre formulaire et la plupart de ses \u00e9l\u00e9ments avec des r\u00e8gles css. Tout ce qui touche le texte et les polices de caract\u00e8res sont utilisable. On aussi facilement modifier l'apparence des \"boites\" des \u00e9l\u00e9ments avec les propri\u00e9t\u00e9s associ\u00e9es comme padding, marging, border, etc. On ne fera pas le tour de toutes les possibilit\u00e9s mais voici quelques ressources pour vous guider : https://developer.mozilla.org/fr/docs/Learn/Forms/Styling_web_forms https://www.w3schools.com/css/css_form.asp https://blog.logrocket.com/how-to-style-forms-with-css-a-beginners-guide/","title":"Mise en forme du formulaire"},{"location":"notes_de_cours/form/#pseudo-classe","text":"On peut aussi utiliser des pseudo-classes pour modifier l'apparence des \u00e9l\u00e9ments du formulaire selon leur \u00e9tat. Les plus pertinentes sont les suivantes :","title":"Pseudo-classe"},{"location":"notes_de_cours/form/#focus","text":"Applicable quand l'\u00e9l\u00e9ment est s\u00e9lectionn\u00e9. Peut nous permettre par exemple de donner un effet \"de surlignement\" de l'\u00e9l\u00e9ment que l'usager est en train de remplir.","title":":focus"},{"location":"notes_de_cours/form/#required","text":"Applicable uniquement quand l'\u00e9l\u00e9ment \u00e0 l'attribut required et qu'il \u00e0 comme valeur True. Peut \u00eatre utile si on veut avoir une mise en forme diff\u00e9rente pour les \u00e9l\u00e9ments obligatoires.","title":":required"},{"location":"notes_de_cours/form/#invalid","text":"Applicable quand l'usager \u00e0 saisie une valeur invalide, comme par exemple une adresse courriel non conforme dans un \u00e9l\u00e9ment input de type courriel.","title":":invalid"},{"location":"notes_de_cours/form/#validation-de-formulaire-en-html","text":"On peut en HTML uniquement impl\u00e9menter une premi\u00e8re \"couche\" de validation en utilisant certain attributs sp\u00e9cifiques. Il faut garder \u00e0 l'esprit que cette validation est basique et ne devrait pas \u00eatre utilis\u00e9 seule.","title":"Validation de formulaire en HTML"},{"location":"notes_de_cours/form/#lattribut-type","text":"Il existe maintenant pour l'attribut type de l'\u00e9l\u00e9ment input une multitude de valeur possible qui permet de sp\u00e9cifier le type de valeur souhait\u00e9 et en m\u00eame temps de faire une validation. <!-- Input qui demande une adresse de courriel --> <input type=\"email\" id=\"email\" name=\"email_usager\" placeholder=\"Entrez une adresse courriel valide\">","title":"L'attribut type"},{"location":"notes_de_cours/form/#lattribut-required","text":"Indique qu'une valeur doit \u00eatre saisie pour l'\u00e9l\u00e9ment avant l'envoi du formulaire. Selon le navigateur utilis\u00e9 un message d'erreur sera affich\u00e9. <label for=\"email\">e-mail</label> <input type=\"email\" id=\"email\" name=\"email_usager\" required> R\u00e9sultat lors de l'envoi du formulaire","title":"L'attribut required"},{"location":"notes_de_cours/form/#lattribut-pattern","text":"On peut avec l'attribut pattern d\u00e9finir notre propre format de texte accept\u00e9. Pattern prend comme valeur une expression r\u00e9guli\u00e8re. Il est tr\u00e8s important d'informer l'utilisateur du format \u00e0 respecter, soit avec la balise title ou en ajoutant un court texte explicatif. <label for=\"ipv4\">Courriel</label> <input type=\"text\" id=\"ipv4\" name=\"ipv4\" pattern=\"\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\" required title=\"Adresse IPv4\"> <p>Veuillez entrer une adresse IPv4 au format xxx.xxx.xxx.xxx</p> R\u00e9f\u00e9rence : https://regexr.com/","title":"L'attribut pattern"},{"location":"notes_de_cours/form/#validation-de-formulaire-en-javascript","text":"Il y a plusieurs m\u00e9thode pour valider nos formulaire en Javascript. Nous allons nous en tenir \u00e0 deux m\u00e9thodes qui se rapproche de ce qu'on fait d\u00e9j\u00e0 en utilisant l'action submit du formulaire. L'avantage majeur d'utiliser Javascript est que \u00e7a nous permet de faire une validation beaucoup plus pr\u00e9cise et efficace.","title":"Validation de formulaire en Javascript"},{"location":"notes_de_cours/form/#onsubmit","text":"La premi\u00e8re m\u00e9thode est d'utiliser onsubmit dans la balise form pour appeler une fonction Javascript lors du \"submit\" du formulaire. La fonction doit \u00eatre appeler de la fa\u00e7on suivante et retourner true ou false : HTML <form action=\"traitement.php\" method=\"post\" onsubmit=\"return ValidationOnSubmit()\"> Javascript function ValidationOnSubmit() { let formValide = false; // Traitement de validation return formValide; } Un retour de la valeur false va emp\u00eacher le submit et une valeur true va au contraire l'autoriser.","title":"onsubmit"},{"location":"notes_de_cours/form/#preventdefault","text":"La seconde m\u00e9thode est d'utiliser la m\u00e9thode preventDefault associ\u00e9e au formulaire pour bloqu\u00e9 le comportement du \"submit\" et ensuite faire notre validation. Un fois la validation effectu\u00e9e, on peut relancer un submit depuis notre script. La fonction de validation sera appel\u00e9 quand l'\u00e9v\u00e9nement submit de notre formulaire sera d\u00e9clench\u00e9. On utilisera un addEventListener pour ce faire : monFormulaire.addEventListener('submit', function ValidationFormulaire(e) { // Annule le comportement par d\u00e9faut du submit e.preventDefault(); let formValide = false; // Traitement de validation if (formValide) { // On relance un submit monFormulaire.submit(); } });","title":"preventDefault"},{"location":"notes_de_cours/form/#references","text":"https://developer.mozilla.org/fr/docs/Learn/Forms/Form_validation https://www.tutorialspoint.com/javascript/javascript_form_validations.htm https://www.javascripttutorial.net/javascript-dom/javascript-form-validation/ https://www.w3schools.com/js/js_validation.asp","title":"R\u00e9f\u00e9rences"},{"location":"notes_de_cours/html_basics/","text":"HTML \" Le HyperText Markup Language, g\u00e9n\u00e9ralement abr\u00e9g\u00e9 HTML ou dans sa derni\u00e8re version HTML5, est le langage de balisage con\u00e7u pour repr\u00e9senter les pages web. Ce langage permet : d\u2019\u00e9crire de l\u2019hypertexte de structurer s\u00e9mantiquement la page de mettre en forme le contenu de cr\u00e9er des formulaires de saisie d\u2019inclure des ressources multim\u00e9dias dont des images, des vid\u00e9os, et des programmes informatiques de cr\u00e9er des documents interop\u00e9rables avec des \u00e9quipements tr\u00e8s vari\u00e9s de mani\u00e8re conforme aux exigences de l\u2019accessibilit\u00e9 du web. Il est souvent utilis\u00e9 conjointement avec le langage de programmation JavaScript et des feuilles de style en cascade (CSS). \" ( Wikipedia ) Dans le d\u00e9veloppement web \"moderne\", le HTML est principalement utilis\u00e9 pour structur\u00e9 la page, on peut se le repr\u00e9senter comme l'ossature notre site web. La mise en page et l'interactivit\u00e9 seront prise en charge respectivement par le CSS et le Javascript. Le HTML n'est pas \u00e0 proprement parl\u00e9 un langage de programmation qu'on doit compiler comme le c# par exemple. C'est plut\u00f4t un ensemble de balise (mot cl\u00e9) qui sera interpr\u00e9t\u00e9 par le navigateur qui va afficher la page. Il peut donc y avoir des diff\u00e9rences d'affichage selon le navigateur utilis\u00e9 malgr\u00e9 qu'on tends de plus en plus vers une uniformit\u00e9. C'est cependant une r\u00e9alit\u00e9 avec laquelle le d\u00e9veloppeur web doit composer. Balise HTML Le langage HTML utilise des balises pour indiquer au navigateur de quelle fa\u00e7on afficher le contenu de la page. Une balise d\u00e9bute toujours par le caract\u00e8re < suivi du nom de la balise. On peut ajouter ensuite des attributs \u00e0 chaque balise, certain g\u00e9n\u00e9ral et d'autre plus sp\u00e9cifique. On va voir plus loin les attributs mais voici un exemple de syntaxe d'une balise avec des attributs : <input type=\"text\" id=\"nom\" name=\"nom\" value=\"Mathieu\"> La balise se terminera par le caract\u00e8re > . Tout le contenu qui suivra sera affect\u00e9 par cette balise. Pour chaque ouverture de balise, on doit ajouter un autre balise de fermeture. Pour ce faire on utilise le m\u00eame mot cl\u00e9 mais pr\u00e9c\u00e9d\u00e9 du caract\u00e8re / . Ex: <title>Le titre de ma page</title> Dans cette exemple le texte 'Le titre de la page' sera afficher comme un titre parce qu'il est englober dans la balise title . Certaine balise n'ont pas besoin de fermeture, comme par exemple la balise img pour afficher une image : <img src=\"avatar.jpg\" alt=\"Une superbe photo de moi\"> Structure HTML5 d'une page web Le code qui suit repr\u00e9sente la structure de base d'une page web <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Le titre de ma page</title> </head> <body> <p>Un paragraphe qui sera afficher \u00e0 l'utilisateur</p> </body> </html> Voyons plus en d\u00e9tail chacune de ces balises < !DOCTYPE html > Historiquement, cette balise servait \u00e0 indiquer au navigateur quelle r\u00e8gles il devait utiliser pour bien afficher la page. On continue de l'inclure pour des questions de r\u00e9trocompatibilit\u00e9. Cette balise ne doit pas \u00eatre \"ferm\u00e9e\". < html > La page dans son ensemble. Toutes les autres balises html doivent se retrouver \u00e0 l'int\u00e9rieur de celle-ci. < head > On va ajouter ici tout ce qu'on inclure dans la page web mais qui ne sera pas visible par l'utilisateur. Des mots-cl\u00e9 pour le r\u00e9f\u00e9rencement Des liens vers les fichiers css, javascript et autres librairies utilis\u00e9es. < meta charset=\"utf-8\"> Pour sp\u00e9cifier le jeu de caract\u00e8re \u00e0 utiliser pour bien afficher le texte de la page. Tout comme la balise |Doctype, on l'inclus par d\u00e9faut sans se poser d'autres questions. Cette balise ne doit pas \u00eatre \"ferm\u00e9e\". < title > Pour d\u00e9finir le titre de la page, qui sera afficher dans l'onglet du navigateur. < body > C'est ici qu'on va placer le contenu de la page qui sera afficher par le navigateur et visible par l'utilisateur. Je vous conseille de vous cr\u00e9er un \"template\" de cette structure de base dans l'IDE que vous utiliser pour coder afin de ne pas toujours le recopier \u00e0 chaque nouvelle page web que vous cr\u00e9\u00e9. Block vs Inline Les \u00e9l\u00e9ments HTML ne sont pas tous affich\u00e9 de la m\u00eame fa\u00e7on par le navigateur. Il y a deux dispositions possibles, block ou inline , et chaque \u00e9l\u00e9ment en a un des deux par d\u00e9faut. Block Un \u00e9l\u00e9ment ayant la valeur block commence toujours une nouvelle ligne et prendra toute la largeur disponible. Ex : div , p . Inline Avec Inline l'\u00e9l\u00e9ment est dispos\u00e9 \u00e0 la suite des autres sans commencer une nouvelle ligne. Ex : a , span . Source Documentation Mozilla Tutoriel HTML W3Schools","title":"Les bases"},{"location":"notes_de_cours/html_basics/#html","text":"\" Le HyperText Markup Language, g\u00e9n\u00e9ralement abr\u00e9g\u00e9 HTML ou dans sa derni\u00e8re version HTML5, est le langage de balisage con\u00e7u pour repr\u00e9senter les pages web. Ce langage permet : d\u2019\u00e9crire de l\u2019hypertexte de structurer s\u00e9mantiquement la page de mettre en forme le contenu de cr\u00e9er des formulaires de saisie d\u2019inclure des ressources multim\u00e9dias dont des images, des vid\u00e9os, et des programmes informatiques de cr\u00e9er des documents interop\u00e9rables avec des \u00e9quipements tr\u00e8s vari\u00e9s de mani\u00e8re conforme aux exigences de l\u2019accessibilit\u00e9 du web. Il est souvent utilis\u00e9 conjointement avec le langage de programmation JavaScript et des feuilles de style en cascade (CSS). \" ( Wikipedia ) Dans le d\u00e9veloppement web \"moderne\", le HTML est principalement utilis\u00e9 pour structur\u00e9 la page, on peut se le repr\u00e9senter comme l'ossature notre site web. La mise en page et l'interactivit\u00e9 seront prise en charge respectivement par le CSS et le Javascript. Le HTML n'est pas \u00e0 proprement parl\u00e9 un langage de programmation qu'on doit compiler comme le c# par exemple. C'est plut\u00f4t un ensemble de balise (mot cl\u00e9) qui sera interpr\u00e9t\u00e9 par le navigateur qui va afficher la page. Il peut donc y avoir des diff\u00e9rences d'affichage selon le navigateur utilis\u00e9 malgr\u00e9 qu'on tends de plus en plus vers une uniformit\u00e9. C'est cependant une r\u00e9alit\u00e9 avec laquelle le d\u00e9veloppeur web doit composer.","title":"HTML"},{"location":"notes_de_cours/html_basics/#balise-html","text":"Le langage HTML utilise des balises pour indiquer au navigateur de quelle fa\u00e7on afficher le contenu de la page. Une balise d\u00e9bute toujours par le caract\u00e8re < suivi du nom de la balise. On peut ajouter ensuite des attributs \u00e0 chaque balise, certain g\u00e9n\u00e9ral et d'autre plus sp\u00e9cifique. On va voir plus loin les attributs mais voici un exemple de syntaxe d'une balise avec des attributs : <input type=\"text\" id=\"nom\" name=\"nom\" value=\"Mathieu\"> La balise se terminera par le caract\u00e8re > . Tout le contenu qui suivra sera affect\u00e9 par cette balise. Pour chaque ouverture de balise, on doit ajouter un autre balise de fermeture. Pour ce faire on utilise le m\u00eame mot cl\u00e9 mais pr\u00e9c\u00e9d\u00e9 du caract\u00e8re / . Ex: <title>Le titre de ma page</title> Dans cette exemple le texte 'Le titre de la page' sera afficher comme un titre parce qu'il est englober dans la balise title . Certaine balise n'ont pas besoin de fermeture, comme par exemple la balise img pour afficher une image : <img src=\"avatar.jpg\" alt=\"Une superbe photo de moi\">","title":"Balise HTML"},{"location":"notes_de_cours/html_basics/#structure-html5-dune-page-web","text":"Le code qui suit repr\u00e9sente la structure de base d'une page web <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Le titre de ma page</title> </head> <body> <p>Un paragraphe qui sera afficher \u00e0 l'utilisateur</p> </body> </html> Voyons plus en d\u00e9tail chacune de ces balises","title":"Structure HTML5 d'une page web"},{"location":"notes_de_cours/html_basics/#doctype-html","text":"Historiquement, cette balise servait \u00e0 indiquer au navigateur quelle r\u00e8gles il devait utiliser pour bien afficher la page. On continue de l'inclure pour des questions de r\u00e9trocompatibilit\u00e9. Cette balise ne doit pas \u00eatre \"ferm\u00e9e\".","title":"&lt; !DOCTYPE html &gt;"},{"location":"notes_de_cours/html_basics/#html_1","text":"La page dans son ensemble. Toutes les autres balises html doivent se retrouver \u00e0 l'int\u00e9rieur de celle-ci.","title":"&lt; html &gt;"},{"location":"notes_de_cours/html_basics/#head","text":"On va ajouter ici tout ce qu'on inclure dans la page web mais qui ne sera pas visible par l'utilisateur. Des mots-cl\u00e9 pour le r\u00e9f\u00e9rencement Des liens vers les fichiers css, javascript et autres librairies utilis\u00e9es.","title":"&lt; head &gt;"},{"location":"notes_de_cours/html_basics/#meta-charsetutf-8","text":"Pour sp\u00e9cifier le jeu de caract\u00e8re \u00e0 utiliser pour bien afficher le texte de la page. Tout comme la balise |Doctype, on l'inclus par d\u00e9faut sans se poser d'autres questions. Cette balise ne doit pas \u00eatre \"ferm\u00e9e\".","title":"&lt; meta charset=\"utf-8\"&gt;"},{"location":"notes_de_cours/html_basics/#title","text":"Pour d\u00e9finir le titre de la page, qui sera afficher dans l'onglet du navigateur.","title":"&lt; title &gt;"},{"location":"notes_de_cours/html_basics/#body","text":"C'est ici qu'on va placer le contenu de la page qui sera afficher par le navigateur et visible par l'utilisateur. Je vous conseille de vous cr\u00e9er un \"template\" de cette structure de base dans l'IDE que vous utiliser pour coder afin de ne pas toujours le recopier \u00e0 chaque nouvelle page web que vous cr\u00e9\u00e9.","title":"&lt; body &gt;"},{"location":"notes_de_cours/html_basics/#block-vs-inline","text":"Les \u00e9l\u00e9ments HTML ne sont pas tous affich\u00e9 de la m\u00eame fa\u00e7on par le navigateur. Il y a deux dispositions possibles, block ou inline , et chaque \u00e9l\u00e9ment en a un des deux par d\u00e9faut.","title":"Block vs Inline"},{"location":"notes_de_cours/html_basics/#block","text":"Un \u00e9l\u00e9ment ayant la valeur block commence toujours une nouvelle ligne et prendra toute la largeur disponible. Ex : div , p .","title":"Block"},{"location":"notes_de_cours/html_basics/#inline","text":"Avec Inline l'\u00e9l\u00e9ment est dispos\u00e9 \u00e0 la suite des autres sans commencer une nouvelle ligne. Ex : a , span .","title":"Inline"},{"location":"notes_de_cours/html_basics/#source","text":"Documentation Mozilla Tutoriel HTML W3Schools","title":"Source"},{"location":"notes_de_cours/html_font/","text":"Utiliser des polices de caract\u00e8res personnalis\u00e9es Pour pouvoir afficher du texte avec une police de caract\u00e8res pr\u00e9cise dans une page internet, cette police doit \u00eatre pr\u00e9sente sur l'ordinateur de l'usager. Il existe une liste de polices de caract\u00e8re qui sont pr\u00e9sentent sur pratiquement toutes les syst\u00e8mes d'op\u00e9rations et qu'on peut utiliser sans risque. (Le bon vieux Time New Roman par exemple) Vous pouvez consulter cette liste ici . Cependant on veut pouvoir sortir de ce cadre et avoir acc\u00e8s \u00e0 une multitude de style d'\u00e9criture diff\u00e9rent. Il existe des fa\u00e7ons de faire et on va en voir deux. Les Web Fonts La premi\u00e8re option nous est accessible avec CSS. L'id\u00e9e est d'inclure le fichier de la police que l'on veut utiliser dans les fichiers de notre site et d'ensuite faire une lien avec celui-ci dans nos feuilles de style qui vont l'utiliser. On va commencer par utiliser la commande @font-face pour relier un mot-cl\u00e9 au fichier de la police. On va faire cette d\u00e9claration au d\u00e9but de notre fichier CSS. @font-face { font-family: \"nomDeLaPolice\"; /* Le nom de la police qu'on va utiliser plus loin */ src: url(\"monFichier.ttf\"); /* Le lien vers le fichier de la police */ } Ensuite avec la propri\u00e9t\u00e9 font-family , on va utiliser le mot-cl\u00e9 qu'on vient de d\u00e9finir. Font-family peut prendre plusieurs noms de police en valeur, chacune s\u00e9par\u00e9 par une virgule. Si la premi\u00e8re valeur n'est pas trouv\u00e9, on passe \u00e0 la seconde et ainsi de suite. Si aucune valeur n'est trouv\u00e9 le navigateur va utiliser la police par d\u00e9faut du syst\u00e8me. h1 { font-family: \"nomDeLaPolice\", \"Time New Roman\" /* Ici toutes les balises h1 vont utiliser la police qu'on a d\u00e9fini plus haut. Si le fichier n'est pas trouv\u00e9, elle vont utiliser Time New Roman */ } Exemple @font-face { font-family: \"cyberpunk\"; src: url(\"../assets/Cyberpunk.ttf\"); } h1 { font-family: \"cyberpunk\"; } Pour aller plus loin : https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts Google font Une deuxi\u00e8me option est d'utilis\u00e9 des services de ressources en ligne comme Google Font. L'avantage est qu'on n'est pas oblig\u00e9 d'inclure les fichiers \u00e0 notre site internet, on va les chercher directement en ligne. Le d\u00e9savantage est que l'affichage de la page internet est un peu plus lente et qu'on est d\u00e9pendant du service, si il devient inaccessible notre ressource le sera aussi. Voici un exemple d'utilisation avec Google Font Une fois sur le site, on recherche la police qui nous convient. Ensuite on a parfois \u00e0 choisir des options et on clique sur l'icone \"View selected families\" en haut \u00e0 droite. On nous donne le code \u00e0 ajouter dans notre projet pour utiliser la police. On peut le faire avec la balise link depuis le fichier HTML ou bien avec @import dans le fichier CSS. Ensuite on va utiliser font-family comme avec les web-fonts . On peut aussi t\u00e9l\u00e9charger le fichier de police, dans ce cas on utilisera ensuite la m\u00eame technique que pour les web-fonts . Un exemple du r\u00e9sultat, uniquement en css @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap'); html { font-family: 'Press Start 2P', cursive; } Font Awesome Un autre service qui pourrait \u00eatre int\u00e9ressant pour vos projet est font awesome . Il nous offre une s\u00e9lection de milliers d'ic\u00f4nes \u00e0 utiliser gratuitement. Pratique quand par exemple vous voulez cr\u00e9er un bouton \"enregistrer\" avec un ic\u00f4ne de disquette. Vous devez en premier lieu vous inscrire sur le site avec une adresse courriel. Une fois la proc\u00e9dure d'inscription termin\u00e9e, vous aurez acc\u00e8s \u00e0 un \"kit\". Dans ce \"kit\" vous avez un ligne de code \u00e0 ajouter \u00e0 votre projet. Ensuite vous pouvez faire une recherche dans la banque d'ic\u00f4ne, pensez \u00e0 cocher la case \"free\" pour n'avoir que les ic\u00f4nes gratuit. Une fois l'ic\u00f4ne de vos r\u00eaves trouv\u00e9, on vous donne un code html sous la forme d'une balise i \u00e0 ajouter \u00e0 votre fichier HTML. Exemple dans un fichier html <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Exemple Font-Awesome</title> <script defer src=\"https://kit.fontawesome.com/8xxxxxx1.js\" crossorigin=\"anonymous\"> </script> </head> <body> <button><i class=\"fa-solid fa-floppy-disk\"></i></button> </body> </html>","title":"Polices de caract\u00e8res"},{"location":"notes_de_cours/html_font/#utiliser-des-polices-de-caracteres-personnalisees","text":"Pour pouvoir afficher du texte avec une police de caract\u00e8res pr\u00e9cise dans une page internet, cette police doit \u00eatre pr\u00e9sente sur l'ordinateur de l'usager. Il existe une liste de polices de caract\u00e8re qui sont pr\u00e9sentent sur pratiquement toutes les syst\u00e8mes d'op\u00e9rations et qu'on peut utiliser sans risque. (Le bon vieux Time New Roman par exemple) Vous pouvez consulter cette liste ici . Cependant on veut pouvoir sortir de ce cadre et avoir acc\u00e8s \u00e0 une multitude de style d'\u00e9criture diff\u00e9rent. Il existe des fa\u00e7ons de faire et on va en voir deux.","title":"Utiliser des polices de caract\u00e8res personnalis\u00e9es"},{"location":"notes_de_cours/html_font/#les-web-fonts","text":"La premi\u00e8re option nous est accessible avec CSS. L'id\u00e9e est d'inclure le fichier de la police que l'on veut utiliser dans les fichiers de notre site et d'ensuite faire une lien avec celui-ci dans nos feuilles de style qui vont l'utiliser. On va commencer par utiliser la commande @font-face pour relier un mot-cl\u00e9 au fichier de la police. On va faire cette d\u00e9claration au d\u00e9but de notre fichier CSS. @font-face { font-family: \"nomDeLaPolice\"; /* Le nom de la police qu'on va utiliser plus loin */ src: url(\"monFichier.ttf\"); /* Le lien vers le fichier de la police */ } Ensuite avec la propri\u00e9t\u00e9 font-family , on va utiliser le mot-cl\u00e9 qu'on vient de d\u00e9finir. Font-family peut prendre plusieurs noms de police en valeur, chacune s\u00e9par\u00e9 par une virgule. Si la premi\u00e8re valeur n'est pas trouv\u00e9, on passe \u00e0 la seconde et ainsi de suite. Si aucune valeur n'est trouv\u00e9 le navigateur va utiliser la police par d\u00e9faut du syst\u00e8me. h1 { font-family: \"nomDeLaPolice\", \"Time New Roman\" /* Ici toutes les balises h1 vont utiliser la police qu'on a d\u00e9fini plus haut. Si le fichier n'est pas trouv\u00e9, elle vont utiliser Time New Roman */ } Exemple @font-face { font-family: \"cyberpunk\"; src: url(\"../assets/Cyberpunk.ttf\"); } h1 { font-family: \"cyberpunk\"; } Pour aller plus loin : https://developer.mozilla.org/en-US/docs/Learn/CSS/Styling_text/Web_fonts","title":"Les Web Fonts"},{"location":"notes_de_cours/html_font/#google-font","text":"Une deuxi\u00e8me option est d'utilis\u00e9 des services de ressources en ligne comme Google Font. L'avantage est qu'on n'est pas oblig\u00e9 d'inclure les fichiers \u00e0 notre site internet, on va les chercher directement en ligne. Le d\u00e9savantage est que l'affichage de la page internet est un peu plus lente et qu'on est d\u00e9pendant du service, si il devient inaccessible notre ressource le sera aussi. Voici un exemple d'utilisation avec Google Font Une fois sur le site, on recherche la police qui nous convient. Ensuite on a parfois \u00e0 choisir des options et on clique sur l'icone \"View selected families\" en haut \u00e0 droite. On nous donne le code \u00e0 ajouter dans notre projet pour utiliser la police. On peut le faire avec la balise link depuis le fichier HTML ou bien avec @import dans le fichier CSS. Ensuite on va utiliser font-family comme avec les web-fonts . On peut aussi t\u00e9l\u00e9charger le fichier de police, dans ce cas on utilisera ensuite la m\u00eame technique que pour les web-fonts . Un exemple du r\u00e9sultat, uniquement en css @import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap'); html { font-family: 'Press Start 2P', cursive; }","title":"Google font"},{"location":"notes_de_cours/html_font/#font-awesome","text":"Un autre service qui pourrait \u00eatre int\u00e9ressant pour vos projet est font awesome . Il nous offre une s\u00e9lection de milliers d'ic\u00f4nes \u00e0 utiliser gratuitement. Pratique quand par exemple vous voulez cr\u00e9er un bouton \"enregistrer\" avec un ic\u00f4ne de disquette. Vous devez en premier lieu vous inscrire sur le site avec une adresse courriel. Une fois la proc\u00e9dure d'inscription termin\u00e9e, vous aurez acc\u00e8s \u00e0 un \"kit\". Dans ce \"kit\" vous avez un ligne de code \u00e0 ajouter \u00e0 votre projet. Ensuite vous pouvez faire une recherche dans la banque d'ic\u00f4ne, pensez \u00e0 cocher la case \"free\" pour n'avoir que les ic\u00f4nes gratuit. Une fois l'ic\u00f4ne de vos r\u00eaves trouv\u00e9, on vous donne un code html sous la forme d'une balise i \u00e0 ajouter \u00e0 votre fichier HTML. Exemple dans un fichier html <!DOCTYPE html> <html> <head> <meta charset=\"utf-8\"> <title>Exemple Font-Awesome</title> <script defer src=\"https://kit.fontawesome.com/8xxxxxx1.js\" crossorigin=\"anonymous\"> </script> </head> <body> <button><i class=\"fa-solid fa-floppy-disk\"></i></button> </body> </html>","title":"Font Awesome"},{"location":"notes_de_cours/html_mediaquery/","text":"Media queries Il est possible avec les requ\u00eates m\u00e9dia (media queries) de d\u00e9finir une s\u00e9ries de r\u00e8gles css diff\u00e9rentes en fonction de l'appareil ou de son type d'affichage (la taille de l'\u00e9cran par exemple). On pourrait tr\u00e8s bien avoir des r\u00e8gles pour les \u00e9crans d'ordinateur, pour l'impression et pour les cellulaires. Syntaxe @media not|only type_de_media and (caracteristique_media) { /* Mon code css */ } Type de media Le type de m\u00e9dia est optionnel, par d\u00e9faut il prendra la valeur all qui correspond \u00e0 tous les m\u00e9dias. Valeur description all Tous les types de m\u00e9dia (valeur par d\u00e9faut) screen Tous les appareils poss\u00e9dant un \u00e9cran print Pour l'impression, par exemple quand on fait un aper\u00e7u avant l'impression speech Pour les outils de synth\u00e8se vocale Op\u00e9rateurs logiques and Permet de combiner plusieurs sous-requ\u00eate en une seule. Pour que la requ\u00eate soit \u00e9valu\u00e9 comme vrai, toutes les sous-requ\u00eates doivent aussi \u00eatre vrai. @media screen and (min-width: 320px) and (max-width: 768px) { ... } Dans cet exemple les r\u00e8gles seront utilis\u00e9es sur tous les appareils poss\u00e9dant un \u00e9cran dont la dimension de la zone d'affichage est situ\u00e9e entre 320 et 768 pixels. or On peut aussi en s\u00e9parant les sous-requ\u00eates par une virgule, utiliser le ou logique. D\u00e8s qu'une sous-requ\u00eate est vrai, la requ\u00eate m\u00e9dia sera vrai. @media (min-height: 680px), screen and (orientation: portrait) { ... } Dans cet exemple, les r\u00e8gles seront appliqu\u00e9es si la taille de la zone d'affichage est d'une hauteur sup\u00e9rieur \u00e0 680 pixels ou si l'\u00e9cran est en mode portrait. not Permet d'inverser le r\u00e9sultat d'une requ\u00eate. @media print and ( not(color) ) { ... } Dans cet exemple, les r\u00e8gles seront appliqu\u00e9es si l'appareil est une imprimante et ne peut pas afficher de couleur. Utilisation des requ\u00eates m\u00e9dia Dans un fichier HTML Avec la balise link On peut ajouter l'attribut media \u00e0 la balise link pour importer un fichier css seulement quand la requ\u00eate est vrai. <html> <head> <!-- Va \u00eatre importer si la taille de l'\u00e9cran \u00e0 une largeur sup\u00e9rieur \u00e0 600 pixels --> <link rel=\"stylesheet\" href=\"extra-large.css\" media=\"(min-width: 600px)\" /> </head> </html> Avec l'attribut media de la balise style On peut aussi utiliser l'attribut media de la balise style. <style> p { background-color: blue; color: white; } </style> <style media=\"all and (max-width: 500px)\"> p { background-color: yellow; color: blue; } </style> Ici la couleur du texte des paragraphes changera selon la dimension de l'\u00e9cran. Dans un fichier CSS L'utilisation dans un fichier css ce fait en englobant la r\u00e8gle par la requ\u00eate. @media screen and (min-width: 320px) and (max-width: 768px) { p { background-color: yellow; color: blue; } } sources https://css-tricks.com/a-complete-guide-to-css-media-queries/ https://developer.mozilla.org/fr/docs/Web/CSS/Media_Queries/Using_media_queries https://www.w3schools.com/css/css3_mediaqueries.asp https://www.w3schools.com/css/css3_mediaqueries_ex.asp","title":"Media Query"},{"location":"notes_de_cours/html_mediaquery/#media-queries","text":"Il est possible avec les requ\u00eates m\u00e9dia (media queries) de d\u00e9finir une s\u00e9ries de r\u00e8gles css diff\u00e9rentes en fonction de l'appareil ou de son type d'affichage (la taille de l'\u00e9cran par exemple). On pourrait tr\u00e8s bien avoir des r\u00e8gles pour les \u00e9crans d'ordinateur, pour l'impression et pour les cellulaires.","title":"Media queries"},{"location":"notes_de_cours/html_mediaquery/#syntaxe","text":"@media not|only type_de_media and (caracteristique_media) { /* Mon code css */ }","title":"Syntaxe"},{"location":"notes_de_cours/html_mediaquery/#type-de-media","text":"Le type de m\u00e9dia est optionnel, par d\u00e9faut il prendra la valeur all qui correspond \u00e0 tous les m\u00e9dias. Valeur description all Tous les types de m\u00e9dia (valeur par d\u00e9faut) screen Tous les appareils poss\u00e9dant un \u00e9cran print Pour l'impression, par exemple quand on fait un aper\u00e7u avant l'impression speech Pour les outils de synth\u00e8se vocale","title":"Type de media"},{"location":"notes_de_cours/html_mediaquery/#operateurs-logiques","text":"","title":"Op\u00e9rateurs logiques"},{"location":"notes_de_cours/html_mediaquery/#and","text":"Permet de combiner plusieurs sous-requ\u00eate en une seule. Pour que la requ\u00eate soit \u00e9valu\u00e9 comme vrai, toutes les sous-requ\u00eates doivent aussi \u00eatre vrai. @media screen and (min-width: 320px) and (max-width: 768px) { ... } Dans cet exemple les r\u00e8gles seront utilis\u00e9es sur tous les appareils poss\u00e9dant un \u00e9cran dont la dimension de la zone d'affichage est situ\u00e9e entre 320 et 768 pixels.","title":"and"},{"location":"notes_de_cours/html_mediaquery/#or","text":"On peut aussi en s\u00e9parant les sous-requ\u00eates par une virgule, utiliser le ou logique. D\u00e8s qu'une sous-requ\u00eate est vrai, la requ\u00eate m\u00e9dia sera vrai. @media (min-height: 680px), screen and (orientation: portrait) { ... } Dans cet exemple, les r\u00e8gles seront appliqu\u00e9es si la taille de la zone d'affichage est d'une hauteur sup\u00e9rieur \u00e0 680 pixels ou si l'\u00e9cran est en mode portrait.","title":"or"},{"location":"notes_de_cours/html_mediaquery/#not","text":"Permet d'inverser le r\u00e9sultat d'une requ\u00eate. @media print and ( not(color) ) { ... } Dans cet exemple, les r\u00e8gles seront appliqu\u00e9es si l'appareil est une imprimante et ne peut pas afficher de couleur.","title":"not"},{"location":"notes_de_cours/html_mediaquery/#utilisation-des-requetes-media","text":"","title":"Utilisation des requ\u00eates m\u00e9dia"},{"location":"notes_de_cours/html_mediaquery/#dans-un-fichier-html","text":"","title":"Dans un fichier HTML"},{"location":"notes_de_cours/html_mediaquery/#avec-la-balise-link","text":"On peut ajouter l'attribut media \u00e0 la balise link pour importer un fichier css seulement quand la requ\u00eate est vrai. <html> <head> <!-- Va \u00eatre importer si la taille de l'\u00e9cran \u00e0 une largeur sup\u00e9rieur \u00e0 600 pixels --> <link rel=\"stylesheet\" href=\"extra-large.css\" media=\"(min-width: 600px)\" /> </head> </html>","title":"Avec la balise link"},{"location":"notes_de_cours/html_mediaquery/#avec-lattribut-media-de-la-balise-style","text":"On peut aussi utiliser l'attribut media de la balise style. <style> p { background-color: blue; color: white; } </style> <style media=\"all and (max-width: 500px)\"> p { background-color: yellow; color: blue; } </style> Ici la couleur du texte des paragraphes changera selon la dimension de l'\u00e9cran.","title":"Avec l'attribut media de la balise style"},{"location":"notes_de_cours/html_mediaquery/#dans-un-fichier-css","text":"L'utilisation dans un fichier css ce fait en englobant la r\u00e8gle par la requ\u00eate. @media screen and (min-width: 320px) and (max-width: 768px) { p { background-color: yellow; color: blue; } }","title":"Dans un fichier CSS"},{"location":"notes_de_cours/html_mediaquery/#sources","text":"https://css-tricks.com/a-complete-guide-to-css-media-queries/ https://developer.mozilla.org/fr/docs/Web/CSS/Media_Queries/Using_media_queries https://www.w3schools.com/css/css3_mediaqueries.asp https://www.w3schools.com/css/css3_mediaqueries_ex.asp","title":"sources"},{"location":"notes_de_cours/js_attribute/","text":"Manipuler les attributs HTML en Javascript On se rappelle qu'un \u00e9l\u00e9ment HTML peu avoir des attributs, comme par exemple les attributs id, src et alt de la balise image suivante : <img src=\"assets/images/background.jpg\" alt=\"Image de Drummer\" id=\"img-fond\"> On peut en Javascript acc\u00e9der \u00e0 ces attributs et les manipuler gr\u00e2ce \u00e0 diverses m\u00e9thodes. element.hasAttribute(\"nomAttribut\") : V\u00e9rifier si l'attribut existe element.getAttribute(\"nomAttribut\") : R\u00e9cup\u00e9rer la valeur de l'attribut element.setAttribute(\"nomAttribut\", \"saValeur\") : Ajouter ou modifier la valeur d'un attribut element.removeAttribute(\"nomAttribut\") : Supprimer un attribut Prenons par exemple un div avec seulement un attribut id HTML <div id=\"demo\"></div> JS // Je r\u00e9cup\u00e8re la div dans une variable let divDemo = document.getElementById(\"demo\"); console.log(divDemo.hasAttribute('id')); // true console.log(divDemo.hasAttribute('title')); // false console.log(divDemo.getAttribute('id')); // demo console.log(divDemo.getAttribute('title')); // null console.log(divDemo.setAttribute('title', 'Ma div principale')); console.log(divDemo.getAttribute('title')); // Ma div principale console.log(divDemo.removeAttribute('title')); console.log(divDemo.getAttribute('title')); // null Les attributs data Un chose vraiment utile avec les attributs est qu'on peut en ajouter des personnalis\u00e9s. Il suffit d'utiliser le pr\u00e9fix data- suivi du nom de l'attribut que l'on veut ajouter dans la balise de l'\u00e9l\u00e9ment html. HTML <div data-key=\"65\" class=\"note\"> ... </div> JS let note = document.querySelector('.note'); console.log(note.getAttribute('data-key')); // 65","title":"Manipuler les attributs HTML"},{"location":"notes_de_cours/js_attribute/#manipuler-les-attributs-html-en-javascript","text":"On se rappelle qu'un \u00e9l\u00e9ment HTML peu avoir des attributs, comme par exemple les attributs id, src et alt de la balise image suivante : <img src=\"assets/images/background.jpg\" alt=\"Image de Drummer\" id=\"img-fond\"> On peut en Javascript acc\u00e9der \u00e0 ces attributs et les manipuler gr\u00e2ce \u00e0 diverses m\u00e9thodes. element.hasAttribute(\"nomAttribut\") : V\u00e9rifier si l'attribut existe element.getAttribute(\"nomAttribut\") : R\u00e9cup\u00e9rer la valeur de l'attribut element.setAttribute(\"nomAttribut\", \"saValeur\") : Ajouter ou modifier la valeur d'un attribut element.removeAttribute(\"nomAttribut\") : Supprimer un attribut Prenons par exemple un div avec seulement un attribut id HTML <div id=\"demo\"></div> JS // Je r\u00e9cup\u00e8re la div dans une variable let divDemo = document.getElementById(\"demo\"); console.log(divDemo.hasAttribute('id')); // true console.log(divDemo.hasAttribute('title')); // false console.log(divDemo.getAttribute('id')); // demo console.log(divDemo.getAttribute('title')); // null console.log(divDemo.setAttribute('title', 'Ma div principale')); console.log(divDemo.getAttribute('title')); // Ma div principale console.log(divDemo.removeAttribute('title')); console.log(divDemo.getAttribute('title')); // null","title":"Manipuler les attributs HTML en Javascript"},{"location":"notes_de_cours/js_attribute/#les-attributs-data","text":"Un chose vraiment utile avec les attributs est qu'on peut en ajouter des personnalis\u00e9s. Il suffit d'utiliser le pr\u00e9fix data- suivi du nom de l'attribut que l'on veut ajouter dans la balise de l'\u00e9l\u00e9ment html. HTML <div data-key=\"65\" class=\"note\"> ... </div> JS let note = document.querySelector('.note'); console.log(note.getAttribute('data-key')); // 65","title":"Les attributs data"},{"location":"notes_de_cours/js_basics/","text":"Javascript - Les bases D\u00e9velopp\u00e9 initialement pour ajouter un peu de dynamisme aux pages web, Javascript est devenu aujourd'hui un incontournable du d\u00e9veloppement web. Il peut \u00eatre utilis\u00e9 \u00e0 la fois du c\u00f4t\u00e9 client (depuis un navigateur) ou bien du c\u00f4t\u00e9 serveur. C'est un langage de script qui n'a pas besoin d'\u00eatre compil\u00e9, il est ex\u00e9cut\u00e9 directement par le navigateur. Les scripts (nom donn\u00e9 aux \"programmes\" javascript) peuvent \u00eatre \u00e9cris directement dans un fichier HTML et ex\u00e9cut\u00e9 automatiquement au chargement de la page. O\u00f9 ajouter nos scripts Dans un fichier HTML On peut ajouter un script un peu n'importe o\u00f9 dans un fichier html avec la balise script , dans la balise head , dans le body , etc. C'est une question de pr\u00e9f\u00e9rence. Personnellement j'ajoute mes scripts \u00e0 l'int\u00e9rieur de la balise head . La syntaxe est la suivante : <script type=\"text/javascript\"> alert('Hello, world!'); </script> Dans cette exemple, une message s'affichera \u00e0 l'\u00e9cran avec le texte Hello, world! . L'attribut type dans la balise n'est plus vraiment n\u00e9cessaire aujourd'hui, on peut l'omettre sans probl\u00e8me. Id\u00e9alement, on va r\u00e9server l'ajout de script directement dans un fichier html \u00e0 des utilisations simples et br\u00e8ves. La plupart du temps les scripts contenu dans des fichiers externes. Dans un fichier externe Un peu comme avec le css, on peut \u00e9crire nos scripts dans un ou des fichiers externes et les appel\u00e9s depuis nos page html. Pour ce faire on va aussi utiliser la balise script mais en ajoutant l'attribut src . <script src=\"mes_scripts.js\"></script> <!-- Pour ajouter plus d'un fichier, on r\u00e9p\u00e8te avec les autres fichiers --> <script src=\"deuxieme_script.js\"></script> La maintenance et la clart\u00e9 du code est une raison d'extraire les scripts dans des fichiers externe. Mais l'avantage majeure est que le navigateur va t\u00e9l\u00e9charger les fichiers en cache. Ensuite si une autre page html fait r\u00e9f\u00e9rence \u00e0 un des fichiers t\u00e9l\u00e9charg\u00e9s, il sera lu depuis le cache et non pas t\u00e9l\u00e9charg\u00e9 \u00e0 nouveau, ce qui r\u00e9duit le trafic et permet \u00e0 la page de s'afficher plus rapidement. Utilisation de l'attribut defer et async de la balise script Par d\u00e9faut, quand on charge un script depuis un fichier externe, il sera ex\u00e9cut\u00e9 imm\u00e9diatement. \u00c7a peut poser un probl\u00e8me si notre script interagit avec des \u00e9l\u00e9ments du DOM car ceux-ci peuvent ne pas \u00eatre encore \"charg\u00e9\" (accessible) lors de ex\u00e9cution du script. Pour palier \u00e0 ce probl\u00e8me on peut soit charger nos scripts \u00e0 la toute fin de notre fichier HTML ou bien plus utiliser l'attribut defer ou async de la balise script . defer sera utilis\u00e9 quand on veut manipuler des \u00e9l\u00e9ments de la page et \u00eatre sur qu'ils sont charg\u00e9s. async sera utilis\u00e9 pour un script qui est totalement ind\u00e9pendant de la page html. Attention par contre car en utilisant ces deux attributs, la page peut se termin\u00e9 de charger avant que les scripts soient ex\u00e9cut\u00e9. \u00c7a peut cr\u00e9er de petits probl\u00e8me visuel selon la nature des scripts. Exemple <script defer src=\"mes_scripts.js\"></script> <script async src=\"mon_script_async.js\"></script> Source : https://javascript.info/script-async-defer Hello, World Et oui, on n'y \u00e9chappera pas :smiling_imp:, on va faire un premier exemple avec un bon vieux Hello, World. Dans le r\u00e9pertoire du cours, cr\u00e9ez vous un sous-dossier nomm\u00e9 helloworld_js. Dans ce sous-r\u00e9pertoire cr\u00e9ez un fichier nomm\u00e9 helloworld.html et ajoutez-y les balises de base d'une page html. On va utiliser la fonction alert() pour afficher un message de votre choix. (Et non vous n'\u00eates pas oblig\u00e9 d'afficher Hello, World). Ajouter \u00e0 l'aide de la balise script le code javascript pour faire afficher votre message. Essayer d'inclure la balise \u00e0 diff\u00e9rent endroit du fichier. Bon maintenant on va refaire la m\u00eame chose mais depuis un fichier externe. Toujours dans le r\u00e9pertoire exercices_js , cr\u00e9ez un nouveau sous-r\u00e9pertoire nomm\u00e9 js . Dans ce sous-r\u00e9pertoire, cr\u00e9ez un fichier nomm\u00e9 helloworld.js . Ajouter le code dans ce nouveau fichier. (Uniquement la ligne alert('Mon message'), pas la balise script ). Faites r\u00e9f\u00e9rence \u00e0 ce fichier en ajoutant une deuxi\u00e8me balise script . Rechargez la page pour voir le r\u00e9sultat. Vous devriez avoir comme r\u00e9sultat deux messages qui s'affichent \u00e0 l'\u00e9cran, un depuis le fichier html et un autre depuis le fichier js externe. On va profiter du moment pour afficher un troisi\u00e8me message, mais cette fois dans la console du navigateur avec la fonction console.log() . Chaque navigateur nous donne acc\u00e8s \u00e0 une console qui affiche diff\u00e9rents messages (d'avertissements, d'erreurs, etc.). Les messages affich\u00e9s dans la console ne sont pas vu par l'usager qui consulte la page web. Il faut ouvrir la console pour les visualiser. La console est un outil tr\u00e8s utilis\u00e9 pour suivre vos scripts et les \"d\u00e9bugger\". On va parler plus longuement plus tard mais pour l'instant on va s'en servir pour afficher un petit message de bienvenue. Ouvrez la console en faisant un clique droit dans la page, ensuite inspecter dans le menu contextuel et l'onglet console (valide pour Firefox et Chrome, \u00e0 voir pour les autres navigateurs). \u00c0 l'endroit que vous voulez, ajouter un message dans la console avec la fonction console.log('Mon message'); Rechargez la page pour voir le r\u00e9sultat. Structure du code Terminaison d'une ligne de code Chaque ligne de code doit se terminer par un point-virgule ( ; )! En fait ce n'est pas enti\u00e8rement vrai. Javascript est un langage assez permissif, et on peut ne pas en ajouter la plupart du temps sans cr\u00e9er d'erreurs. // Ici les deux messages vont s'afficher m\u00eame s'il n'y a pas de point-virgule alert('Bonjour') alert('tout le monde') Par contre, c'est une bonne pratique de toujours en ajouter, et je veux que vous le fassiez toujours. Commentaires Pour ajouter un commentaire sur une ligne, on utilise //. Pour les blocs de commentaires, on va plut\u00f4t utiliser / / // Commentaire sur une ligne alert('Coucou!!'); /* Commentaire sur plusieurs lignes */ console.log('Hola'); Variables D\u00e9claration et assignation En javascript les variables n'ont pas de type. Pour en d\u00e9clarer un, il suffit d'utiliser le mot let ou var suivi du nom de la variable. Nous verrons la diff\u00e9rence entre let et var plus loin, pour l'instant on va toujours utiliser let. Ensuite pour assigner une valeur \u00e0 notre variable on va utiliser le symbole = suivi de la valeur. On peut aussi faire les deux \u00e9tapes sur la m\u00eame ligne. // D\u00e9claration d'une variable let message; // Assignation de la variable message = 'Bonjour tout le monde'; // La m\u00eame chose sur une ligne let message = 'Bonjour tout le monde'; alert (message); Attention, d\u00e9clarer une variable plus d'une fois va provoquer une erreur. let message = 'Bonjour'; let message = 'Au revoir'; // On va avoir une erreur de syntaxe ici Les variables n'ayant pas de type, on peut passer plusieurs type de valeur \u00e0 une m\u00eame variable. Par contre ce n'est pas une bonne pratique et on devrait l'\u00e9viter. let message = 'Allo'; alert(message) // Va afficher Allo message = 5; alert(message * 2) // Va afficher 10; Constantes Une constante est une variable dont la valeur ne peut \u00eatre chang\u00e9 apr\u00e8s son assignation. On utilise le mot const pour la d\u00e9clarer. const COULEUR_ORANGE = '#ffaa00'; COULEUR_ORANGE = '#ffffff'; // Va provoquer une erreur Bien nommer ses variables Un nom de variable peut \u00eatre compos\u00e9 de lettre, chiffre et des caract\u00e8res $ et _. Le premier caract\u00e8re ne doit pas \u00eatre un chiffre. Si le nom de la variable comporte plus d'un mot, on va utiliser la notation camelCase , c'est-\u00e0-dire le premier mot sera en minuscule mais que les suivants commenceront par une lettre majuscule. Attention, le nom de variable est aussi sensible \u00e0 la case. // Exemple de nom en camelCase let nomEnCamelCase = 'Hallo!'; // Les deux variables sont diff\u00e9rentes let message = 'Message 1'; let messAge = 'Message 2'; Pour les constantes, la norme veux qu'on mettre le nom tout en majuscule avec les diff\u00e9rents mots s\u00e9parer par un _ quand la valeur est \"hardcod\u00e9\". Sinon on utilise le camelCase comme avec les variables. // La valeur est ici hardcod\u00e9 const COULEUR_ORANGE = '#ffaa00'; // On assigne la constant avec le r\u00e9sultat de la fonction calculAge() const monAge = calculAge(dateDeNaissance); En r\u00e8gle g\u00e9n\u00e9rale \u00e9viter les noms de variable trop court ou non significatif. // Le nom ne veut rien dire let a = 'Mon titre'; // C'est beaucoup plus significatif avec ce nom let texteTitre = 'Mon titre' Exercice En reprenant ce que vous avez fait dans la section Hello, World , modifier votre code pour utiliser des variables dans les fonctions alert() et console.log(). Interaction Il y a plusieurs fonctions natives en javascript pour interagir avec le visiteur de notre site. Nous avons d\u00e9j\u00e0 vu alert() qui affiche un message \u00e0 l'\u00e9cran. On va en voir deux autres : prompt(titre, valeur par d\u00e9faut) : Demande \u00e0 l'usager de saisir une valeur. confirm() : Affiche une fen\u00eatre avec un texte et deux boutons, Ok et Cancel. Alert Comme nous l'avons vu plus haut, une fa\u00e7on simple d'afficher un message \u00e0 l'usager est d'utiliser la commande alert() . Syntaxe alert('Mon message'); Exemple alert('Bonjour tout le monde!!'); // Affichera Bonjour Mathieu let nom = 'Mathieu'; alert('Bonjour ' + nom); Prompt Avec prompt() on demande \u00e0 l'usager de saisir une valeur qu'on assignera \u00e0 une variable. Syntaxe prompt(\"Message \u00e0 afficher\", \"Valeur optionnelle par d\u00e9faut\"); Exemple let message = 'Veuillez entrer votre nom'; // On affiche le message et r\u00e9cup\u00e8re la valeur dans la variable nom let nom = prompt(message); // La valeur affich\u00e9 sera ce qui a \u00e9t\u00e9 saisie par l'usager alert(nom); // On peut aussi d\u00e9clarer une valeur par d\u00e9faut qui sera afficher dans la case de saisie. // Ici Mathieu sera inscrit dans la case \u00e0 l'affichage let nomAvecDefaut = prompt(message, 'Mathieu'); Confirm On peut aussi poser une question \u00e0 l'usager et r\u00e9cup\u00e9rer une valeur True ou False avec la commande confirm() . Syntaxe confirm(\"Texte \u00e0 afficher\"); Exemple let resultat = confirm(\"Voulez-vous continuer?\"); // resultat prendra la valeur True ou False selon le choix de l'usager if (resultat) { alert('Ok on continue.'); } else { alert('On arr\u00eate d\u00e9j\u00e0.'); } Exercice Demander le nom de l'usager et afficher comme r\u00e9sultat le nom saisie suivi de \", bienvenue sur mon site!\". Posez la question suivante \u00e0 l'usager : \"Est-ce que vous aimez le Javascript?\". Afficher le message \"Super!\" si la r\u00e9ponse est affirmative et \"J'esp\u00e8re que \u00e7a va changer.\" si c'est n\u00e9gatif.","title":"Les bases"},{"location":"notes_de_cours/js_basics/#javascript-les-bases","text":"D\u00e9velopp\u00e9 initialement pour ajouter un peu de dynamisme aux pages web, Javascript est devenu aujourd'hui un incontournable du d\u00e9veloppement web. Il peut \u00eatre utilis\u00e9 \u00e0 la fois du c\u00f4t\u00e9 client (depuis un navigateur) ou bien du c\u00f4t\u00e9 serveur. C'est un langage de script qui n'a pas besoin d'\u00eatre compil\u00e9, il est ex\u00e9cut\u00e9 directement par le navigateur. Les scripts (nom donn\u00e9 aux \"programmes\" javascript) peuvent \u00eatre \u00e9cris directement dans un fichier HTML et ex\u00e9cut\u00e9 automatiquement au chargement de la page.","title":"Javascript - Les bases"},{"location":"notes_de_cours/js_basics/#ou-ajouter-nos-scripts","text":"","title":"O\u00f9 ajouter nos scripts"},{"location":"notes_de_cours/js_basics/#dans-un-fichier-html","text":"On peut ajouter un script un peu n'importe o\u00f9 dans un fichier html avec la balise script , dans la balise head , dans le body , etc. C'est une question de pr\u00e9f\u00e9rence. Personnellement j'ajoute mes scripts \u00e0 l'int\u00e9rieur de la balise head . La syntaxe est la suivante : <script type=\"text/javascript\"> alert('Hello, world!'); </script> Dans cette exemple, une message s'affichera \u00e0 l'\u00e9cran avec le texte Hello, world! . L'attribut type dans la balise n'est plus vraiment n\u00e9cessaire aujourd'hui, on peut l'omettre sans probl\u00e8me. Id\u00e9alement, on va r\u00e9server l'ajout de script directement dans un fichier html \u00e0 des utilisations simples et br\u00e8ves. La plupart du temps les scripts contenu dans des fichiers externes.","title":"Dans un fichier HTML"},{"location":"notes_de_cours/js_basics/#dans-un-fichier-externe","text":"Un peu comme avec le css, on peut \u00e9crire nos scripts dans un ou des fichiers externes et les appel\u00e9s depuis nos page html. Pour ce faire on va aussi utiliser la balise script mais en ajoutant l'attribut src . <script src=\"mes_scripts.js\"></script> <!-- Pour ajouter plus d'un fichier, on r\u00e9p\u00e8te avec les autres fichiers --> <script src=\"deuxieme_script.js\"></script> La maintenance et la clart\u00e9 du code est une raison d'extraire les scripts dans des fichiers externe. Mais l'avantage majeure est que le navigateur va t\u00e9l\u00e9charger les fichiers en cache. Ensuite si une autre page html fait r\u00e9f\u00e9rence \u00e0 un des fichiers t\u00e9l\u00e9charg\u00e9s, il sera lu depuis le cache et non pas t\u00e9l\u00e9charg\u00e9 \u00e0 nouveau, ce qui r\u00e9duit le trafic et permet \u00e0 la page de s'afficher plus rapidement.","title":"Dans un fichier externe"},{"location":"notes_de_cours/js_basics/#utilisation-de-lattribut-defer-et-async-de-la-balise-script","text":"Par d\u00e9faut, quand on charge un script depuis un fichier externe, il sera ex\u00e9cut\u00e9 imm\u00e9diatement. \u00c7a peut poser un probl\u00e8me si notre script interagit avec des \u00e9l\u00e9ments du DOM car ceux-ci peuvent ne pas \u00eatre encore \"charg\u00e9\" (accessible) lors de ex\u00e9cution du script. Pour palier \u00e0 ce probl\u00e8me on peut soit charger nos scripts \u00e0 la toute fin de notre fichier HTML ou bien plus utiliser l'attribut defer ou async de la balise script . defer sera utilis\u00e9 quand on veut manipuler des \u00e9l\u00e9ments de la page et \u00eatre sur qu'ils sont charg\u00e9s. async sera utilis\u00e9 pour un script qui est totalement ind\u00e9pendant de la page html. Attention par contre car en utilisant ces deux attributs, la page peut se termin\u00e9 de charger avant que les scripts soient ex\u00e9cut\u00e9. \u00c7a peut cr\u00e9er de petits probl\u00e8me visuel selon la nature des scripts. Exemple <script defer src=\"mes_scripts.js\"></script> <script async src=\"mon_script_async.js\"></script> Source : https://javascript.info/script-async-defer","title":"Utilisation de l'attribut defer et async de la balise script"},{"location":"notes_de_cours/js_basics/#hello-world","text":"Et oui, on n'y \u00e9chappera pas :smiling_imp:, on va faire un premier exemple avec un bon vieux Hello, World. Dans le r\u00e9pertoire du cours, cr\u00e9ez vous un sous-dossier nomm\u00e9 helloworld_js. Dans ce sous-r\u00e9pertoire cr\u00e9ez un fichier nomm\u00e9 helloworld.html et ajoutez-y les balises de base d'une page html. On va utiliser la fonction alert() pour afficher un message de votre choix. (Et non vous n'\u00eates pas oblig\u00e9 d'afficher Hello, World). Ajouter \u00e0 l'aide de la balise script le code javascript pour faire afficher votre message. Essayer d'inclure la balise \u00e0 diff\u00e9rent endroit du fichier. Bon maintenant on va refaire la m\u00eame chose mais depuis un fichier externe. Toujours dans le r\u00e9pertoire exercices_js , cr\u00e9ez un nouveau sous-r\u00e9pertoire nomm\u00e9 js . Dans ce sous-r\u00e9pertoire, cr\u00e9ez un fichier nomm\u00e9 helloworld.js . Ajouter le code dans ce nouveau fichier. (Uniquement la ligne alert('Mon message'), pas la balise script ). Faites r\u00e9f\u00e9rence \u00e0 ce fichier en ajoutant une deuxi\u00e8me balise script . Rechargez la page pour voir le r\u00e9sultat. Vous devriez avoir comme r\u00e9sultat deux messages qui s'affichent \u00e0 l'\u00e9cran, un depuis le fichier html et un autre depuis le fichier js externe. On va profiter du moment pour afficher un troisi\u00e8me message, mais cette fois dans la console du navigateur avec la fonction console.log() . Chaque navigateur nous donne acc\u00e8s \u00e0 une console qui affiche diff\u00e9rents messages (d'avertissements, d'erreurs, etc.). Les messages affich\u00e9s dans la console ne sont pas vu par l'usager qui consulte la page web. Il faut ouvrir la console pour les visualiser. La console est un outil tr\u00e8s utilis\u00e9 pour suivre vos scripts et les \"d\u00e9bugger\". On va parler plus longuement plus tard mais pour l'instant on va s'en servir pour afficher un petit message de bienvenue. Ouvrez la console en faisant un clique droit dans la page, ensuite inspecter dans le menu contextuel et l'onglet console (valide pour Firefox et Chrome, \u00e0 voir pour les autres navigateurs). \u00c0 l'endroit que vous voulez, ajouter un message dans la console avec la fonction console.log('Mon message'); Rechargez la page pour voir le r\u00e9sultat.","title":"Hello, World"},{"location":"notes_de_cours/js_basics/#structure-du-code","text":"","title":"Structure du code"},{"location":"notes_de_cours/js_basics/#terminaison-dune-ligne-de-code","text":"Chaque ligne de code doit se terminer par un point-virgule ( ; )! En fait ce n'est pas enti\u00e8rement vrai. Javascript est un langage assez permissif, et on peut ne pas en ajouter la plupart du temps sans cr\u00e9er d'erreurs. // Ici les deux messages vont s'afficher m\u00eame s'il n'y a pas de point-virgule alert('Bonjour') alert('tout le monde') Par contre, c'est une bonne pratique de toujours en ajouter, et je veux que vous le fassiez toujours.","title":"Terminaison d'une ligne de code"},{"location":"notes_de_cours/js_basics/#commentaires","text":"Pour ajouter un commentaire sur une ligne, on utilise //. Pour les blocs de commentaires, on va plut\u00f4t utiliser / / // Commentaire sur une ligne alert('Coucou!!'); /* Commentaire sur plusieurs lignes */ console.log('Hola');","title":"Commentaires"},{"location":"notes_de_cours/js_basics/#variables","text":"","title":"Variables"},{"location":"notes_de_cours/js_basics/#declaration-et-assignation","text":"En javascript les variables n'ont pas de type. Pour en d\u00e9clarer un, il suffit d'utiliser le mot let ou var suivi du nom de la variable. Nous verrons la diff\u00e9rence entre let et var plus loin, pour l'instant on va toujours utiliser let. Ensuite pour assigner une valeur \u00e0 notre variable on va utiliser le symbole = suivi de la valeur. On peut aussi faire les deux \u00e9tapes sur la m\u00eame ligne. // D\u00e9claration d'une variable let message; // Assignation de la variable message = 'Bonjour tout le monde'; // La m\u00eame chose sur une ligne let message = 'Bonjour tout le monde'; alert (message); Attention, d\u00e9clarer une variable plus d'une fois va provoquer une erreur. let message = 'Bonjour'; let message = 'Au revoir'; // On va avoir une erreur de syntaxe ici Les variables n'ayant pas de type, on peut passer plusieurs type de valeur \u00e0 une m\u00eame variable. Par contre ce n'est pas une bonne pratique et on devrait l'\u00e9viter. let message = 'Allo'; alert(message) // Va afficher Allo message = 5; alert(message * 2) // Va afficher 10;","title":"D\u00e9claration et assignation"},{"location":"notes_de_cours/js_basics/#constantes","text":"Une constante est une variable dont la valeur ne peut \u00eatre chang\u00e9 apr\u00e8s son assignation. On utilise le mot const pour la d\u00e9clarer. const COULEUR_ORANGE = '#ffaa00'; COULEUR_ORANGE = '#ffffff'; // Va provoquer une erreur","title":"Constantes"},{"location":"notes_de_cours/js_basics/#bien-nommer-ses-variables","text":"Un nom de variable peut \u00eatre compos\u00e9 de lettre, chiffre et des caract\u00e8res $ et _. Le premier caract\u00e8re ne doit pas \u00eatre un chiffre. Si le nom de la variable comporte plus d'un mot, on va utiliser la notation camelCase , c'est-\u00e0-dire le premier mot sera en minuscule mais que les suivants commenceront par une lettre majuscule. Attention, le nom de variable est aussi sensible \u00e0 la case. // Exemple de nom en camelCase let nomEnCamelCase = 'Hallo!'; // Les deux variables sont diff\u00e9rentes let message = 'Message 1'; let messAge = 'Message 2'; Pour les constantes, la norme veux qu'on mettre le nom tout en majuscule avec les diff\u00e9rents mots s\u00e9parer par un _ quand la valeur est \"hardcod\u00e9\". Sinon on utilise le camelCase comme avec les variables. // La valeur est ici hardcod\u00e9 const COULEUR_ORANGE = '#ffaa00'; // On assigne la constant avec le r\u00e9sultat de la fonction calculAge() const monAge = calculAge(dateDeNaissance); En r\u00e8gle g\u00e9n\u00e9rale \u00e9viter les noms de variable trop court ou non significatif. // Le nom ne veut rien dire let a = 'Mon titre'; // C'est beaucoup plus significatif avec ce nom let texteTitre = 'Mon titre'","title":"Bien nommer ses variables"},{"location":"notes_de_cours/js_basics/#exercice","text":"En reprenant ce que vous avez fait dans la section Hello, World , modifier votre code pour utiliser des variables dans les fonctions alert() et console.log().","title":"Exercice"},{"location":"notes_de_cours/js_basics/#interaction","text":"Il y a plusieurs fonctions natives en javascript pour interagir avec le visiteur de notre site. Nous avons d\u00e9j\u00e0 vu alert() qui affiche un message \u00e0 l'\u00e9cran. On va en voir deux autres : prompt(titre, valeur par d\u00e9faut) : Demande \u00e0 l'usager de saisir une valeur. confirm() : Affiche une fen\u00eatre avec un texte et deux boutons, Ok et Cancel.","title":"Interaction"},{"location":"notes_de_cours/js_basics/#alert","text":"Comme nous l'avons vu plus haut, une fa\u00e7on simple d'afficher un message \u00e0 l'usager est d'utiliser la commande alert() . Syntaxe alert('Mon message'); Exemple alert('Bonjour tout le monde!!'); // Affichera Bonjour Mathieu let nom = 'Mathieu'; alert('Bonjour ' + nom);","title":"Alert"},{"location":"notes_de_cours/js_basics/#prompt","text":"Avec prompt() on demande \u00e0 l'usager de saisir une valeur qu'on assignera \u00e0 une variable. Syntaxe prompt(\"Message \u00e0 afficher\", \"Valeur optionnelle par d\u00e9faut\"); Exemple let message = 'Veuillez entrer votre nom'; // On affiche le message et r\u00e9cup\u00e8re la valeur dans la variable nom let nom = prompt(message); // La valeur affich\u00e9 sera ce qui a \u00e9t\u00e9 saisie par l'usager alert(nom); // On peut aussi d\u00e9clarer une valeur par d\u00e9faut qui sera afficher dans la case de saisie. // Ici Mathieu sera inscrit dans la case \u00e0 l'affichage let nomAvecDefaut = prompt(message, 'Mathieu');","title":"Prompt"},{"location":"notes_de_cours/js_basics/#confirm","text":"On peut aussi poser une question \u00e0 l'usager et r\u00e9cup\u00e9rer une valeur True ou False avec la commande confirm() . Syntaxe confirm(\"Texte \u00e0 afficher\"); Exemple let resultat = confirm(\"Voulez-vous continuer?\"); // resultat prendra la valeur True ou False selon le choix de l'usager if (resultat) { alert('Ok on continue.'); } else { alert('On arr\u00eate d\u00e9j\u00e0.'); }","title":"Confirm"},{"location":"notes_de_cours/js_basics/#exercice_1","text":"Demander le nom de l'usager et afficher comme r\u00e9sultat le nom saisie suivi de \", bienvenue sur mon site!\". Posez la question suivante \u00e0 l'usager : \"Est-ce que vous aimez le Javascript?\". Afficher le message \"Super!\" si la r\u00e9ponse est affirmative et \"J'esp\u00e8re que \u00e7a va changer.\" si c'est n\u00e9gatif.","title":"Exercice"},{"location":"notes_de_cours/js_create_element/","text":"Cr\u00e9er, ajouter et supprimer un \u00e9l\u00e9ment Quand le chargement d'un fichier html est termin\u00e9, on a acc\u00e8s \u00e0 un objet document qui repr\u00e9sente la \"node\" principale du document, c'est-\u00e0-dire l'\u00e9l\u00e9ment le plus haut dans la hi\u00e9rarchie des \u00e9l\u00e9ments de la page. En Javascript on utilise document pour acc\u00e9der \u00e0 ces m\u00e9thodes. // S\u00e9lectionner la balise ayant le id container avec l'objet document let monContainer = document.getElementById(\"containerExemple\"); Cr\u00e9er des \u00e9l\u00e9ments On peut cr\u00e9er un \u00e9l\u00e9ment en Javascript en utilisant la m\u00e9thode createElement . Syntaxe document.body.createElement(\"nodename\") // nodename r\u00e9pr\u00e9sente le nom de la balise html Exemple // Cr\u00e9er une nouvelle balise h1 let titre = document.body.createElement(\"h1\"); Ajouter des \u00e9l\u00e9ments Les m\u00e9thodes append() et appendChild() sont utilis\u00e9s pour ajouter des \u00e9l\u00e9ments dans le DOM, on va voir la m\u00e9thode append() . Cette m\u00e9thode prend en param\u00e8tre un \u00e9l\u00e9ment HTLM ou du texte. On peut utiliser append() avec l'objet document ou avec un autre \u00e9l\u00e9ment. // R\u00e9cup\u00e8re l'\u00e9l\u00e9ment avec le id containerExemple (c'est un \u00e9l\u00e9ment div pour l'exemple) let monContainer = document.getElementById(\"containerExemple\"); // Cr\u00e9er un \u00e9l\u00e9ment h1 let titre = document.createElement(\"h1\"); // Ajouter l'\u00e9l\u00e9ment cr\u00e9\u00e9 dans le document, dans la page. La balise h1 sera ajout\u00e9 \u00e0 la suite des autres \u00e9l\u00e9ments \u00e0 l'int\u00e9rieur de la balise body. document.append(titre); // Ajouter l'\u00e9l\u00e9ment cr\u00e9\u00e9 dans l'\u00e9l\u00e9ment monContainer. La balise h1 sera ajout\u00e9 \u00e0 la suite des autres \u00e9l\u00e9ments \u00e0 l'int\u00e9rieur de l'\u00e9l\u00e9ment avec le id containerExemple. monContainer.append(titre); Supprimer des \u00e9l\u00e9ments Pour supprimer un \u00e9l\u00e9ment il suffit de le s\u00e9lectionner et d'utiliser la m\u00e9thode remove() // R\u00e9cup\u00e8re l'\u00e9l\u00e9ment avec le id containerExemple let monContainer = document.getElementById(\"containerExemple\"); // Supprime l'\u00e9l\u00e9ment. Attention tous les \u00e9l\u00e9ments qui \u00e9taient \u00e0 l'int\u00e9rieur de cet \u00e9l\u00e9ment seront aussi supprim\u00e9. monContainer.remove();","title":"Cr\u00e9er, modifier et supprimer des \u00e9l\u00e9ments HTML"},{"location":"notes_de_cours/js_create_element/#creer-ajouter-et-supprimer-un-element","text":"Quand le chargement d'un fichier html est termin\u00e9, on a acc\u00e8s \u00e0 un objet document qui repr\u00e9sente la \"node\" principale du document, c'est-\u00e0-dire l'\u00e9l\u00e9ment le plus haut dans la hi\u00e9rarchie des \u00e9l\u00e9ments de la page. En Javascript on utilise document pour acc\u00e9der \u00e0 ces m\u00e9thodes. // S\u00e9lectionner la balise ayant le id container avec l'objet document let monContainer = document.getElementById(\"containerExemple\");","title":"Cr\u00e9er, ajouter et supprimer un \u00e9l\u00e9ment"},{"location":"notes_de_cours/js_create_element/#creer-des-elements","text":"On peut cr\u00e9er un \u00e9l\u00e9ment en Javascript en utilisant la m\u00e9thode createElement . Syntaxe document.body.createElement(\"nodename\") // nodename r\u00e9pr\u00e9sente le nom de la balise html Exemple // Cr\u00e9er une nouvelle balise h1 let titre = document.body.createElement(\"h1\");","title":"Cr\u00e9er des \u00e9l\u00e9ments"},{"location":"notes_de_cours/js_create_element/#ajouter-des-elements","text":"Les m\u00e9thodes append() et appendChild() sont utilis\u00e9s pour ajouter des \u00e9l\u00e9ments dans le DOM, on va voir la m\u00e9thode append() . Cette m\u00e9thode prend en param\u00e8tre un \u00e9l\u00e9ment HTLM ou du texte. On peut utiliser append() avec l'objet document ou avec un autre \u00e9l\u00e9ment. // R\u00e9cup\u00e8re l'\u00e9l\u00e9ment avec le id containerExemple (c'est un \u00e9l\u00e9ment div pour l'exemple) let monContainer = document.getElementById(\"containerExemple\"); // Cr\u00e9er un \u00e9l\u00e9ment h1 let titre = document.createElement(\"h1\"); // Ajouter l'\u00e9l\u00e9ment cr\u00e9\u00e9 dans le document, dans la page. La balise h1 sera ajout\u00e9 \u00e0 la suite des autres \u00e9l\u00e9ments \u00e0 l'int\u00e9rieur de la balise body. document.append(titre); // Ajouter l'\u00e9l\u00e9ment cr\u00e9\u00e9 dans l'\u00e9l\u00e9ment monContainer. La balise h1 sera ajout\u00e9 \u00e0 la suite des autres \u00e9l\u00e9ments \u00e0 l'int\u00e9rieur de l'\u00e9l\u00e9ment avec le id containerExemple. monContainer.append(titre);","title":"Ajouter des \u00e9l\u00e9ments"},{"location":"notes_de_cours/js_create_element/#supprimer-des-elements","text":"Pour supprimer un \u00e9l\u00e9ment il suffit de le s\u00e9lectionner et d'utiliser la m\u00e9thode remove() // R\u00e9cup\u00e8re l'\u00e9l\u00e9ment avec le id containerExemple let monContainer = document.getElementById(\"containerExemple\"); // Supprime l'\u00e9l\u00e9ment. Attention tous les \u00e9l\u00e9ments qui \u00e9taient \u00e0 l'int\u00e9rieur de cet \u00e9l\u00e9ment seront aussi supprim\u00e9. monContainer.remove();","title":"Supprimer des \u00e9l\u00e9ments"},{"location":"notes_de_cours/js_debug/","text":"D\u00e9boguer nos scripts Plus nos scripts commence \u00e0 prendre de l'ampleur et de la complexit\u00e9, plus il devient important de savoir bien les d\u00e9boguer et trouver les erreurs. Bien que Javascript ne soit pas le langage le plus facile \u00e0 d\u00e9boguer, il y a quand m\u00eame plusieurs m\u00e9thodes \u00e0 notre disposition pour trouver o\u00f9 et comment nos scripts \"coince\". Tous les navigateurs modernes disposent d'outils pour d\u00e9veloppeur, on y acc\u00e8de avec la touche F12 pour les navigateurs Firefox, Chrome et Edge. Les captures d'\u00e9cran qui suivent ont \u00e9t\u00e9 prise avec Firefox mais c'est sensiblement la m\u00eame chose pour les autres navigateurs. Les deux onglets qui nous int\u00e9resse sont la Console et le D\u00e9bogueur . Utilisation de la console Lecture des messages d'erreurs La premi\u00e8re chose \u00e0 faire quand on soup\u00e7onne qu'il y a un probl\u00e8me avec notre script est d'ouvrir la console et de v\u00e9rifier s'il y a des erreurs d'affich\u00e9es. Voici un exemple d'une erreur qui s'affiche au chargement d'une page. On peut voir le message qui indique qu'il y a un probl\u00e8me avec \"inputTexteAfficher\" qui est null. On nous renseigne aussi que le probl\u00e8me provient de la ligne 17 du fichier modification_texte.js. Si je vais voir dans le code j'ai ceci \u00e0 la ligne 17 : J'essaie de changer la valeur de inputTexteAfficher mais selon le message d'erreur il est \u00e9gale \u00e0 null, donc \u00e7a cr\u00e9er une erreur. Si je remonte dans le script pour v\u00e9rifier quand inputTexteAfficher est d\u00e9clar\u00e9 et assign\u00e9, j'ai ceci : En v\u00e9rifiant la ligne 2, je trouve que j'ai fait une erreur dans le id de l'\u00e9l\u00e9ment que j'essaie de r\u00e9cup\u00e9rer \u00e0 la 2. Je corrige, recharge la page et voil\u00e0! Le probl\u00e8me est r\u00e9gl\u00e9. Malheureusement ce n'est pas toujours aussi simple et il faut habituellement chercher plus profond\u00e9ment. Entrer des commandes \u00e0 la console Avec la console on peut aussi entrer directement du code et interagir avec la page affich\u00e9e. J'ai reproduit ici l'erreur pr\u00e9c\u00e9dente. Je peux m\u00eame essayer de corriger le probl\u00e8me par la console. Les modifications ne seront pas inscrites dans le fichier de script mais \u00e7a peut \u00eatre pratique pour tester une solution rapidement. Depuis la console on peut acc\u00e9der \u00e0 tous les \u00e9l\u00e9ments de nos scripts (variables, fonctions, etc.) ainsi que les \u00e9l\u00e9ments du DOM. Afficher des messages \u00e0 la console depuis nos scripts On peut aussi faire afficher nos propres messages dans la console depuis nos scripts avec les commandes suivantes : - - - console.log('Message avec console.log'); console.debug('Message avec console.debug'); console.warn(\"Message avec console.warn\"); console.info(\"Message avec console.info\"); console.error(\"Message avec console.error\"); La diff\u00e9rence entre les diff\u00e9rentes commandes sera la fa\u00e7on dont le message sera affich\u00e9 On peut autant afficher du texte que la valeur d'une variable : Il est aussi possible d'afficher des donn\u00e9es sous forme de tableau avec console.table : Pour plus de d\u00e9tail sur les possibilit\u00e9s de console.table : https://developer.mozilla.org/en-US/docs/Web/API/console/table Utilisation de points d'arr\u00eat Dans l'onglet source, on retrouve les diff\u00e9rents fichiers javascript qui sont utilis\u00e9s par la page. On peut ajouter des points d'arr\u00eats dans ces fichiers en cliquant sur le num\u00e9ro de la ligne. J'ai plac\u00e9 ici un point d'arr\u00eat \u00e0 la ligne 17 pour tester l'erreur de id dans les exemples plus haut. On peut aussi voir dans la fen\u00eatre de droite \u00e0 la section Port\u00e9es les valeurs et la port\u00e9e des variables. On peut imm\u00e9diatement y voir que la variable inputTextAfficher qui cause le probl\u00e8me est null. Ajouter un point d'arr\u00eat dans le code Dans les scripts on peut utiliser debugger; pour forcer l'arr\u00eat de l'ex\u00e9cution du script. L'effet est le m\u00eame que le point d'arr\u00eat Options du d\u00e9bogueur Une fois l'ex\u00e9cution du script arr\u00eat\u00e9 par un point d'arr\u00eat, plusieurs options s'offrent \u00e0 nous. Reprendre l'ex\u00e9cution Ex\u00e9cuter le code ligne par ligne Si la ligne en cours appelle une fonction, \"entrer\" dans la fonction. Si on est dans une fonction, sortir de la fonction On retrouve ses options dans le coin sup\u00e9rieur droit de la fen\u00eatre du d\u00e9bogueur.","title":"D\u00e9bugger nos scripts"},{"location":"notes_de_cours/js_debug/#deboguer-nos-scripts","text":"Plus nos scripts commence \u00e0 prendre de l'ampleur et de la complexit\u00e9, plus il devient important de savoir bien les d\u00e9boguer et trouver les erreurs. Bien que Javascript ne soit pas le langage le plus facile \u00e0 d\u00e9boguer, il y a quand m\u00eame plusieurs m\u00e9thodes \u00e0 notre disposition pour trouver o\u00f9 et comment nos scripts \"coince\". Tous les navigateurs modernes disposent d'outils pour d\u00e9veloppeur, on y acc\u00e8de avec la touche F12 pour les navigateurs Firefox, Chrome et Edge. Les captures d'\u00e9cran qui suivent ont \u00e9t\u00e9 prise avec Firefox mais c'est sensiblement la m\u00eame chose pour les autres navigateurs. Les deux onglets qui nous int\u00e9resse sont la Console et le D\u00e9bogueur .","title":"D\u00e9boguer nos scripts"},{"location":"notes_de_cours/js_debug/#utilisation-de-la-console","text":"","title":"Utilisation de la console"},{"location":"notes_de_cours/js_debug/#lecture-des-messages-derreurs","text":"La premi\u00e8re chose \u00e0 faire quand on soup\u00e7onne qu'il y a un probl\u00e8me avec notre script est d'ouvrir la console et de v\u00e9rifier s'il y a des erreurs d'affich\u00e9es. Voici un exemple d'une erreur qui s'affiche au chargement d'une page. On peut voir le message qui indique qu'il y a un probl\u00e8me avec \"inputTexteAfficher\" qui est null. On nous renseigne aussi que le probl\u00e8me provient de la ligne 17 du fichier modification_texte.js. Si je vais voir dans le code j'ai ceci \u00e0 la ligne 17 : J'essaie de changer la valeur de inputTexteAfficher mais selon le message d'erreur il est \u00e9gale \u00e0 null, donc \u00e7a cr\u00e9er une erreur. Si je remonte dans le script pour v\u00e9rifier quand inputTexteAfficher est d\u00e9clar\u00e9 et assign\u00e9, j'ai ceci : En v\u00e9rifiant la ligne 2, je trouve que j'ai fait une erreur dans le id de l'\u00e9l\u00e9ment que j'essaie de r\u00e9cup\u00e9rer \u00e0 la 2. Je corrige, recharge la page et voil\u00e0! Le probl\u00e8me est r\u00e9gl\u00e9. Malheureusement ce n'est pas toujours aussi simple et il faut habituellement chercher plus profond\u00e9ment.","title":"Lecture des messages d'erreurs"},{"location":"notes_de_cours/js_debug/#entrer-des-commandes-a-la-console","text":"Avec la console on peut aussi entrer directement du code et interagir avec la page affich\u00e9e. J'ai reproduit ici l'erreur pr\u00e9c\u00e9dente. Je peux m\u00eame essayer de corriger le probl\u00e8me par la console. Les modifications ne seront pas inscrites dans le fichier de script mais \u00e7a peut \u00eatre pratique pour tester une solution rapidement. Depuis la console on peut acc\u00e9der \u00e0 tous les \u00e9l\u00e9ments de nos scripts (variables, fonctions, etc.) ainsi que les \u00e9l\u00e9ments du DOM.","title":"Entrer des commandes \u00e0 la console"},{"location":"notes_de_cours/js_debug/#afficher-des-messages-a-la-console-depuis-nos-scripts","text":"On peut aussi faire afficher nos propres messages dans la console depuis nos scripts avec les commandes suivantes : - - - console.log('Message avec console.log'); console.debug('Message avec console.debug'); console.warn(\"Message avec console.warn\"); console.info(\"Message avec console.info\"); console.error(\"Message avec console.error\"); La diff\u00e9rence entre les diff\u00e9rentes commandes sera la fa\u00e7on dont le message sera affich\u00e9 On peut autant afficher du texte que la valeur d'une variable : Il est aussi possible d'afficher des donn\u00e9es sous forme de tableau avec console.table : Pour plus de d\u00e9tail sur les possibilit\u00e9s de console.table : https://developer.mozilla.org/en-US/docs/Web/API/console/table","title":"Afficher des messages \u00e0 la console depuis nos scripts"},{"location":"notes_de_cours/js_debug/#utilisation-de-points-darret","text":"Dans l'onglet source, on retrouve les diff\u00e9rents fichiers javascript qui sont utilis\u00e9s par la page. On peut ajouter des points d'arr\u00eats dans ces fichiers en cliquant sur le num\u00e9ro de la ligne. J'ai plac\u00e9 ici un point d'arr\u00eat \u00e0 la ligne 17 pour tester l'erreur de id dans les exemples plus haut. On peut aussi voir dans la fen\u00eatre de droite \u00e0 la section Port\u00e9es les valeurs et la port\u00e9e des variables. On peut imm\u00e9diatement y voir que la variable inputTextAfficher qui cause le probl\u00e8me est null.","title":"Utilisation de points d'arr\u00eat"},{"location":"notes_de_cours/js_debug/#ajouter-un-point-darret-dans-le-code","text":"Dans les scripts on peut utiliser debugger; pour forcer l'arr\u00eat de l'ex\u00e9cution du script. L'effet est le m\u00eame que le point d'arr\u00eat","title":"Ajouter un point d'arr\u00eat dans le code"},{"location":"notes_de_cours/js_debug/#options-du-debogueur","text":"Une fois l'ex\u00e9cution du script arr\u00eat\u00e9 par un point d'arr\u00eat, plusieurs options s'offrent \u00e0 nous. Reprendre l'ex\u00e9cution Ex\u00e9cuter le code ligne par ligne Si la ligne en cours appelle une fonction, \"entrer\" dans la fonction. Si on est dans une fonction, sortir de la fonction On retrouve ses options dans le coin sup\u00e9rieur droit de la fen\u00eatre du d\u00e9bogueur.","title":"Options du d\u00e9bogueur"},{"location":"notes_de_cours/js_element_text/","text":"","title":"Js element text"},{"location":"notes_de_cours/js_function/","text":"Les fonctions en Javascript D\u00e9clarer une fonction Pour d\u00e9clarer une fonction, un utilise la commande function suivi du nom de la fonction. Ensuite on peut accepter des param\u00e8tres dont on va indiquer le nom entre parenth\u00e8se. function maFonction(param1, param2) { // ... } Lancer une fonction Param\u00e8tres de fonction","title":"Les fonctions en Javascript"},{"location":"notes_de_cours/js_function/#les-fonctions-en-javascript","text":"","title":"Les fonctions en Javascript"},{"location":"notes_de_cours/js_function/#declarer-une-fonction","text":"Pour d\u00e9clarer une fonction, un utilise la commande function suivi du nom de la fonction. Ensuite on peut accepter des param\u00e8tres dont on va indiquer le nom entre parenth\u00e8se. function maFonction(param1, param2) { // ... }","title":"D\u00e9clarer une fonction"},{"location":"notes_de_cours/js_function/#lancer-une-fonction","text":"","title":"Lancer une fonction"},{"location":"notes_de_cours/js_function/#parametres-de-fonction","text":"","title":"Param\u00e8tres de fonction"},{"location":"notes_de_cours/js_getelement/","text":"S\u00e9lectionner un \u00e9l\u00e9ment HTML en JS On peut s\u00e9lectionner un ou plusieurs \u00e9l\u00e9ment HTML par diff\u00e9rente fonction de l'objet document Prenons pour exemple le html suivant <div class=\"conteneur-horloge\"> <div id=\"affichage-date\" class=\"boite\"></div> <div id=\"affichage-heure\" class=\"boite\"></div> </div> getElementById() Pour s\u00e9lectionner un \u00e9l\u00e9ment par son id qu'on doit lui passer en param\u00eatre. La fonction retourne un HTLMElement let affichageDate = document.getElementById('affichage-date); getElementsByClassName() Pour s\u00e9lectionner un \u00e9l\u00e9ment par sa classe qu'on doit lui passer en param\u00eatre. La fonction retourne un HTLMCollection d'\u00e9l\u00e9ments (une sorte de tableau) let listeBoites = document.getElementsByClassName('boite'); // Pour parcourir la collection on peut faire une boucle standart for (let i = 0; i < listeBoites.length; i++) { console.log(listeBoites[i]); } // On peut aussi utiliser une boucle for for (let boite of listeBoites) { console.log(boite); } querySelector() Retourne le premier \u00e9l\u00e9ment qui correspont au s\u00e9lecteur pass\u00e9 en param\u00eatre. On peut utiliser les s\u00e9lecteurs qu'on a appris en css. Retourne un HTMLElement // Je s\u00e9lectionne toutes les divs qui sont enfant de l'\u00e9l\u00e9ment avec la classe conteneur-horloge mais la fonction va me retourner que la premi\u00e8re let listeBoites = document.querySelector('.conteneur-horloge div'); querySelectorAll() La m\u00eame chose que pour querySelector mais retourne tous les \u00e9l\u00e9ments correspondants sous forme de NodeList (un array) // Je s\u00e9lectionne toutes les divs qui sont enfant de l'\u00e9l\u00e9ment avec la classe conteneur-horloge let listeBoites = document.querySelector('.conteneur-horloge div'); // Je peux parcourir le r\u00e9sultat comme un tableau for (let boite of listeBoites) { console.log(boite); } // mais aussi avec une boucle foreach listeBoites.forEach(boite => { console.log(boite); });","title":"S\u00e9lectionner un \u00e9l\u00e9ment HTML"},{"location":"notes_de_cours/js_getelement/#selectionner-un-element-html-en-js","text":"On peut s\u00e9lectionner un ou plusieurs \u00e9l\u00e9ment HTML par diff\u00e9rente fonction de l'objet document Prenons pour exemple le html suivant <div class=\"conteneur-horloge\"> <div id=\"affichage-date\" class=\"boite\"></div> <div id=\"affichage-heure\" class=\"boite\"></div> </div>","title":"S\u00e9lectionner un \u00e9l\u00e9ment HTML en JS"},{"location":"notes_de_cours/js_getelement/#getelementbyid","text":"Pour s\u00e9lectionner un \u00e9l\u00e9ment par son id qu'on doit lui passer en param\u00eatre. La fonction retourne un HTLMElement let affichageDate = document.getElementById('affichage-date);","title":"getElementById()"},{"location":"notes_de_cours/js_getelement/#getelementsbyclassname","text":"Pour s\u00e9lectionner un \u00e9l\u00e9ment par sa classe qu'on doit lui passer en param\u00eatre. La fonction retourne un HTLMCollection d'\u00e9l\u00e9ments (une sorte de tableau) let listeBoites = document.getElementsByClassName('boite'); // Pour parcourir la collection on peut faire une boucle standart for (let i = 0; i < listeBoites.length; i++) { console.log(listeBoites[i]); } // On peut aussi utiliser une boucle for for (let boite of listeBoites) { console.log(boite); }","title":"getElementsByClassName()"},{"location":"notes_de_cours/js_getelement/#queryselector","text":"Retourne le premier \u00e9l\u00e9ment qui correspont au s\u00e9lecteur pass\u00e9 en param\u00eatre. On peut utiliser les s\u00e9lecteurs qu'on a appris en css. Retourne un HTMLElement // Je s\u00e9lectionne toutes les divs qui sont enfant de l'\u00e9l\u00e9ment avec la classe conteneur-horloge mais la fonction va me retourner que la premi\u00e8re let listeBoites = document.querySelector('.conteneur-horloge div');","title":"querySelector()"},{"location":"notes_de_cours/js_getelement/#queryselectorall","text":"La m\u00eame chose que pour querySelector mais retourne tous les \u00e9l\u00e9ments correspondants sous forme de NodeList (un array) // Je s\u00e9lectionne toutes les divs qui sont enfant de l'\u00e9l\u00e9ment avec la classe conteneur-horloge let listeBoites = document.querySelector('.conteneur-horloge div'); // Je peux parcourir le r\u00e9sultat comme un tableau for (let boite of listeBoites) { console.log(boite); } // mais aussi avec une boucle foreach listeBoites.forEach(boite => { console.log(boite); });","title":"querySelectorAll()"},{"location":"notes_de_cours/js_local_storage/","text":"Stocker de l'information dans le navigateur On peut stocker de l'information directement dans le navigateur avec les objets localStorage et sessionStorage . La diff\u00e9rence entre les deux est que les informations stock\u00e9s avec localStorage survivent m\u00eame si on red\u00e9marre le navigateur alors qu'avec sessionStorage les donn\u00e9es peuvent survivre \u00e0 un rafraichissement de la page uniquement. Ces deux objets fonctionnent un peu comme un cookie mais avec certaines diff\u00e9rences. On utilise les cookies surtout au niveau \"serveur\" du site internet alors que les objets \"storage\" seront utilis\u00e9s du c\u00f4t\u00e9 client. Qu'on utilise localStorage ou sessionStorage les donn\u00e9es \u00e0 sauvegarder sont saisie sous la forme cl\u00e9/valeur. La valeur \u00e0 sauvegarder doit \u00eatre du texte (string). Dans le cas contraire (un nombre, un bool\u00e9en, un objet, etc...) la valeur sera convertie automatiquement en texte. Ajouter une valeur La fonction setItem(cl\u00e9, valeur) permet d'ajouter une valeur localStorage.setItem('prenom', 'Mathieu'); R\u00e9cup\u00e9rer une valeur La fonction getItem(cl\u00e9) permet de r\u00e9cup\u00e9rer une valeur. Elle retournera NULL si la cl\u00e9 n'est pas trouv\u00e9. On peut donc s'en servir aussi pour tester si la cl\u00e9 existe dans le stockage local. // Retourne la valeur de la cl\u00e9 prenom let prenom = localStorage.getItem('prenom'); // Teste si la cl\u00e9 pr\u00e9nom existe dans le stockage local if (localStorage.getItem('prenom') === null) { // ... } Supprimer une valeur La fonction removeItem(cl\u00e9) permet de supprimer une valeur du stockage. On peu aussi supprimer toutes les valeurs avec clear() . // Supprime l'entr\u00e9e prenom du stockage localStorage.removeItem('prenom'); // Supprime toutes les entr\u00e9es localStorage.clear;","title":"Stocker de l'information dans le navigateur"},{"location":"notes_de_cours/js_local_storage/#stocker-de-linformation-dans-le-navigateur","text":"On peut stocker de l'information directement dans le navigateur avec les objets localStorage et sessionStorage . La diff\u00e9rence entre les deux est que les informations stock\u00e9s avec localStorage survivent m\u00eame si on red\u00e9marre le navigateur alors qu'avec sessionStorage les donn\u00e9es peuvent survivre \u00e0 un rafraichissement de la page uniquement. Ces deux objets fonctionnent un peu comme un cookie mais avec certaines diff\u00e9rences. On utilise les cookies surtout au niveau \"serveur\" du site internet alors que les objets \"storage\" seront utilis\u00e9s du c\u00f4t\u00e9 client. Qu'on utilise localStorage ou sessionStorage les donn\u00e9es \u00e0 sauvegarder sont saisie sous la forme cl\u00e9/valeur. La valeur \u00e0 sauvegarder doit \u00eatre du texte (string). Dans le cas contraire (un nombre, un bool\u00e9en, un objet, etc...) la valeur sera convertie automatiquement en texte.","title":"Stocker de l'information dans le navigateur"},{"location":"notes_de_cours/js_local_storage/#ajouter-une-valeur","text":"La fonction setItem(cl\u00e9, valeur) permet d'ajouter une valeur localStorage.setItem('prenom', 'Mathieu');","title":"Ajouter une valeur"},{"location":"notes_de_cours/js_local_storage/#recuperer-une-valeur","text":"La fonction getItem(cl\u00e9) permet de r\u00e9cup\u00e9rer une valeur. Elle retournera NULL si la cl\u00e9 n'est pas trouv\u00e9. On peut donc s'en servir aussi pour tester si la cl\u00e9 existe dans le stockage local. // Retourne la valeur de la cl\u00e9 prenom let prenom = localStorage.getItem('prenom'); // Teste si la cl\u00e9 pr\u00e9nom existe dans le stockage local if (localStorage.getItem('prenom') === null) { // ... }","title":"R\u00e9cup\u00e9rer une valeur"},{"location":"notes_de_cours/js_local_storage/#supprimer-une-valeur","text":"La fonction removeItem(cl\u00e9) permet de supprimer une valeur du stockage. On peu aussi supprimer toutes les valeurs avec clear() . // Supprime l'entr\u00e9e prenom du stockage localStorage.removeItem('prenom'); // Supprime toutes les entr\u00e9es localStorage.clear;","title":"Supprimer une valeur"},{"location":"notes_de_cours/web_hebergement/","text":"Choix d'un h\u00e9bergeur La premi\u00e8re \u00e9tape pour mettre un site en ligne est d'avoir un espace pour l'h\u00e9berger sur un serveur web. On va faire affaire avec un h\u00e9bergeur pour \"louer\" cette espace. Vous allez avoir besoin de cet h\u00e9bergement pour les deux prochaines ann\u00e9es dans diff\u00e9rent cour. Je vous r\u00e9f\u00e8re \u00e0 ces notes de Christiane Lagac\u00e9 qui explique ce qu'est un h\u00e9bergeur et dresse une liste de diff\u00e9rent site d'h\u00e9bergement. https://apical.xyz/fiches/mise_en_ligne_d_un_site_wordpress/Le_choix_d_un_hebergeur https://apical.xyz/fiches/mise_en_ligne_d_un_site_wordpress/Choisir_et_reserver_son_nom_de_domaine Le choix est libre \u00e0 vous. Assurez-vous par contre d'avoir les caract\u00e9ristiques suivantes dans votre forfait : Acc\u00e8s \u00e0 un nom de domaine. (Si votre forfait ne l'offre pas, vous pouvez toujours en acheter un \u00e0 part) Supporter PHP et MySQL Dans le doute vous pouvez valider avec moi ou Christiane.","title":"Choix d'un h\u00e9bergeur"},{"location":"notes_de_cours/web_hebergement/#choix-dun-hebergeur","text":"La premi\u00e8re \u00e9tape pour mettre un site en ligne est d'avoir un espace pour l'h\u00e9berger sur un serveur web. On va faire affaire avec un h\u00e9bergeur pour \"louer\" cette espace. Vous allez avoir besoin de cet h\u00e9bergement pour les deux prochaines ann\u00e9es dans diff\u00e9rent cour. Je vous r\u00e9f\u00e8re \u00e0 ces notes de Christiane Lagac\u00e9 qui explique ce qu'est un h\u00e9bergeur et dresse une liste de diff\u00e9rent site d'h\u00e9bergement. https://apical.xyz/fiches/mise_en_ligne_d_un_site_wordpress/Le_choix_d_un_hebergeur https://apical.xyz/fiches/mise_en_ligne_d_un_site_wordpress/Choisir_et_reserver_son_nom_de_domaine Le choix est libre \u00e0 vous. Assurez-vous par contre d'avoir les caract\u00e9ristiques suivantes dans votre forfait : Acc\u00e8s \u00e0 un nom de domaine. (Si votre forfait ne l'offre pas, vous pouvez toujours en acheter un \u00e0 part) Supporter PHP et MySQL Dans le doute vous pouvez valider avec moi ou Christiane.","title":"Choix d'un h\u00e9bergeur"}]}