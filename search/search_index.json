{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Accueil"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/","text":"Exercice 15 - Horloge en javascript Comme premier exercice en javascript, on va cr\u00e9er une horloge digitale qui affichera la date et l'heure actuelle. On va aussi utiliser une police d'\u00e9criture offerte par Google Fonts. Premi\u00e8re partie Caract\u00e9ristiques La date doit \u00eatre sous la forme nomDuJour aaaa-mm-dd (Vendredi 2021-10-01). Le format de l'heure doit \u00eatre hh:mm:ss [AM/PM] (00:31:45 AM). Vous allez devoir faire un calcul pour \"ramener\" l'heure sur 12 heures et afficher AM ou PM selon le cas. L'horloge doit \u00eatre rafraichi \u00e0 toute les secondes. Astuce, cr\u00e9ez une division pour la date et une autre pour l'heure. Ensuite en javascript allez modifier le texte \u00e0 l'int\u00e9rieur des divisions \u00e0 l'aide de innerHTML . Notions dont vous aurez besoin Fonctions date // R\u00e9cup\u00e9rer la date et l'heure actuelle dans une variable let dateActuel = new Date(); // Isoler une partie de la date ou de l'heure let heure = dateActuel.getHours(); let mois = dateActuel.getMonth(); // Il y a des fonctions pour chaque \"\u00e9l\u00e9ment\" de la date Documentation : https://www.w3schools.com/jsref/jsref_obj_date.asp S\u00e9lectionner une balise html getElementById() // S\u00e9lectionner un \u00e9l\u00e9ment selon son id let displayDate = document.getElementById('date_display'); displayDate.innerHTML = \"Ma date\"; querySelector // S\u00e9lectionner un \u00e9l\u00e9ment avec un s\u00e9lecteur CSS let displayDate = document.querySelector('#date_display'); displayDate.innerHTML = \"Ma date\"; Lancer une fonction de mani\u00e8re p\u00e9riodique Comme piste de solution, regardez les fonctions setInterval ou setTimout. /** * Function qui affiche l'heure */ function afficheHeure() { // ... } // setInterval prend une fonction en param\u00eatre et un interval de temps en millisecondes. // \u00c0 chaque intervale la fonction sera appel\u00e9e. setInterval(afficheHeure, 1000); Oublions pas le css Englobez votre horloge dans une division qui sera align\u00e9e \u00e0 droite (le texte sera aussi align\u00e9 \u00e0 droite dans chaque division). Donnez un effet de transparence \u00e0 la division de l'horloge. Utilisez une police de caract\u00e8re de Google Font. Ajoutez une image de fond \u00e0 la page. Deuxi\u00e8me partie Pour aller un peu plus loin avec notre horloge, on va ajouter une liste d'icone sur le c\u00f4t\u00e9 gauche de la page pour offrir des options d'affichage. Utilisation d'icones de Font Awesome Pour les icones du menu d'options, utilisez les icones offertes par Font Awesome (https://fontawesome.com/). Dans le cadre de notre exercice, vous allez t\u00e9l\u00e9charger une copie des icones et les inclure dans votre projet. Consulter la documentation \u00e0 l'adresse suivante : https://fontawesome.com/v5.15/how-to-use/on-the-web/setup/hosting-font-awesome-yourself. Vous y trouverez un lien de t\u00e9l\u00e9chargement et la marche \u00e0 suivre \u00e0 la section \" Using Web Fonts with CSS \". Pour le choix du t\u00e9l\u00e9chargement, utilisez l'ic\u00f4ne \"Free For Web\". Le choix des icones est libre, vous pouvez faire une recherche sur le site de Font Awesome (avec le t\u00e9l\u00e9chargement vous avez acc\u00e8s qu'aux icones gratuites). Comportement des icones L'icone doit changer de couleur quand on la survole. Le curseur de la souris doit \u00eatre une \"main\". Quand on survole l'icone, affichez une bulle de texte qui d\u00e9crit l'option. Quand on clique sur l'icone, la couleur de l'icone devient la m\u00eame que lors de son survol. Si on clique \u00e0 nouveau elle reprend sa couleur originale. (\u00c7a va donner une sorte de On/Off). Toujours quand on clique sur l'icone, une fonction javascript est lanc\u00e9 pour effectu\u00e9 le traitement requis. Affichage sur 24 heures La premi\u00e8re option nous permet de basculer l'affichage de l'heure en mode 12 heures ou 24 heures. (https://fr.wikipedia.org/wiki/Syst%C3%A8me_horaire_sur_12_heures#Correspondance) Masquer la date La deuxi\u00e8me option nous permet de masquer la date du jour. Notes Les options sont cumulatives, on peut masquer la date et avoir un affichage sur 24 heures. Indices En javascript, on peut \"toggle\" une classe sur un \u00e9l\u00e9ment html, c'est-\u00e0-dire l'ajouter si elle n'est pas pr\u00e9sente ou l'enlever dans le cas inverse. // Ici \"icone\" est un objet qui repr\u00e9sente l'icone qui a \u00e9t\u00e9 cliqu\u00e9 icone.classList.toggle(\"selected\"); Pour la bulle d'aide, il y a plusieurs exemples de \"tooltip\" que vous pouvez trouver en cherchant moindrement. \u00c0 vous de les adapter \u00e0 vos besoins. Si vous ne voulez pas \"d\u00e9truire\" la disposition que vous aviez d\u00e9j\u00e0 fait de votre page avec les icones \u00e0 ajouter, regardez du c\u00f4t\u00e9 de la propri\u00e9t\u00e9 css position: absolute; . On peut associer une fonction javascript \u00e0 un \u00e9v\u00e9nement directement dans le html, par exemple si on veut d\u00e9clencher la fonction quand on clique sur l'\u00e9l\u00e9ment html, on va utiliser onclick avec la fonction \u00e0 \u00e9x\u00e9cuter en valeur : <!-- ici sur un clique sur l'icone on va lancer la fonction changerAffichage12h en passant this en param\u00eatre (voir plus bas pour le param\u00eatre this) --> <i id=\"icon_periode\" class=\"far fa-clock\" onclick=\"changerAffichage12h(this)\"></i> Quand on appelle une fonction javascript depuis un \u00e9l\u00e9ment HTML, on peut \"passer\" cette \u00e9l\u00e9ment en param\u00e8tre de la fonction avec this . Voir exemple plus bas <!-- Dans votre fichier HTML --> <button onclick=\"maFonction(this)\"></button> // Dans votre script function maFonction(bouton){ // la variable bouton contient l'\u00e9l\u00e9ment button qui \u00e0 appeler la fonction // on peut maintenant l'utiliser, un peut comme on la fait avec getElementById // Ex. Je veux changer le texte du bouton bouton.innerHTML = \"Cliquez-moi... svp\"; }","title":"Exercice 15 - Horloge Javascript"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#exercice-15-horloge-en-javascript","text":"Comme premier exercice en javascript, on va cr\u00e9er une horloge digitale qui affichera la date et l'heure actuelle. On va aussi utiliser une police d'\u00e9criture offerte par Google Fonts.","title":"Exercice 15 - Horloge en javascript"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#premiere-partie","text":"","title":"Premi\u00e8re partie"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#caracteristiques","text":"La date doit \u00eatre sous la forme nomDuJour aaaa-mm-dd (Vendredi 2021-10-01). Le format de l'heure doit \u00eatre hh:mm:ss [AM/PM] (00:31:45 AM). Vous allez devoir faire un calcul pour \"ramener\" l'heure sur 12 heures et afficher AM ou PM selon le cas. L'horloge doit \u00eatre rafraichi \u00e0 toute les secondes. Astuce, cr\u00e9ez une division pour la date et une autre pour l'heure. Ensuite en javascript allez modifier le texte \u00e0 l'int\u00e9rieur des divisions \u00e0 l'aide de innerHTML .","title":"Caract\u00e9ristiques"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#notions-dont-vous-aurez-besoin","text":"","title":"Notions dont vous aurez besoin"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#fonctions-date","text":"// R\u00e9cup\u00e9rer la date et l'heure actuelle dans une variable let dateActuel = new Date(); // Isoler une partie de la date ou de l'heure let heure = dateActuel.getHours(); let mois = dateActuel.getMonth(); // Il y a des fonctions pour chaque \"\u00e9l\u00e9ment\" de la date Documentation : https://www.w3schools.com/jsref/jsref_obj_date.asp","title":"Fonctions date"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#selectionner-une-balise-html","text":"getElementById() // S\u00e9lectionner un \u00e9l\u00e9ment selon son id let displayDate = document.getElementById('date_display'); displayDate.innerHTML = \"Ma date\"; querySelector // S\u00e9lectionner un \u00e9l\u00e9ment avec un s\u00e9lecteur CSS let displayDate = document.querySelector('#date_display'); displayDate.innerHTML = \"Ma date\";","title":"S\u00e9lectionner une balise html"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#lancer-une-fonction-de-maniere-periodique","text":"Comme piste de solution, regardez les fonctions setInterval ou setTimout. /** * Function qui affiche l'heure */ function afficheHeure() { // ... } // setInterval prend une fonction en param\u00eatre et un interval de temps en millisecondes. // \u00c0 chaque intervale la fonction sera appel\u00e9e. setInterval(afficheHeure, 1000);","title":"Lancer une fonction de mani\u00e8re p\u00e9riodique"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#oublions-pas-le-css","text":"Englobez votre horloge dans une division qui sera align\u00e9e \u00e0 droite (le texte sera aussi align\u00e9 \u00e0 droite dans chaque division). Donnez un effet de transparence \u00e0 la division de l'horloge. Utilisez une police de caract\u00e8re de Google Font. Ajoutez une image de fond \u00e0 la page.","title":"Oublions pas le css"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#deuxieme-partie","text":"Pour aller un peu plus loin avec notre horloge, on va ajouter une liste d'icone sur le c\u00f4t\u00e9 gauche de la page pour offrir des options d'affichage.","title":"Deuxi\u00e8me partie"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#utilisation-dicones-de-font-awesome","text":"Pour les icones du menu d'options, utilisez les icones offertes par Font Awesome (https://fontawesome.com/). Dans le cadre de notre exercice, vous allez t\u00e9l\u00e9charger une copie des icones et les inclure dans votre projet. Consulter la documentation \u00e0 l'adresse suivante : https://fontawesome.com/v5.15/how-to-use/on-the-web/setup/hosting-font-awesome-yourself. Vous y trouverez un lien de t\u00e9l\u00e9chargement et la marche \u00e0 suivre \u00e0 la section \" Using Web Fonts with CSS \". Pour le choix du t\u00e9l\u00e9chargement, utilisez l'ic\u00f4ne \"Free For Web\". Le choix des icones est libre, vous pouvez faire une recherche sur le site de Font Awesome (avec le t\u00e9l\u00e9chargement vous avez acc\u00e8s qu'aux icones gratuites).","title":"Utilisation d'icones de Font Awesome"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#comportement-des-icones","text":"L'icone doit changer de couleur quand on la survole. Le curseur de la souris doit \u00eatre une \"main\". Quand on survole l'icone, affichez une bulle de texte qui d\u00e9crit l'option. Quand on clique sur l'icone, la couleur de l'icone devient la m\u00eame que lors de son survol. Si on clique \u00e0 nouveau elle reprend sa couleur originale. (\u00c7a va donner une sorte de On/Off). Toujours quand on clique sur l'icone, une fonction javascript est lanc\u00e9 pour effectu\u00e9 le traitement requis.","title":"Comportement des icones"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#affichage-sur-24-heures","text":"La premi\u00e8re option nous permet de basculer l'affichage de l'heure en mode 12 heures ou 24 heures. (https://fr.wikipedia.org/wiki/Syst%C3%A8me_horaire_sur_12_heures#Correspondance)","title":"Affichage sur 24 heures"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#masquer-la-date","text":"La deuxi\u00e8me option nous permet de masquer la date du jour.","title":"Masquer la date"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#notes","text":"Les options sont cumulatives, on peut masquer la date et avoir un affichage sur 24 heures.","title":"Notes"},{"location":"exercices/ex15_horlogeJS/ex15_enonce/#indices","text":"En javascript, on peut \"toggle\" une classe sur un \u00e9l\u00e9ment html, c'est-\u00e0-dire l'ajouter si elle n'est pas pr\u00e9sente ou l'enlever dans le cas inverse. // Ici \"icone\" est un objet qui repr\u00e9sente l'icone qui a \u00e9t\u00e9 cliqu\u00e9 icone.classList.toggle(\"selected\"); Pour la bulle d'aide, il y a plusieurs exemples de \"tooltip\" que vous pouvez trouver en cherchant moindrement. \u00c0 vous de les adapter \u00e0 vos besoins. Si vous ne voulez pas \"d\u00e9truire\" la disposition que vous aviez d\u00e9j\u00e0 fait de votre page avec les icones \u00e0 ajouter, regardez du c\u00f4t\u00e9 de la propri\u00e9t\u00e9 css position: absolute; . On peut associer une fonction javascript \u00e0 un \u00e9v\u00e9nement directement dans le html, par exemple si on veut d\u00e9clencher la fonction quand on clique sur l'\u00e9l\u00e9ment html, on va utiliser onclick avec la fonction \u00e0 \u00e9x\u00e9cuter en valeur : <!-- ici sur un clique sur l'icone on va lancer la fonction changerAffichage12h en passant this en param\u00eatre (voir plus bas pour le param\u00eatre this) --> <i id=\"icon_periode\" class=\"far fa-clock\" onclick=\"changerAffichage12h(this)\"></i> Quand on appelle une fonction javascript depuis un \u00e9l\u00e9ment HTML, on peut \"passer\" cette \u00e9l\u00e9ment en param\u00e8tre de la fonction avec this . Voir exemple plus bas <!-- Dans votre fichier HTML --> <button onclick=\"maFonction(this)\"></button> // Dans votre script function maFonction(bouton){ // la variable bouton contient l'\u00e9l\u00e9ment button qui \u00e0 appeler la fonction // on peut maintenant l'utiliser, un peut comme on la fait avec getElementById // Ex. Je veux changer le texte du bouton bouton.innerHTML = \"Cliquez-moi... svp\"; }","title":"Indices"},{"location":"notes_de_cours/js_basics/","text":"Javascript - Les bases D\u00e9velopp\u00e9 initialement pour ajouter un peu de dynamisme aux pages web, Javascript est devenu aujourd'hui un incontournable du d\u00e9veloppement web. Il peut \u00eatre utilis\u00e9 \u00e0 la fois du c\u00f4t\u00e9 client (depuis un navigateur) ou bien du c\u00f4t\u00e9 serveur. C'est un langage de script qui n'a pas besoin d'\u00eatre compil\u00e9, il est ex\u00e9cut\u00e9 directement par le navigateur. Les scripts (nom donn\u00e9 aux \"programmes\" javascript) peuvent \u00eatre \u00e9cris directement dans un fichier HTML et ex\u00e9cut\u00e9 automatiquement au chargement de la page. O\u00f9 ajouter nos scripts Dans un fichier HTML On peut ajouter un script un peu n'importe o\u00f9 dans un fichier html avec la balise script , dans la balise head , dans le body , etc. C'est une question de pr\u00e9f\u00e9rence. Personnellement j'ajoute mes scripts \u00e0 l'int\u00e9rieur de la balise head . La syntaxe est la suivante : <script type=\"text/javascript\"> alert('Hello, world!'); </script> Dans cette exemple, une message s'affichera \u00e0 l'\u00e9cran avec le texte Hello, world! . L'attribut type dans la balise n'est plus vraiment n\u00e9cessaire aujourd'hui, on peut l'omettre sans probl\u00e8me. Id\u00e9alement, on va r\u00e9server l'ajout de script directement dans un fichier html \u00e0 des utilisations simples et br\u00e8ves. La plupart du temps les scripts contenu dans des fichiers externes. Dans un fichier externe Un peu comme avec le css, on peut \u00e9crire nos scripts dans un ou des fichiers externes et les appel\u00e9s depuis nos page html. Pour ce faire on va aussi utiliser la balise script mais en ajoutant l'attribut src . <script src=\"mes_scripts.js\"></script> <!-- Pour ajouter plus d'un fichier, on r\u00e9p\u00e8te avec les autres fichiers --> <script src=\"deuxieme_script.js\"></script> La maintenance et la clart\u00e9 du code est une raison d'extraire les scripts dans des fichiers externe. Mais l'avantage majeure est que le navigateur va t\u00e9l\u00e9charger les fichiers en cache. Ensuite si une autre page html fait r\u00e9f\u00e9rence \u00e0 un des fichiers t\u00e9l\u00e9charg\u00e9s, il sera lu depuis le cache et non pas t\u00e9l\u00e9charg\u00e9 \u00e0 nouveau, ce qui r\u00e9duit le trafic et permet \u00e0 la page de s'afficher plus rapidement. Utilisation de l'attribut defer et async de la balise script Par d\u00e9faut, quand on charge un script depuis un fichier externe, il sera ex\u00e9cut\u00e9 imm\u00e9diatement. \u00c7a peut poser un probl\u00e8me si notre script interagit avec des \u00e9l\u00e9ments du DOM car ceux-ci peuvent ne pas \u00eatre encore \"charg\u00e9\" (accessible) lors de ex\u00e9cution du script. Pour palier \u00e0 ce probl\u00e8me on peut soit charger nos scripts \u00e0 la toute fin de notre fichier HTML ou bien plus utiliser l'attribut defer ou async de la balise script . defer sera utilis\u00e9 quand on veut manipuler des \u00e9l\u00e9ments de la page et \u00eatre sur qu'ils sont charg\u00e9s. async sera utilis\u00e9 pour un script qui est totalement ind\u00e9pendant de la page html. Attention par contre car en utilisant ces deux attributs, la page peut se termin\u00e9 de charger avant que les scripts soient ex\u00e9cut\u00e9. \u00c7a peut cr\u00e9er de petits probl\u00e8me visuel selon la nature des scripts. Exemple <script defer src=\"mes_scripts.js\"></script> <script async src=\"mon_script_async.js\"></script> Source : https://javascript.info/script-async-defer Hello, World Et oui, on n'y \u00e9chappera pas :smiling_imp:, on va faire un premier exemple avec un bon vieux Hello, World. Dans le r\u00e9pertoire du cours, cr\u00e9ez vous un sous-dossier nomm\u00e9 helloworld_js. Dans ce sous-r\u00e9pertoire cr\u00e9ez un fichier nomm\u00e9 helloworld.html et ajoutez-y les balises de base d'une page html. On va utiliser la fonction alert() pour afficher un message de votre choix. (Et non vous n'\u00eates pas oblig\u00e9 d'afficher Hello, World). Ajouter \u00e0 l'aide de la balise script le code javascript pour faire afficher votre message. Essayer d'inclure la balise \u00e0 diff\u00e9rent endroit du fichier. Bon maintenant on va refaire la m\u00eame chose mais depuis un fichier externe. Toujours dans le r\u00e9pertoire exercices_js , cr\u00e9ez un nouveau sous-r\u00e9pertoire nomm\u00e9 js . Dans ce sous-r\u00e9pertoire, cr\u00e9ez un fichier nomm\u00e9 helloworld.js . Ajouter le code dans ce nouveau fichier. (Uniquement la ligne alert('Mon message'), pas la balise script ). Faites r\u00e9f\u00e9rence \u00e0 ce fichier en ajoutant une deuxi\u00e8me balise script . Rechargez la page pour voir le r\u00e9sultat. Vous devriez avoir comme r\u00e9sultat deux messages qui s'affichent \u00e0 l'\u00e9cran, un depuis le fichier html et un autre depuis le fichier js externe. On va profiter du moment pour afficher un troisi\u00e8me message, mais cette fois dans la console du navigateur avec la fonction console.log() . Chaque navigateur nous donne acc\u00e8s \u00e0 une console qui affiche diff\u00e9rents messages (d'avertissements, d'erreurs, etc.). Les messages affich\u00e9s dans la console ne sont pas vu par l'usager qui consulte la page web. Il faut ouvrir la console pour les visualiser. La console est un outil tr\u00e8s utilis\u00e9 pour suivre vos scripts et les \"d\u00e9bugger\". On va parler plus longuement plus tard mais pour l'instant on va s'en servir pour afficher un petit message de bienvenue. Ouvrez la console en faisant un clique droit dans la page, ensuite inspecter dans le menu contextuel et l'onglet console (valide pour Firefox et Chrome, \u00e0 voir pour les autres navigateurs). \u00c0 l'endroit que vous voulez, ajouter un message dans la console avec la fonction console.log('Mon message'); Rechargez la page pour voir le r\u00e9sultat. Structure du code Terminaison d'une ligne de code Chaque ligne de code doit se terminer par un point-virgule ( ; )! En fait ce n'est pas enti\u00e8rement vrai. Javascript est un langage assez permissif, et on peut ne pas en ajouter la plupart du temps sans cr\u00e9er d'erreurs. // Ici les deux messages vont s'afficher m\u00eame s'il n'y a pas de point-virgule alert('Bonjour') alert('tout le monde') Par contre, c'est une bonne pratique de toujours en ajouter, et je veux que vous le fassiez toujours. Commentaires Pour ajouter un commentaire sur une ligne, on utilise //. Pour les blocs de commentaires, on va plut\u00f4t utiliser / / // Commentaire sur une ligne alert('Coucou!!'); /* Commentaire sur plusieurs lignes */ console.log('Hola'); Variables D\u00e9claration et assignation En javascript les variables n'ont pas de type. Pour en d\u00e9clarer un, il suffit d'utiliser le mot let ou var suivi du nom de la variable. Nous verrons la diff\u00e9rence entre let et var plus loin, pour l'instant on va toujours utiliser let. Ensuite pour assigner une valeur \u00e0 notre variable on va utiliser le symbole = suivi de la valeur. On peut aussi faire les deux \u00e9tapes sur la m\u00eame ligne. // D\u00e9claration d'une variable let message; // Assignation de la variable message = 'Bonjour tout le monde'; // La m\u00eame chose sur une ligne let message = 'Bonjour tout le monde'; alert (message); Attention, d\u00e9clarer une variable plus d'une fois va provoquer une erreur. let message = 'Bonjour'; let message = 'Au revoir'; // On va avoir une erreur de syntaxe ici Les variables n'ayant pas de type, on peut passer plusieurs type de valeur \u00e0 une m\u00eame variable. Par contre ce n'est pas une bonne pratique et on devrait l'\u00e9viter. let message = 'Allo'; alert(message) // Va afficher Allo message = 5; alert(message * 2) // Va afficher 10; Constantes Une constante est une variable dont la valeur ne peut \u00eatre chang\u00e9 apr\u00e8s son assignation. On utilise le mot const pour la d\u00e9clarer. const COULEUR_ORANGE = '#ffaa00'; COULEUR_ORANGE = '#ffffff'; // Va provoquer une erreur Bien nommer ses variables Un nom de variable peut \u00eatre compos\u00e9 de lettre, chiffre et des caract\u00e8res $ et _. Le premier caract\u00e8re ne doit pas \u00eatre un chiffre. Si le nom de la variable comporte plus d'un mot, on va utiliser la notation camelCase , c'est-\u00e0-dire le premier mot sera en minuscule mais que les suivants commenceront par une lettre majuscule. Attention, le nom de variable est aussi sensible \u00e0 la case. // Exemple de nom en camelCase let nomEnCamelCase = 'Hallo!'; // Les deux variables sont diff\u00e9rentes let message = 'Message 1'; let messAge = 'Message 2'; Pour les constantes, la norme veux qu'on mettre le nom tout en majuscule avec les diff\u00e9rents mots s\u00e9parer par un _ quand la valeur est \"hardcod\u00e9\". Sinon on utilise le camelCase comme avec les variables. // La valeur est ici hardcod\u00e9 const COULEUR_ORANGE = '#ffaa00'; // On assigne la constant avec le r\u00e9sultat de la fonction calculAge() const monAge = calculAge(dateDeNaissance); En r\u00e8gle g\u00e9n\u00e9rale \u00e9viter les noms de variable trop court ou non significatif. // Le nom ne veut rien dire let a = 'Mon titre'; // C'est beaucoup plus significatif avec ce nom let texteTitre = 'Mon titre' Exercice En reprenant ce que vous avez fait dans la section Hello, World , modifier votre code pour utiliser des variables dans les fonctions alert() et console.log(). Interaction Il y a plusieurs fonctions natives en javascript pour interagir avec le visiteur de notre site. Nous avons d\u00e9j\u00e0 vu alert() qui affiche un message \u00e0 l'\u00e9cran. On va en voir deux autres : prompt(titre, valeur par d\u00e9faut) : Demande \u00e0 l'usager de saisir une valeur. confirm() : Affiche une fen\u00eatre avec un texte et deux boutons, Ok et Cancel. Alert Comme nous l'avons vu plus haut, une fa\u00e7on simple d'afficher un message \u00e0 l'usager est d'utiliser la commande alert() . Syntaxe alert('Mon message'); Exemple alert('Bonjour tout le monde!!'); // Affichera Bonjour Mathieu let nom = 'Mathieu'; alert('Bonjour ' + nom); Prompt Avec prompt() on demande \u00e0 l'usager de saisir une valeur qu'on assignera \u00e0 une variable. Syntaxe prompt(\"Message \u00e0 afficher\", \"Valeur optionnelle par d\u00e9faut\"); Exemple let message = 'Veuillez entrer votre nom'; // On affiche le message et r\u00e9cup\u00e8re la valeur dans la variable nom let nom = prompt(message); // La valeur affich\u00e9 sera ce qui a \u00e9t\u00e9 saisie par l'usager alert(nom); // On peut aussi d\u00e9clarer une valeur par d\u00e9faut qui sera afficher dans la case de saisie. // Ici Mathieu sera inscrit dans la case \u00e0 l'affichage let nomAvecDefaut = prompt(message, 'Mathieu'); Confirm On peut aussi poser une question \u00e0 l'usager et r\u00e9cup\u00e9rer une valeur True ou False avec la commande confirm() . Syntaxe confirm(\"Texte \u00e0 afficher\"); Exemple let resultat = confirm(\"Voulez-vous continuer?\"); // resultat prendra la valeur True ou False selon le choix de l'usager if (resultat) { alert('Ok on continue.'); } else { alert('On arr\u00eate d\u00e9j\u00e0.'); } Exercice Demander le nom de l'usager et afficher comme r\u00e9sultat le nom saisie suivi de \", bienvenue sur mon site!\". Posez la question suivante \u00e0 l'usager : \"Est-ce que vous aimez le Javascript?\". Afficher le message \"Super!\" si la r\u00e9ponse est affirmative et \"J'esp\u00e8re que \u00e7a va changer.\" si c'est n\u00e9gatif.","title":"Les bases"},{"location":"notes_de_cours/js_basics/#javascript-les-bases","text":"D\u00e9velopp\u00e9 initialement pour ajouter un peu de dynamisme aux pages web, Javascript est devenu aujourd'hui un incontournable du d\u00e9veloppement web. Il peut \u00eatre utilis\u00e9 \u00e0 la fois du c\u00f4t\u00e9 client (depuis un navigateur) ou bien du c\u00f4t\u00e9 serveur. C'est un langage de script qui n'a pas besoin d'\u00eatre compil\u00e9, il est ex\u00e9cut\u00e9 directement par le navigateur. Les scripts (nom donn\u00e9 aux \"programmes\" javascript) peuvent \u00eatre \u00e9cris directement dans un fichier HTML et ex\u00e9cut\u00e9 automatiquement au chargement de la page.","title":"Javascript - Les bases"},{"location":"notes_de_cours/js_basics/#ou-ajouter-nos-scripts","text":"","title":"O\u00f9 ajouter nos scripts"},{"location":"notes_de_cours/js_basics/#dans-un-fichier-html","text":"On peut ajouter un script un peu n'importe o\u00f9 dans un fichier html avec la balise script , dans la balise head , dans le body , etc. C'est une question de pr\u00e9f\u00e9rence. Personnellement j'ajoute mes scripts \u00e0 l'int\u00e9rieur de la balise head . La syntaxe est la suivante : <script type=\"text/javascript\"> alert('Hello, world!'); </script> Dans cette exemple, une message s'affichera \u00e0 l'\u00e9cran avec le texte Hello, world! . L'attribut type dans la balise n'est plus vraiment n\u00e9cessaire aujourd'hui, on peut l'omettre sans probl\u00e8me. Id\u00e9alement, on va r\u00e9server l'ajout de script directement dans un fichier html \u00e0 des utilisations simples et br\u00e8ves. La plupart du temps les scripts contenu dans des fichiers externes.","title":"Dans un fichier HTML"},{"location":"notes_de_cours/js_basics/#dans-un-fichier-externe","text":"Un peu comme avec le css, on peut \u00e9crire nos scripts dans un ou des fichiers externes et les appel\u00e9s depuis nos page html. Pour ce faire on va aussi utiliser la balise script mais en ajoutant l'attribut src . <script src=\"mes_scripts.js\"></script> <!-- Pour ajouter plus d'un fichier, on r\u00e9p\u00e8te avec les autres fichiers --> <script src=\"deuxieme_script.js\"></script> La maintenance et la clart\u00e9 du code est une raison d'extraire les scripts dans des fichiers externe. Mais l'avantage majeure est que le navigateur va t\u00e9l\u00e9charger les fichiers en cache. Ensuite si une autre page html fait r\u00e9f\u00e9rence \u00e0 un des fichiers t\u00e9l\u00e9charg\u00e9s, il sera lu depuis le cache et non pas t\u00e9l\u00e9charg\u00e9 \u00e0 nouveau, ce qui r\u00e9duit le trafic et permet \u00e0 la page de s'afficher plus rapidement.","title":"Dans un fichier externe"},{"location":"notes_de_cours/js_basics/#utilisation-de-lattribut-defer-et-async-de-la-balise-script","text":"Par d\u00e9faut, quand on charge un script depuis un fichier externe, il sera ex\u00e9cut\u00e9 imm\u00e9diatement. \u00c7a peut poser un probl\u00e8me si notre script interagit avec des \u00e9l\u00e9ments du DOM car ceux-ci peuvent ne pas \u00eatre encore \"charg\u00e9\" (accessible) lors de ex\u00e9cution du script. Pour palier \u00e0 ce probl\u00e8me on peut soit charger nos scripts \u00e0 la toute fin de notre fichier HTML ou bien plus utiliser l'attribut defer ou async de la balise script . defer sera utilis\u00e9 quand on veut manipuler des \u00e9l\u00e9ments de la page et \u00eatre sur qu'ils sont charg\u00e9s. async sera utilis\u00e9 pour un script qui est totalement ind\u00e9pendant de la page html. Attention par contre car en utilisant ces deux attributs, la page peut se termin\u00e9 de charger avant que les scripts soient ex\u00e9cut\u00e9. \u00c7a peut cr\u00e9er de petits probl\u00e8me visuel selon la nature des scripts. Exemple <script defer src=\"mes_scripts.js\"></script> <script async src=\"mon_script_async.js\"></script> Source : https://javascript.info/script-async-defer","title":"Utilisation de l'attribut defer et async de la balise script"},{"location":"notes_de_cours/js_basics/#hello-world","text":"Et oui, on n'y \u00e9chappera pas :smiling_imp:, on va faire un premier exemple avec un bon vieux Hello, World. Dans le r\u00e9pertoire du cours, cr\u00e9ez vous un sous-dossier nomm\u00e9 helloworld_js. Dans ce sous-r\u00e9pertoire cr\u00e9ez un fichier nomm\u00e9 helloworld.html et ajoutez-y les balises de base d'une page html. On va utiliser la fonction alert() pour afficher un message de votre choix. (Et non vous n'\u00eates pas oblig\u00e9 d'afficher Hello, World). Ajouter \u00e0 l'aide de la balise script le code javascript pour faire afficher votre message. Essayer d'inclure la balise \u00e0 diff\u00e9rent endroit du fichier. Bon maintenant on va refaire la m\u00eame chose mais depuis un fichier externe. Toujours dans le r\u00e9pertoire exercices_js , cr\u00e9ez un nouveau sous-r\u00e9pertoire nomm\u00e9 js . Dans ce sous-r\u00e9pertoire, cr\u00e9ez un fichier nomm\u00e9 helloworld.js . Ajouter le code dans ce nouveau fichier. (Uniquement la ligne alert('Mon message'), pas la balise script ). Faites r\u00e9f\u00e9rence \u00e0 ce fichier en ajoutant une deuxi\u00e8me balise script . Rechargez la page pour voir le r\u00e9sultat. Vous devriez avoir comme r\u00e9sultat deux messages qui s'affichent \u00e0 l'\u00e9cran, un depuis le fichier html et un autre depuis le fichier js externe. On va profiter du moment pour afficher un troisi\u00e8me message, mais cette fois dans la console du navigateur avec la fonction console.log() . Chaque navigateur nous donne acc\u00e8s \u00e0 une console qui affiche diff\u00e9rents messages (d'avertissements, d'erreurs, etc.). Les messages affich\u00e9s dans la console ne sont pas vu par l'usager qui consulte la page web. Il faut ouvrir la console pour les visualiser. La console est un outil tr\u00e8s utilis\u00e9 pour suivre vos scripts et les \"d\u00e9bugger\". On va parler plus longuement plus tard mais pour l'instant on va s'en servir pour afficher un petit message de bienvenue. Ouvrez la console en faisant un clique droit dans la page, ensuite inspecter dans le menu contextuel et l'onglet console (valide pour Firefox et Chrome, \u00e0 voir pour les autres navigateurs). \u00c0 l'endroit que vous voulez, ajouter un message dans la console avec la fonction console.log('Mon message'); Rechargez la page pour voir le r\u00e9sultat.","title":"Hello, World"},{"location":"notes_de_cours/js_basics/#structure-du-code","text":"","title":"Structure du code"},{"location":"notes_de_cours/js_basics/#terminaison-dune-ligne-de-code","text":"Chaque ligne de code doit se terminer par un point-virgule ( ; )! En fait ce n'est pas enti\u00e8rement vrai. Javascript est un langage assez permissif, et on peut ne pas en ajouter la plupart du temps sans cr\u00e9er d'erreurs. // Ici les deux messages vont s'afficher m\u00eame s'il n'y a pas de point-virgule alert('Bonjour') alert('tout le monde') Par contre, c'est une bonne pratique de toujours en ajouter, et je veux que vous le fassiez toujours.","title":"Terminaison d'une ligne de code"},{"location":"notes_de_cours/js_basics/#commentaires","text":"Pour ajouter un commentaire sur une ligne, on utilise //. Pour les blocs de commentaires, on va plut\u00f4t utiliser / / // Commentaire sur une ligne alert('Coucou!!'); /* Commentaire sur plusieurs lignes */ console.log('Hola');","title":"Commentaires"},{"location":"notes_de_cours/js_basics/#variables","text":"","title":"Variables"},{"location":"notes_de_cours/js_basics/#declaration-et-assignation","text":"En javascript les variables n'ont pas de type. Pour en d\u00e9clarer un, il suffit d'utiliser le mot let ou var suivi du nom de la variable. Nous verrons la diff\u00e9rence entre let et var plus loin, pour l'instant on va toujours utiliser let. Ensuite pour assigner une valeur \u00e0 notre variable on va utiliser le symbole = suivi de la valeur. On peut aussi faire les deux \u00e9tapes sur la m\u00eame ligne. // D\u00e9claration d'une variable let message; // Assignation de la variable message = 'Bonjour tout le monde'; // La m\u00eame chose sur une ligne let message = 'Bonjour tout le monde'; alert (message); Attention, d\u00e9clarer une variable plus d'une fois va provoquer une erreur. let message = 'Bonjour'; let message = 'Au revoir'; // On va avoir une erreur de syntaxe ici Les variables n'ayant pas de type, on peut passer plusieurs type de valeur \u00e0 une m\u00eame variable. Par contre ce n'est pas une bonne pratique et on devrait l'\u00e9viter. let message = 'Allo'; alert(message) // Va afficher Allo message = 5; alert(message * 2) // Va afficher 10;","title":"D\u00e9claration et assignation"},{"location":"notes_de_cours/js_basics/#constantes","text":"Une constante est une variable dont la valeur ne peut \u00eatre chang\u00e9 apr\u00e8s son assignation. On utilise le mot const pour la d\u00e9clarer. const COULEUR_ORANGE = '#ffaa00'; COULEUR_ORANGE = '#ffffff'; // Va provoquer une erreur","title":"Constantes"},{"location":"notes_de_cours/js_basics/#bien-nommer-ses-variables","text":"Un nom de variable peut \u00eatre compos\u00e9 de lettre, chiffre et des caract\u00e8res $ et _. Le premier caract\u00e8re ne doit pas \u00eatre un chiffre. Si le nom de la variable comporte plus d'un mot, on va utiliser la notation camelCase , c'est-\u00e0-dire le premier mot sera en minuscule mais que les suivants commenceront par une lettre majuscule. Attention, le nom de variable est aussi sensible \u00e0 la case. // Exemple de nom en camelCase let nomEnCamelCase = 'Hallo!'; // Les deux variables sont diff\u00e9rentes let message = 'Message 1'; let messAge = 'Message 2'; Pour les constantes, la norme veux qu'on mettre le nom tout en majuscule avec les diff\u00e9rents mots s\u00e9parer par un _ quand la valeur est \"hardcod\u00e9\". Sinon on utilise le camelCase comme avec les variables. // La valeur est ici hardcod\u00e9 const COULEUR_ORANGE = '#ffaa00'; // On assigne la constant avec le r\u00e9sultat de la fonction calculAge() const monAge = calculAge(dateDeNaissance); En r\u00e8gle g\u00e9n\u00e9rale \u00e9viter les noms de variable trop court ou non significatif. // Le nom ne veut rien dire let a = 'Mon titre'; // C'est beaucoup plus significatif avec ce nom let texteTitre = 'Mon titre'","title":"Bien nommer ses variables"},{"location":"notes_de_cours/js_basics/#exercice","text":"En reprenant ce que vous avez fait dans la section Hello, World , modifier votre code pour utiliser des variables dans les fonctions alert() et console.log().","title":"Exercice"},{"location":"notes_de_cours/js_basics/#interaction","text":"Il y a plusieurs fonctions natives en javascript pour interagir avec le visiteur de notre site. Nous avons d\u00e9j\u00e0 vu alert() qui affiche un message \u00e0 l'\u00e9cran. On va en voir deux autres : prompt(titre, valeur par d\u00e9faut) : Demande \u00e0 l'usager de saisir une valeur. confirm() : Affiche une fen\u00eatre avec un texte et deux boutons, Ok et Cancel.","title":"Interaction"},{"location":"notes_de_cours/js_basics/#alert","text":"Comme nous l'avons vu plus haut, une fa\u00e7on simple d'afficher un message \u00e0 l'usager est d'utiliser la commande alert() . Syntaxe alert('Mon message'); Exemple alert('Bonjour tout le monde!!'); // Affichera Bonjour Mathieu let nom = 'Mathieu'; alert('Bonjour ' + nom);","title":"Alert"},{"location":"notes_de_cours/js_basics/#prompt","text":"Avec prompt() on demande \u00e0 l'usager de saisir une valeur qu'on assignera \u00e0 une variable. Syntaxe prompt(\"Message \u00e0 afficher\", \"Valeur optionnelle par d\u00e9faut\"); Exemple let message = 'Veuillez entrer votre nom'; // On affiche le message et r\u00e9cup\u00e8re la valeur dans la variable nom let nom = prompt(message); // La valeur affich\u00e9 sera ce qui a \u00e9t\u00e9 saisie par l'usager alert(nom); // On peut aussi d\u00e9clarer une valeur par d\u00e9faut qui sera afficher dans la case de saisie. // Ici Mathieu sera inscrit dans la case \u00e0 l'affichage let nomAvecDefaut = prompt(message, 'Mathieu');","title":"Prompt"},{"location":"notes_de_cours/js_basics/#confirm","text":"On peut aussi poser une question \u00e0 l'usager et r\u00e9cup\u00e9rer une valeur True ou False avec la commande confirm() . Syntaxe confirm(\"Texte \u00e0 afficher\"); Exemple let resultat = confirm(\"Voulez-vous continuer?\"); // resultat prendra la valeur True ou False selon le choix de l'usager if (resultat) { alert('Ok on continue.'); } else { alert('On arr\u00eate d\u00e9j\u00e0.'); }","title":"Confirm"},{"location":"notes_de_cours/js_basics/#exercice_1","text":"Demander le nom de l'usager et afficher comme r\u00e9sultat le nom saisie suivi de \", bienvenue sur mon site!\". Posez la question suivante \u00e0 l'usager : \"Est-ce que vous aimez le Javascript?\". Afficher le message \"Super!\" si la r\u00e9ponse est affirmative et \"J'esp\u00e8re que \u00e7a va changer.\" si c'est n\u00e9gatif.","title":"Exercice"}]}